[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d TravEzy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T17-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T17-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Hey you! Yes you! Do you like travelling around the world but find it hard to manage your expenses while travelling abroad?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Well then we just have the solution for you. Introducing Travezy, with Travezy, we help NUS students who love travelling plan their"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "travel plans while keeping a lookout of their expenditure throughout the time. Travezy is your one stop trusty desktop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "application to organize your plans and financial needs. But wait, there\u0027s more, Travezy is optimized for those who prefer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "type fast this is definitely the app for you! So what are you waiting for? Get your copy of Travezy today!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "* The original source code is obtained from AddressBook-Level3 project by https://se-education.org[SE-EDU]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "* Travezy would like to acknowledge the following awesome source code and guidance in creating this application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "* UI is designed with the use of Flaticons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 2,
      "tishyakhanna97": 1,
      "-": 27,
      "ngzhaoming": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u0027site-name\u0027: \u0027TravEzy\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103t-t17-2.github.io/main/\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2,
      "tishyakhanna97": 2,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "TravEzy was developed by the https://ay1920s1-cs2103t-t17-2.github.io/main/ team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Ong Bing Jue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::bjhoohaha.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[https://github.com/bjhoohaha[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Operations Officer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Address Book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Hon Hao Chen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::honhaochen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/honhaochen[github]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Financial Officer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Financial Tracker"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Ng Zhao Ming"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::ngzhaoming.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/ngzhaoming[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Technology Officer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Itinerary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Poh Lin Wei"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::pohlinwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/pohlinwei[github]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Strategy Officer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d\u003d\u003d Tishya Khanna"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "image::tishyakhanna97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "{empty}[http://github.com/tishyakhanna97[github]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Role: Chief Information Officer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Responsibilities: Developer - Travel Diary"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 32,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* *Email us* : You can also reach us at `travEzy@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 1,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d TravEzy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ":repoURL: https://ay1920s1-cs2103t-t17-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "By: `Team T17-2`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to travel frequently"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* travels to many different countries"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to manage a significant number of contacts from different countries"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to keep track of travelling expenses"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* lends and pay money to different contacts regularly"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to plan in advance"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to keep track of different commitments in school"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* love to record its travel itinerary"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* achievements driven"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to know his/her current progress in completing the achievement"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* motivated to finish his/her accomplishments"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* loves to keep a memory of his/her travels"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "* has a need to write down a diary of his/her travel experiences"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "*Value proposition*: All-in-one travel manager for planning, scheduling, tracking for a user that loves typing commands."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | traveller | record down all my travelling stories. |  my sweet memories stored"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | student who likes travelling | record all my spendings on my trip | keep track of my budgets"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | NUS student with unusually high workload | have a calendar planner | plan ahead"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | student who needs friends and likes to travel desperately |manage my travel itineraries |keep track of my travel schedule during travels"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | undisciplined individual | keep track of my expenses | limit the accumulation of credit card debts"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* * *` | competitive individual|keep track of my own progress towards different achievements | challenge myself"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | student with many friends abroad |have an Address Book | contact my friends who are living in that area"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | student who needs friends and likes to travel desperately | have an Address Book | keep my friends’ contact categorized with different countries"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | NUS student with unusually high workload | detect conflicts in my calendar schedule | know when I\u0027m free to travel around the world"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "|`* *` | undisciplined individual | keep track of my expenses | limit the accumulation of credit card debts"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` | user | hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case:  Itinerary"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC01 - Add an event into itinerary page"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . A new event will be added to the itinerary page upon successful command"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be added to the itinerary"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy add the event in sequential order"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. No event name is given."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC02 - Delete an event into itinerary page"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Specified event will be deleted in the itinerary page upon successful command"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Event will not be delete if an invalid index is given"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be added to the itinerary"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy add the event in sequential order"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given index is invalid"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC03 - Accessing an event"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Precondition: Specified event is contain in the list"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Highlights the specific event to be edited"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to list events"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy shows a list of events in the itinerary page"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User type in the event to be accessed"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy highlights the specified event to be edited"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2a. The list is empty."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given index is invalid"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Software System : TravEzy Travelling Diary"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Use Case: UC04 - Add details to event"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Actor: User"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Precondition: User must access to an event (UC03)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Guarantees:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    . Update highlighted event with the details"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    1. User requests to edit location / time / description for highlighted event"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    2. TravEzy prompt for the location / timing / description to be added"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3. User inserts the necessary description"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    4. TravEzy display the changes for that event"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Extensions"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    3a. The given location / timing / description is invalid"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        3a1. TravEzy shows an error message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    *a. At any time, User chooses to cancel adding details to the event and exit"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a1. TravEzy requests to confirm the exit of event"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a2. User confirms the exit"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        *a3. TravEzy un-highlights the event selected"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "----"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case: Finance Tracker"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case: Calendar"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Use case: Diary"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 1,
      "bjhoohaha": 44,
      "-": 417,
      "ngzhaoming": 114
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "\u003d TravEzy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ":repoURL: https://ay1920s1-cs2103t-t17-2.github.io/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "By: `Team SE-EDU`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Team: *T17-2*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Content*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Welcome and thank you for choosing The Traveller Diary (TTD) to store precious memories of your overseas trips. This travelling diary is well suited for *NUS students who are passionate about travelling across the globe* and *prefer to use a desktop app for managing their trips abroad*. If you can type fast, TTD can help you *store, customize and manage your posts effectively*. Not only that, TTD can *access your contacts with their details* done faster than traditional GUI apps. But wait, there’s more! TTD also has a built in *financial tracker to track your expenses during each trip* to ensure you spend wisely. What are you waiting for? Hop on to this user guide and we will travel to +++\u003cu\u003e+++Section 2, “Quick Start”+++\u003c/u\u003e+++ to get a copy of your TTD and get started with it. Enjoy! 😊"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Quickstart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". Ensure that you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Download the latest TravellerDiary.jar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Traveller Diary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Type the command in the command box and press *\u003cEnter\u003e *to execute it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "E.g. typing *help* and pressing *\u003cEnter\u003e* will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ". Examples commands you may try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *listContact* : List all contacts that are in your address book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *openCalendar* : Navigate and opens up the calendar page"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ".. *deleteEvent 3* : deletes the 3rd event shown in the itinerary"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ".. *exit*: exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Financial Tracker"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Keep track of your travelling expenses."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addFin``    : add a new expense  +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateFin`` : update an existing expense +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showFin``   : show all your expenses +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteFin`` : delete an expense +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``calFin``    : calculate your total expense"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The Financial Tracker also provide extra extensions.  +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *Check which friend in your contact list owes you money* +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "You can update on which friend has previously borrowed money for you. Your personal traveller diary will then keep track of it in case you forget."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *Reminder notification when you exceed your budget* +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Afraid of over-budget? Your personal traveller diary prevents you from doing that by prompting you that you have over spent."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Friend Contact List"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Helps you to keep track of your friends’ contact information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCont``    : add a new friend to the contact information +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateCont`` : update friend information in the contact list +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showCont``   : show all friends in the contact list +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCont`` : delete friends in the contact list +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listCont``   : list all friends in the contact list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The friend contact list feature also provide certain extra extensions.  +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *duplicateContacts* +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program does not allow duplicate contacts. Contacts with the same information cannot be added to the contact list. The program may display a possible warning alert when user tries to add duplicate contact information."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag / label* +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program supports tagging / labelling of contacts. The user can tag a contact as ‘ close friends’ for example. This allows the user to identify different contact with similar contact information by tag / label. These tags / label can be color-coded or display icons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *categories* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can also categorize a particular contact into categories. This may be useful to differentiate between friends from _‘school’_ category or _‘work’ _category."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *profilePicture* +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A user profile picture can be added into the contact list. This allow the user to customize a profile picture for a particular contact."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *stickersPack* +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A way for the user to beautify the appearance for the contact list. _e.g. Putting a crown / tiara / emoticons / sticker pack to beautify the standard contact layout in the contact list._"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Calendar (Event Planner)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Gives you an overview of when you will be free to travel and recommends when will be a suitable time to travel."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitment``      : adds commitment to indicate that you won’t be able to travel on a day or over a period of time due to commitments during the public holidays/school vacation +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitments``     : similar to the above, but we can add multiple commitments at once +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addPublicHoliday``   : adds a public holiday from your calendar +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addSchoolBreak``     : adds the start and end date of your school vacation +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTrip``            : adds your trip to the calendar +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``checkAvailability``  : checks whether you are available for the stated period of time +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``clearCommitments``   : clears all commitments for the stated period of time +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCommitment``   : deletes commitment from your calendar +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSchoolBreak``  : deletes school break from your calendar +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deletePublicHoliday``: deletes public holiday from your calendar +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editBreak``        : edits the start and/or end date of your school vacation  +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editCommitment``   : edits the duration of your commitment +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showAvailability`` : shows you when you have 3 or more “free” days in the given period of time which you have specified +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``suggestDate``      : suggests when you can travel for numDays"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The event planner feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *advice* +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "This command suggests whether travelling at the stated period of time is a good idea. For instance, when exams or external commitments are around the corner, the user will be reminded of his/her responsibilities and will be asked whether he/she is sure that he/she wants to go ahead with the travelling plans."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *automaticHolidayDetector* +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Informs user of public holidays and adds them to the calendar without requiring the user to specify it."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Event Itinerary"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Helps you to plan how exactly you want to spend each hour of your trip. Each event will be numbered numerically in increasing order."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addEvent [title]``   : add a new event to your day, title no more than 50 chars +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listEvent``          : show all the events for that day +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showEvent [index]``  : show all the events for that day +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateEvent [index]``: update an event in your day based on the index +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sort [type]``        : sort events based on the type (time, tag) +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``checkTimeslot``      : checks current itinerary and shows empty time slots +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``repeatEvent [index]``: repeat the event in your day based on the index +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``doneEvent [index]``  : mark the event as done for the day +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEvent [index]``: delete an event in your day based on the index +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``exitEvent   [index]``: exit the current event being chosen"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Customize within each event selected:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTime``        : add the time for the event +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addDescription`` : add a description for the event +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addLocation``    : add the location of the event +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addNotes``       : add additional notes / details for the event +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTag``         : add a tag to the event for categorization purposes +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``delete [field]`` : delete the specified field for that particular event"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The event itinerary feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *repeatEvent* +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows the user to repeat events such as tours or planned activities"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag* +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows the user to tag and highlight events based on type, such as fun, educational, commute etc. This feature will also colour code the events so that the different types of events can be seen clearly on the calendar."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *archive* +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can archive events that he/she is unsure of and wants to review later."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *recommend* +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can get recommended activities to fill in gaps in the itinerary. The database for these recommended activities will be derived from the archive function."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Travel Diary with pictures"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addImage``         : add new images to the specified entry conveniently +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``appendToEntry``    : appends text to the specified entry"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``createEntry``      : creates a new entry in your diary +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEntry``      : deletes the specified entry of your diary +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editEntry``        : edit the specified entry of your diary +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterEntries``    : filters the entries by looking out for the specified expression +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterByTag``      : filters the entries by the specified tag +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntries``      : sorts your entries in chronological order +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntriesByTag`` : sorts your entries by tags +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``tagEntry``         : tags your entry with the specified tag(s)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The Travel Diary feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *memories* +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Reminds the user of entries s/he made a year ago."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *milestones* +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Congratulates the user when s/he met certain milestones (travelling to a continent that s/he has not previously visited, visiting one of the seven wonders of the world, etc.)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d Additional Features (Coming in V2.0)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d TRIVAGO, Price comparison"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Helps to compare the prices between two particular goods or services. Can be used to compare prices of lodging,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addData``     : add a new data to be used for price comparison +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showData``    : show the prices for a selected data +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteData``  : delete data used for price comparison +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareData`` : compare prices between two data +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``reviewData``  : review the previous few comparisons that user did +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listData``    : list out all the data that user has inputted into TTD"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The friend contact list feature also provide certain extra extensions.  +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *setConversionRates* +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Compare prices based on different countries’ currency and exchange rates. Allow user to also calculate the prices of goods using their home currency."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *tag* +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The program allows users to classify each data into different categories, such as AirBnB, hotels, restaurants, shopping centre goods."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *undo* +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Allow the user to undo their previous comparison or action should they delete the wrong data using function deleteData."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *sort* +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Based on the different taggings given by the user, it will help to sort the data based on the total price of each data."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Travel Recommendations"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Gives travel suggestions to the user."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setDates``    : set the dates for your proposed trip +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setPrice``    : set your price range +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setType``     : set the type of trip (Fun, educational etc) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``generate``    : generate recommendations from stored diaries"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The travel recommendations feature also provides  certain extra extensions. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *downloadTrips* +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can download pre planned trips and locations from online sources such as AirB\u0026B Top 10 travel locations."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *saveSources* +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can store preferred sources for trips, such as travel websites or personal blogs."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d NUS trips"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "Helps you get recommendations from NUS societies."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``loadTrips``   : download trips from NUS societies +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteTrips`` : delete certain NUS trips +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``getSoc``      : get societies from NUS which organise trips +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSoc``   : delete certain societies +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``selectSoc``   : select a certain society to load trips"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The NUS trips feature also provides  certain extra extensions.  +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "_(Extensions the group may want to consider)_"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *favourite* +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can choose preferred societies (NUS mountaineers, CIP clubs)  to favourite."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *filter* +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can filter societies based on preferences such as cost, duration and type."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "\u003d\u003d\u003d Engaging Notifications"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "New notifications will be used to alert the user. Notifications can be used to alert the user in the following circumstances:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* User set a manual reminder"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Incomplete form _perhaps in the itinerary_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Upcoming trip"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "* Upcoming event in the calendar"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *reminders* +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can set a reminder on the calendar. When the reminder is due, there will be a new notification from the program."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *colourCode* +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The notification can have different color and design to differentiate between different types of notification. _Red _used to indicate danger while _Yellow _used to indicate warning, _Blue _for general notifications etc."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *growAndShrink* +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Grow and shrink animation for notifications."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *music* +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "A music will be played when the notification appears. Different music can be used for different notification."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *sendEmailNotification* +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "An email notification will be sent to the user when the notification appears. _Similar to LumiNUS sending user confirmation email when the post lecture survey is completed_"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *customizeNotification* +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "The user can create their own custom notification. Add colours, emoticons and use different notification styling for different alerts."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *popupAlerts* +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Reminders and notifications can be displayed in the form of popup alert to alert the user if something went wrong."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ". *snooze* +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "After setting the notification, the user can snooze the notification or reminder for the user to be reminded again."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* How do I backup my data onto cloud storage? +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Locate The Traveller Diary folder in your local drive and compact it into a zip file before uploading it onto a cloud storage online."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* How do I transfer my data onto another computer? +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Install The Traveller Diary in the other computer and overwrite the empty data file it creates with during start up with the file that contains the data of your previous TTD. Alternatively, you can store it in a cloud storage it first before retrieving it and transferring it into your new computer."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Q:* Can I change the theme of the application? I prefer to work with a night theme interface. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* You can go to ``settings → themes → night mode`` to toggle between day and night mode."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Who can view my travel posts in my TTD? +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* As TTD is a single user application, it is not opened to the public, and unable to be viewed by others. Hence, it is called “diary” for a reason, which stores discrete entries reporting events that happened throughout the day. Users can however, showcase their application in front of their friends to show off their overseas trips. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Is it possible to connect to social media such as Facebook, Snapchat, Instagram? +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Currently, it is not possible to connect to social media using TTD. However, we will consider implementing this feature in the future! Stay tuned for that! 😉"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*Q:* Is there any in-app purchase for this application? +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "*A:* NO there isn’t. TTD is created from a non-profit organization and we are not here to milk any of your gold coins! It is absolutely free! It cost nothing, zilch, nada, 零, nil, kosong. So what are you waiting for get TTD today!"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* I’m having difficulties uploading the pictures onto the travel diary. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* The Traveller Diary only allow uploads of pictures that are in jpg or png. Unfortunately, we do not support gif. Do ensure that your pictures are below 25MB with the dimensions no bigger than 1920px x 1080px."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*Q:* Who can I contact should there be a bug or feedback that I would like to share? +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "*A:* Feel free to send an email to the developer team: mailto:thetravellerdiary@gmail.com[thetravellerdiary@gmail.com] and we will access to your queries within three working days. We also value your feedback and will use it to improve TTD. Thank you and looking forward to serving you better!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Here is a summary for the list of features available:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Financial Tracker: +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addFin``    : add a new expense +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateFin`` : update an existing expense +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showFin``   : show all your expenses +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteFin`` : delete an expense +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``calFin``    : calculate your total expense"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Friend Contact List: +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCont``    : add a new friend to the contact information +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateCont`` : update friend information in the contact list +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showCont``   : show all friends in the contact list +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCont`` : delete friends in the contact list +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listCont``   : list all friends in the contact list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Calendar (Event Planner): +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitment``      : adds commitment to indicate that you won’t be able to travel on a day or over a period of time due to commitments during the public holidays/school vacation +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addCommitments``     : similar to the above, but we can add multiple commitments at once +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addPublicHoliday``   : adds a public holiday from your calendar +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addSchoolBreak``     : adds the start and end date of your school vacation +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addTrip``             :  adds your trip to the calendar +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``checkAvailability``   :  checks whether you are available for the stated period of time +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``clearCommitments``    :  clears all commitments for the stated period of time +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteCommitment``    :  deletes commitment from your calendar +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSchoolBreak``   :  deletes school break from your calendar +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deletePublicHoliday`` :  deletes public holiday from your calendar +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editBreak``           : edits the start and/or end date of your school vacation  +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editCommitment``      : edits the duration of your commitment +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showAvailability``    : shows you when you have 3 or more “free” days in the given period of time which you have specified +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``suggestDate``         : suggests when you can travel for numDays"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Event Itinerary: +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addEvent``    : add a new event to your day +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``updateEvent`` : update an event in your day +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showEvent``   : show more information about your day +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEvent`` : delete an event from your day +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareEvent``: place multiple events in the same time slot for ease of comparison +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "TRIVAGO, price comparison: +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addData``     : add a new data to be used for price comparison +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showData``    : show the prices for a selected data +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteData``  : delete data used for price comparison +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``compareData`` : compare prices between two data +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``reviewData``  : review the previous few comparisons that user did +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``listData``    : list out all the data that user has inputted into TTD"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Travel Recommendations: +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setDates``    : set the dates for your proposed trip +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setPrice``    : set your price range +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``setType``     : set the type of trip (Fun, educational etc) +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``generate``    : generate recommendations from stored diaries"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "NUS trips: +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``loadTrips``   : download trips from NUS societies +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteTrips`` : delete certain NUS trips +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``showTrip``    : show your whole trip in a calendar view +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``getSoc``      : get societies from NUS which organise trips +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteSoc``   : delete certain societies +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``selectSoc``   : select a certain society to load trips"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "Travel Diary with pictures: +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``addImage``         : add new images to the specified entry conveniently +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``appendToEntry``    : appends text to the specified entry +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``createEntry``      : creates a new entry in your diary +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``deleteEntry``      : deletes the specified entry of your diary +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``editEntry``        : edit the specified entry of your diary +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterEntries``    : filters the entries by looking out for the specified expression +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``filterByTag``      : filters the entries by the specified tag +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntries``      : sorts your entries in chronological order +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``sortEntriesByTag`` : sorts your entries by tags +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "``tagEntry``         : tags your entry with the specified tag(s)"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 152,
      "-": 92,
      "ngzhaoming": 275
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/EventItinerary/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package EventItinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int time, num;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String desc, location, tag, notes, title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Event(String title, int num) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.num \u003d num;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.desc \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.location \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.tag \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.notes \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String event \u003d printBorder() + \"\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                String.format(\"     | Num: %-3d | Title: %-40s|\\n\", num, title) +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                printBorder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String printBorder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // Allows up to 50 characters long in title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return \"     o----------+------------------------------------------------o\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 34
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import EventItinerary.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import TravezyInterface.EventList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import TravezyInterface.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import TravezyInterface.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "//v1.1 changes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.add(new Event(\"test\", 1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        while(ui.getActivityLevel() \u003e 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            Parser.processCommand(command, ui, eventList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 27
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/TravezyInterface/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package TravezyInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import EventItinerary.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Random rand \u003d new Random();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void addEventPrompt() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String[] adj \u003d {\"Cool\", \"Awesome\", \"Amazing\", \"Brilliant\", \"Awesome Possum\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine() + \"\\n     \" + adj[rand.nextInt(3)] +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"! I have added this event! Here are your events currently:\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        printEventListBullet();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void listEvent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine() + \"\\n     Here are your events currently:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        printEventListBullet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void showEvent(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine() + \"\\n     Roger that! Here is the detail of the event:\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(eventList.get(index - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(printLine());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private void printEventListBullet() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            System.out.println(\"        \" + (i + 1) + \". \" + eventList.get(i).getTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        eventList.add(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return eventList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String printLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return \"\\n★ ・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・★\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 55
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/TravezyInterface/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package TravezyInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import EventItinerary.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static void processCommand(String command, Ui ui, EventList eventList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String[] commandArr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        switch(commandArr[0]) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case \"addEvent\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                Event event \u003d new Event(getTitle(command), eventList.size() + 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                eventList.add(event);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                eventList.addEventPrompt();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case \"listEvent\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                eventList.listEvent();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case \"showEvent\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                eventList.showEvent(Integer.parseInt(commandArr[1]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case \"selectEvent\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                // Only can use level 2 commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ui.setActivityLevel(2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ui.setActivityLevel(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                ui.exit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                System.out.println(\"Hello world!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static String getTitle(String command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String[] commandArr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        for (int i \u003d 1; i \u003c commandArr.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            sj.add(commandArr[i]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 52
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/TravezyInterface/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package TravezyInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private int activityLevel \u003d 1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String logo \u003d \" _________  ________  ________  ___      ___ _______   ________      ___    ___ \\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"|\\\\___   ___\\\\\\\\   __  \\\\|\\\\   __  \\\\|\\\\  \\\\    /  /|\\\\  ___ \\\\ |\\\\_____  \\\\    |\\\\  \\\\  /  /|\\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"\\\\|___ \\\\  \\\\_\\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\  /  / | \\\\   __/| \\\\|___/  /|   \\\\ \\\\  \\\\/  / /\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"     \\\\ \\\\  \\\\ \\\\ \\\\   _  _\\\\ \\\\   __  \\\\ \\\\  \\\\/  / / \\\\ \\\\  \\\\_|/__   /  / /    \\\\ \\\\    / / \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"      \\\\ \\\\  \\\\ \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\    / /   \\\\ \\\\  \\\\_|\\\\ \\\\ /  /_/__    \\\\/  /  /  \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"       \\\\ \\\\__\\\\ \\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__/ /     \\\\ \\\\_______\\\\\\\\________\\\\__/  / /    \\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"        \\\\|__|  \\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|/       \\\\|_______|\\\\|_______|\\\\___/ /     \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"                                                                   \\\\|___|/      \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"                                                                                \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String welcome \u003d \"Welcome to the itinerary planner, please use the helpItinerary command\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \"to view the commands supported by Travezy! \\uD83D\\uDE0A\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String greetings \u003d printLine() + logo + welcome + printLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(greetings);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void exit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String exit \u003d \"      Alrighty! Come back soon to add more exciting activities! \\uD83C\\uDF04\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String exitMessage \u003d printLine() + exit + printLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        System.out.println(exitMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void setActivityLevel(int level) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        activityLevel \u003d level;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String printLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return \"\\n★ ・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・★\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 42
    }
  },
  {
    "path": "src/main/java/Itinerary_planner/exceptions/TravezyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class TravezyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public TravezyException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    //Sets up all the components (shared)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 2,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarycommands/AddDiaryEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarymain.DiaryObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class AddDiaryEntryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    DiaryObject myAddedObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public AddDiaryEntryCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myAddedObject \u003d new DiaryObject(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myReference.addEntry(myAddedObject);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult addedResult \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"ADDED \" + myAddedObject.toString(),false,false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return addedResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarycommands/DeleteDiaryEntryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarymain.DiaryObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DeleteDiaryEntryCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        int deleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DeleteDiaryEntryCommand(int x) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        deleted \u003d x;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        DiaryObject deletedObject \u003d myReference.deleteEntry(deleted);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult deletedResult \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"DELETED \" + deletedObject.toString(),false,false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deletedResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarycommands/DiaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarymain.DiaryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public abstract class DiaryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    protected static DiaryList myReference;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param myList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   public void setReference(DiaryList myList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "       myReference \u003d myList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "   }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public abstract CommandResult executeCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarycommands/DiaryErrorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarymain.DiaryObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryErrorCommand extends DiaryCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    Exception issue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryErrorCommand(Exception x) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        issue \u003d x;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandResult executeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        CommandResult deletedResult \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                new CommandResult(\"Error \" + issue,false,false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deletedResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryexceptions/CommandNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class CommandNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public CommandNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarymain/DiaryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarymain;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    private LinkedList\u003cDiaryObject\u003e myContainer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myContainer \u003d new LinkedList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject addEntry(DiaryObject x) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        myContainer.add(x);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param x"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject deleteEntry(int x) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        DiaryObject deleted \u003d myContainer.remove(x-1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diarymain/DiaryObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diarymain;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryObject {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    String entry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param y"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public DiaryObject(String y) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        entry \u003d y;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        return this.entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/diaryfeature/diaryparser/DiaryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "package seedu.address.diaryfeature.diaryparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarycommands.AddDiaryEntryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarycommands.DeleteDiaryEntryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diarycommands.DiaryErrorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.diaryfeature.diaryexceptions.CommandNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "public class DiaryParser implements Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    public Command parse(String userInput)  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            String trimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            if (trimmed.startsWith(\"add entry\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //Note that \"add entry\" counts as 9 characters, and hence the added task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //only starts from pos 10"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                String entry \u003d trimmed.substring(10);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new AddDiaryEntryCommand(entry);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else if (trimmed.startsWith(\"delete Entry\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //Note that \"delete Entry\" counts as 12 characters,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                //and hence, we start from pos 13"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                int deleteIndex \u003d Integer.parseInt(trimmed.substring(13));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                return new DeleteDiaryEntryCommand(deleteIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "                throw new CommandNotFoundException(\"No such command yet\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        catch (Exception x) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "            return new DiaryErrorCommand(x);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tishyakhanna97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tishyakhanna97": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/Expense/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model.Expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * A finance expense."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Amount should only contain numbers\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/Expense/Country.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model.Expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Country name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The first character of the country must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Country(String country) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d country;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/Expense/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model.Expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.value \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/Expense/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model.Expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Expense(Amount amount, Description desc, Country country) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Description getDesc() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if both expense have the same data fields."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return otherExpense.amount.equals(this.amount)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 otherExpense.desc.equals(this.desc)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 otherExpense.country.equals(this.country);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/ExpenseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An expense list for financial expenses."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpenseList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXCollections.unmodifiableObservableList(expenses);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenses.remove(index - 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/FinancialTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTracker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final ExpenseList expenseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FinancialTracker() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expenseList \u003d new ExpenseList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseList.addExpense(expense);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseList.deleteExpense(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return expenseList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/Model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.Model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTracker financialTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Model() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker \u003d new FinancialTracker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        filteredExpenses \u003d new FilteredList\u003c\u003e(this.financialTracker.getExpenseList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker.addExpense(expense);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void deleteExpense(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTracker.deleteExpense(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return filteredExpenses;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/AddFinCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * add financial expenses command for Financial Tracker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class AddFinCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the financial tracker \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Unknown error, your expenses are not added.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense added\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Expense expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public AddFinCommand(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.addExpense(expense);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/DeleteFinCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * delete a financial expense, command for Financial Tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteFinCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Unknown error, your expenses are not deleted.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your expense has been deleted\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteFinCommand(Index index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        model.deleteExpense(index.getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/MainCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command to switch to Main window."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class MainCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"main\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(COMMAND_WORD, false, false, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/commands/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * List out a summary of your current expenses."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Unknown error, your expenses are not deleted.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(MESSAGE_FAIL, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/AddFinCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Country;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.AddFinCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.financialtracker.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class AddFinCommandParser implements Parser\u003cAddFinCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public AddFinCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_COUNTRY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFinCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Expense expense \u003d new Expense(amount, description, country);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new AddFinCommand(expense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/DeleteFinCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.DeleteFinCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteFinCommandParser implements Parser\u003cDeleteFinCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteFinCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DeleteFinCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFinCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/FinancialTrackerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.AddFinCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.DeleteFinCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.MainCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.SummaryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            case AddFinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return new AddFinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            case DeleteFinCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return new DeleteFinCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return new SummaryCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            case MainCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return new MainCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Country;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Amount parseAmount(String name) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedAmount \u003d name.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedPhone \u003d description.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Description.isValidDescription(trimmedPhone)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Description(trimmedPhone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parses a {@code String country} into an {@code Country}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Country parseCountry(String country) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String trimmedCountry \u003d country.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!Country.isValidCountry(trimmedCountry)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ParseException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new Country(trimmedCountry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/ExpenseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"ExpenseCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label desc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        amount.setText(expense.getAmount().value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        desc.setText(expense.getDesc().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        country.setText(expense.getCountry().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/ExpensePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ExpensePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"ExpensePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpensePanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ExpensePanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/financialtracker/ui/FinancialTrackerPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.financialtracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.Model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.parser.FinancialTrackerParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.Pages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * The Financial Tracker Window"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerPage extends UiPart\u003cVBox\u003e implements Page {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final static PageType pageType \u003d PageType.FINANCIAL_TRACKER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static final String FXML \u003d \"FinancialTrackerWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ExpensePanel expensePanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerParser financialTrackerParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Scene financialTrackerScene;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private VBox financialTrackerPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane expensePlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FinancialTrackerPage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(FXML, new VBox());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTrackerParser \u003d new FinancialTrackerParser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.model \u003d new Model();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        financialTrackerScene \u003d new Scene(financialTrackerPane);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expensePanel \u003d new ExpensePanel(model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        expensePlaceholder.getChildren().add(expensePanel.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Command command \u003d financialTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                //handleHelp();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (commandResult.isShowPage()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                handlePageChange(commandResult);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Changes application page."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void handlePageChange(CommandResult commandResult) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Scene requestedPage \u003d Pages.getPage(commandResult);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ((Stage) this.getScene().getWindow()).setScene(requestedPage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.financialTrackerScene.getWindow().hide();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return financialTrackerScene;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/commands/ItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Shows itinerary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ItineraryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itinerary\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows you your itinerary.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String SHOWING_ITINERARY_MESSAGE \u003d \"itinerary\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(SHOWING_ITINERARY_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/itinerary/ui/ItineraryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.itinerary.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.calendar.model.CalendarSimplified;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.Page;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.ui.PageType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class ItineraryPage implements Page {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final static PageType pageType \u003d PageType.ITINERARY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private boolean isOpened \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Scene calendarScene;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    VBox calendarPane \u003d new VBox();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    GridPane weekHeader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    GridPane monthView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML // todo change the following to CommandBox class?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            TextField commandBox \u003d new TextField();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    Label monthLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public ItineraryPage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // todo: move to week header"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        weekHeader \u003d generateWeekHeader();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // todo: replace with dynamic calendar object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        CalendarSimplified c \u003d new CalendarSimplified();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthView \u003d generateMonthView(c.getDays());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthLabel \u003d new Label(\"October\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthLabel.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // todo: remove separate command box and integrate it with main page"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        commandBox.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            String s \u003d commandBox.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            commandBox.setText(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        calendarPane.setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        calendarPane.getChildren().addAll(monthLabel, weekHeader, monthView, commandBox);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        calendarScene \u003d new Scene(calendarPane);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean isOpened() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return isOpened;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    void setOpened(boolean isOpened) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.isOpened \u003d isOpened;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private GridPane generateWeekHeader() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        GridPane weekHeader \u003d new GridPane();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String[] days \u003d { \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int widthPercent \u003d 100 / days.length;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        weekHeader.setHgap(10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        weekHeader.setVgap(10);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        weekHeader.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        IntStream.range(0, days.length)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .forEach(i -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    ColumnConstraints newColumn \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    newColumn.setPercentWidth(widthPercent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    newColumn.setHalignment(HPos.CENTER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    weekHeader.getColumnConstraints().add(newColumn);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    Label day \u003d new Label(days[i]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    weekHeader.add(day, i, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return weekHeader;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private GridPane generateMonthView(IntStream days) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int height \u003d 100;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        GridPane monthView \u003d new GridPane();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        monthView.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        IntStream.range(0, 5)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .forEach(i -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    RowConstraints newRow \u003d new RowConstraints();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    newRow.setPrefHeight(height);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                    monthView.getRowConstraints().add(newRow);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        int width \u003d 150;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        days.forEach(i -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            VBox dayView \u003d generateDayView(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            dayView.setPrefWidth(width);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            monthView.add(dayView, i, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return monthView;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    // todo change this to a class which has a setDate method"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private VBox generateDayView(int date) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        VBox dayView \u003d new VBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Label dateOfMonth \u003d new Label(Integer.toString(date));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        dayView.getChildren().add(dateOfMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        dayView.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return dayView;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return calendarScene;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country updatedCountry \u003d editPersonDescriptor.getCountry().orElse(personToEdit.getCountry());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                updatedCountry);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        private Country country;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            setCountry(toCopy.country);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public void setCountry(Country country) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            this.country \u003d country;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        public Optional\u003cCountry\u003e getCountry () {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            return Optional.ofNullable(country);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                    \u0026\u0026 getCountry().equals(e.getCountry());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 17,
      "-": 223,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FinancialTrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Switch to financial tracker window command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FinancialTrackerCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"financial_tracker\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new CommandResult(COMMAND_WORD, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags(), personToEdit.getCountry());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "ngzhaoming": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country country \u003d ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, remark, tagList, country);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 58,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.calendar.commands.CalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.FinancialTrackerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.logic.commands.SampleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.commands.ItineraryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        case FinancialTrackerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new FinancialTrackerCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        case ItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            return new ItineraryCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // todo: remove this when everyone has implemented the UI of their page"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case SampleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SampleCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 8,
      "-": 82,
      "ngzhaoming": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final Prefix PREFIX_COUNTRY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 15,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNTRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        PREFIX_COUNTRY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COUNTRY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            editPersonDescriptor.setCountry(ParserUtil.parseCountry(argMultimap.getValue(PREFIX_COUNTRY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Parses a {@code String country} into a {@code Country}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @throws ParseException if the given {@code country} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static Country parseCountry(String country) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String trimmedCountry \u003d country.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!Country.isValidCountry(trimmedCountry)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new ParseException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Country(trimmedCountry);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 16,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return new RemarkCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/country/Country.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.model.country;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Represents a Person\u0027s country in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class Country {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Country entered should be in the list below:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Afghanistan\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Åland Islands\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Albania\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Algeria\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"American Samoa\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Andorra\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Angola\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Anguilla\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Antarctica\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Antigua \u0026 Barbuda\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Argentina\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Armenia\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Aruba\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Australia\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Austria\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Azerbaijan\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bahamas\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bahrain\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bangladesh\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Barbados\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belarus\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belgium\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Belize\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Benin\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bermuda\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bhutan\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bolivia\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bosnia \u0026 Herzegovina\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Botswana\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bouvet Island\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Brazil\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"British Indian Ocean Territory\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"British Virgin Islands\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Brunei\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Bulgaria\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Burkina Faso\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Burundi\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cambodia\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cameroon\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Canada\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cape Verde\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Caribbean Netherlands\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cayman Islands\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Central African Republic\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Chad\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Chile\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"China\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Christmas Island\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cocos (Keeling) Islands\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Colombia\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Comoros\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Congo - Brazzaville\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Congo - Kinshasa\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cook Islands\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Costa Rica\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Côte d’Ivoire\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Croatia\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cuba\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Curaçao\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Cyprus\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Czechia\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Denmark\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Djibouti\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Dominica\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Dominican Republic\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ecuador\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Egypt\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"El Salvador\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Equatorial Guinea\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Eritrea\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Estonia\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ethiopia\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Falkland Islands\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Faroe Islands\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Fiji\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Finland\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"France\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Guiana\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Polynesia\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"French Southern Territories\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gabon\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gambia\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Georgia\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Germany\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ghana\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Gibraltar\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Greece\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Greenland\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Grenada\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guadeloupe\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guam\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guatemala\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guernsey\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guinea\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guinea-Bissau\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Guyana\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Haiti\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Heard \u0026 McDonald Islands\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Honduras\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Hong Kong SAR China\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Hungary\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iceland\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"India\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Indonesia\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iran\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Iraq\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ireland\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Isle of Man\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Israel\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Italy\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jamaica\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Japan\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jersey\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Jordan\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kazakhstan\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kenya\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kiribati\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kuwait\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Kyrgyzstan\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Laos\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Latvia\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lebanon\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lesotho\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Liberia\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Libya\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Liechtenstein\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Lithuania\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Luxembourg\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Macau SAR China\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Macedonia\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Madagascar\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malawi\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malaysia\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Maldives\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mali\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Malta\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Marshall Islands\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Martinique\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mauritania\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mauritius\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mayotte\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mexico\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Micronesia\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Moldova\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Monaco\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mongolia\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Montenegro\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Montserrat\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Morocco\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Mozambique\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Myanmar (Burma)\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Namibia\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nauru\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nepal\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Netherlands\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"New Caledonia\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"New Zealand\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nicaragua\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Niger\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Nigeria\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Niue\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Norfolk Island\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"North Korea\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Northern Mariana Islands\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Norway\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Oman\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Pakistan\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Palau\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Palestinian Territories\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Panama\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Papua New Guinea\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Paraguay\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Peru\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Philippines\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Pitcairn Islands\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Poland\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Portugal\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Puerto Rico\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Qatar\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Réunion\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Romania\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Russia\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Rwanda\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Samoa\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"San Marino\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"São Tomé \u0026 Príncipe\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Saudi Arabia\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Senegal\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Serbia\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Seychelles\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sierra Leone\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Singapore\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sint Maarten\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Slovakia\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Slovenia\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Solomon Islands\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Somalia\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Africa\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Georgia \u0026 South Sandwich Islands\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Korea\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"South Sudan\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Spain\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sri Lanka\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Barthélemy\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Helena\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Kitts \u0026 Nevis\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Lucia\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Martin\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Pierre \u0026 Miquelon\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"St. Vincent \u0026 Grenadines\\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sudan\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Suriname\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Svalbard \u0026 Jan Mayen\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Swaziland\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Sweden\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Switzerland\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Syria\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Taiwan\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tajikistan\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tanzania\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Thailand\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Timor-Leste\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Togo\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tokelau\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tonga\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Trinidad \u0026 Tobago\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tunisia\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turkey\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turkmenistan\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Turks \u0026 Caicos Islands\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Tuvalu\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"U.S. Outlying Islands\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"U.S. Virgin Islands\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uganda\\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Ukraine\\n\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United Arab Emirates\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United Kingdom\\n\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"United States\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uruguay\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Uzbekistan\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vatican City\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Venezuela\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vietnam\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Vanuatu\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Wallis \u0026 Futuna\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Western Sahara\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Yemen\\n\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Zambia\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                     + \"Zimbabwe\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Constructs a {@code Country}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * @param country A valid country."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Country(String country) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireNonNull(country);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        checkArgument(isValidCountry(country));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        value \u003d country;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     * Returns if a given string is a valid country."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static boolean isValidCountry(String test) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return isEmpty(test) || Arrays.stream(Locale.getISOCountries())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                      .anyMatch(x -\u003e new Locale(\"\", x).getDisplayCountry().equals(test));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static boolean isEmpty(String test) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return test.equals(\"\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                || (other instanceof Country // instanceof handles nulls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 value.equals(((Country) other).value)); // state check"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 306
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final Country country;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags, Country country) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public Country getCountry() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return country;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                \u0026\u0026 otherPerson.getCountry().equals(getCountry());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, country);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 12,
      "-": 116,
      "ngzhaoming": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"friends\"), new Country(\"Singapore\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Country(\"United States\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"neighbours\"), new Country(\"\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"family\"), new Country(\"\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"classmates\"), new Country(\"\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Remark(\"\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                getTagSet(\"colleagues\"), new Country(\"\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 13,
      "-": 48,
      "ngzhaoming": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private final String country;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            @JsonProperty(\"remark\") String remark, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            @JsonProperty(\"country\") String country) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d country;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d source.getCountry().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (country \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        if (!Country.isValidCountry(country)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            throw new IllegalValueException(Country.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        final Country modelCountry \u003d new Country(country);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags, modelCountry);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 15,
      "-": 107,
      "ngzhaoming": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.calendar.ui.CalendarPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import seedu.address.financialtracker.ui.FinancialTrackerPage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.itinerary.ui.ItineraryPage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements Page {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Scene mainScene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Pages pages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private FinancialTrackerPage financialTrackerPage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private CalendarPage calendarPage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private ItineraryPage itineraryPage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        financialTrackerPage \u003d new FinancialTrackerPage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarPage \u003d new CalendarPage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        itineraryPage \u003d new ItineraryPage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        mainScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // todo-this-week: call the PageScene constructor with your page scene instead,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        // e.g. Pages(primaryScene, diaryScene)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // note that one of the PageScene\u0027s constructor is a vararg"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        pages \u003d new Pages(this, new SamplePage(), itineraryPage, financialTrackerPage, calendarPage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Changes application page."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePageChange(CommandResult commandResult) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene requestedPage \u003d pages.getPage(commandResult);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setScene(requestedPage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowPage()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                handlePageChange(commandResult);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Scene getScene() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return mainScene;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return PageType.MAIN;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 31,
      "-": 202,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Pages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Pages {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private static List\u003cPage\u003e pages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // todo: change this parameter to the specified scenes to minimise possible errors"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // keep PageScene constructor package private to prevent creation of this class elsewhere"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Pages(Page ... pages) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pages \u003d Stream.of(pages)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Scene getPage(CommandResult commandResult) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        PageType request \u003d PageType.of(commandResult.getFeedback());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cScene\u003e requestedPage \u003d pages.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(p -\u003e p.getPageType().equals(request))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(p -\u003e p.getScene())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (requestedPage.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Every get page command should have a page class implemented for it\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return requestedPage.get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Label country;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country.setText(person.getCountry().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 3,
      "-": 74,
      "ngzhaoming": 3
    }
  },
  {
    "path": "src/main/resources/view/ExpenseCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                  \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"desc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$desc\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$country\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 38
    }
  },
  {
    "path": "src/main/resources/view/ExpensePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 8
    }
  },
  {
    "path": "src/main/resources/view/FinancialTrackerWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cfx:root fx:id\u003d\"financialTrackerPane\" stylesheets\u003d\"@DarkTheme.css\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Financial Tracker\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003c/Menu\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003cVBox fx:id\u003d\"expenseList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "               \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "           \u003cStackPane fx:id\u003d\"expensePlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 8,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "      \u003cLabel fx:id\u003d\"country\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$country\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 1,
      "-": 36,
      "ngzhaoming": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String VALID_COUNTRY_AMY \u003d \"Singapore\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String VALID_COUNTRY_BOB \u003d \"Malaysia\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COUNTRY_DESC_AMY \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String COUNTRY_DESC_BOB \u003d \" \" + PREFIX_COUNTRY + VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String INVALID_COUNTRY_DESC \u003d \" \" + PREFIX_COUNTRY + \"Soviet Union\"; // soviet union is not in the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                                                                                        // list of countries"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 9,
      "-": 121,
      "ngzhaoming": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // different country -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 5,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(editedPerson.getRemark().toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        expectedModel.setPerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + COUNTRY_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        COUNTRY_DESC_AMY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //missing name prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                COUNTRY_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                VALID_COUNTRY_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 22,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        final Remark remark \u003d new Remark(\"Some remark.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "ngzhaoming": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COUNTRY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COUNTRY_DESC, Country.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // country"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COUNTRY_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withCountry(VALID_COUNTRY_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + COUNTRY_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                + COUNTRY_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                .withCountry(VALID_COUNTRY_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 19,
      "-": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"Korea\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String VALID_COUNTRY \u003d \"South Korea\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_validValueWithWhitespace_returnsTrimmedCountry() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String countryWithWhitespace \u003d WHITESPACE + VALID_COUNTRY + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(countryWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCountry((String) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCountry(INVALID_COUNTRY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void parseCountry_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        Country expectedCountry \u003d new Country(VALID_COUNTRY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertEquals(expectedCountry, ParserUtil.parseCountry(VALID_COUNTRY));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 23,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/CountryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "public class CountryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Country(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void isValidCountry() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        //null country"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Country.isValidCountry(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"Korea\")); //South Korea"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"singapore\")); //Singapore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"America\")); //United States"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(Country.isValidCountry(\"United States of America\")); //extra characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // valid countries"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Afghanistan\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Åland Islands\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Albania\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Algeria\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"American Samoa\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Andorra\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Angola\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Anguilla\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Antarctica\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Antigua \u0026 Barbuda\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Argentina\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Armenia\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Aruba\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Australia\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Austria\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Azerbaijan\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bahamas\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bahrain\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bangladesh\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Barbados\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belarus\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belgium\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Belize\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Benin\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bermuda\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bhutan\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bolivia\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bosnia \u0026 Herzegovina\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Botswana\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bouvet Island\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Brazil\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"British Indian Ocean Territory\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"British Virgin Islands\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Brunei\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Bulgaria\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Burkina Faso\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Burundi\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cambodia\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cameroon\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Canada\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cape Verde\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Caribbean Netherlands\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cayman Islands\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Central African Republic\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Chad\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Chile\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"China\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Christmas Island\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cocos (Keeling) Islands\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Colombia\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Comoros\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Congo - Brazzaville\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Congo - Kinshasa\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cook Islands\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Costa Rica\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Côte d’Ivoire\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Croatia\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cuba\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Curaçao\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Cyprus\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Czechia\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Denmark\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Djibouti\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Dominica\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Dominican Republic\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ecuador\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Egypt\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"El Salvador\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Equatorial Guinea\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Eritrea\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Estonia\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ethiopia\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Falkland Islands\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Faroe Islands\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Fiji\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Finland\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"France\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Guiana\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Polynesia\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"French Southern Territories\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gabon\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gambia\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Georgia\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Germany\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ghana\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Gibraltar\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Greece\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Greenland\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Grenada\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guadeloupe\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guam\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guatemala\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guernsey\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guinea\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guinea-Bissau\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Guyana\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Haiti\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Heard \u0026 McDonald Islands\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Honduras\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Hong Kong SAR China\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Hungary\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iceland\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"India\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Indonesia\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iran\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Iraq\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ireland\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Isle of Man\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Israel\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Italy\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jamaica\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Japan\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jersey\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Jordan\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kazakhstan\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kenya\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kiribati\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kuwait\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Kyrgyzstan\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Laos\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Latvia\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lebanon\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lesotho\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Liberia\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Libya\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Liechtenstein\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Lithuania\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Luxembourg\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Macau SAR China\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Macedonia\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Madagascar\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malawi\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malaysia\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Maldives\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mali\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Malta\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Marshall Islands\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Martinique\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mauritania\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mauritius\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mayotte\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mexico\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Micronesia\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Moldova\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Monaco\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mongolia\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Montenegro\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Montserrat\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Morocco\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Mozambique\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Myanmar (Burma)\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Namibia\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nauru\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nepal\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Netherlands\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"New Caledonia\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"New Zealand\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nicaragua\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Niger\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Nigeria\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Niue\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Norfolk Island\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"North Korea\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Northern Mariana Islands\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Norway\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Oman\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Pakistan\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Palau\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Palestinian Territories\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Panama\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Papua New Guinea\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Paraguay\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Peru\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Philippines\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Pitcairn Islands\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Poland\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Portugal\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Puerto Rico\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Qatar\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Réunion\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Romania\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Russia\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Rwanda\"));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Samoa\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"San Marino\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"São Tomé \u0026 Príncipe\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Saudi Arabia\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Senegal\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Serbia\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Seychelles\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sierra Leone\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Singapore\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sint Maarten\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Slovakia\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Slovenia\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Solomon Islands\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Somalia\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Africa\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Georgia \u0026 South Sandwich Islands\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Korea\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"South Sudan\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Spain\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sri Lanka\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Barthélemy\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Helena\"));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Kitts \u0026 Nevis\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Lucia\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Martin\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Pierre \u0026 Miquelon\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"St. Vincent \u0026 Grenadines\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sudan\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Suriname\"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Svalbard \u0026 Jan Mayen\"));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Swaziland\"));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Sweden\"));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Switzerland\"));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Syria\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Taiwan\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tajikistan\"));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tanzania\"));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Thailand\"));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Timor-Leste\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Togo\"));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tokelau\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tonga\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Trinidad \u0026 Tobago\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tunisia\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turkey\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turkmenistan\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Turks \u0026 Caicos Islands\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Tuvalu\"));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"U.S. Outlying Islands\"));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"U.S. Virgin Islands\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uganda\"));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Ukraine\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United Arab Emirates\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United Kingdom\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"United States\"));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uruguay\"));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Uzbekistan\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vatican City\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Venezuela\"));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vietnam\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Vanuatu\"));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Wallis \u0026 Futuna\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Western Sahara\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Yemen\"));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Zambia\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertTrue(Country.isValidCountry(\"Zimbabwe\"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 280
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COUNTRY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        // different Country -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withCountry(VALID_COUNTRY_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 5,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhaoming": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String INVALID_COUNTRY \u003d \"Korea\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private static final String VALID_COUNTRY \u003d BENSON.getCountry().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        VALID_COUNTRY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void toModelType_invalidCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        INVALID_COUNTRY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String expectedMessage \u003d Country.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public void toModelType_nullCountry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Country.class.getSimpleName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 39,
      "-": 101,
      "ngzhaoming": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.setCountry(person.getCountry());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public EditPersonDescriptorBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.setCountry(new Country(country));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 7,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import seedu.address.model.country.Country;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final String DEFAULT_COUNTRY \u003d \"Iraq\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    private Country country;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d new Country(DEFAULT_COUNTRY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        country \u003d personToCopy.getCountry();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public PersonBuilder withCountry(String country) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        this.country \u003d new Country(country);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        return new Person(name, phone, email, address, remark, tags, country);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 10,
      "-": 92,
      "ngzhaoming": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        sb.append(PREFIX_COUNTRY + person.getCountry().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "        descriptor.getCountry().ifPresent(country -\u003e sb.append(PREFIX_COUNTRY).append(country.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 4,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withTags(\"friends\").withCountry(\"Singapore\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhaoming"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withCountry(\"Vietnam\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCountry(\"China\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withCountry(\"Japan\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withCountry(\"South Korea\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withCountry(\"Romania\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCountry(\"India\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withCountry(\"United States\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"Singapore\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bjhoohaha"
        },
        "content": "            .withCountry(\"Malaysia\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bjhoohaha": 14,
      "-": 62,
      "ngzhaoming": 2
    }
  }
]
