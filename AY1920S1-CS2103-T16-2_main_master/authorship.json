[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d Modulo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T16-2/main[image:https://travis-ci.org/AY1920S1-CS2103-T16-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* _Modulo_ is a desktop application developed to help National University of Singapore (NUS) students manage their studies and expenditures."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "* With _Modulo_, you no longer need to use multiple different applications to organise your student life."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Things like scheduling your timetable, recording down the tasks and events you need to do and attend, reviewing your academic progress,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "creating your own question bank and keeping track of your expenses; _Modulo_ will handle it all."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* The application has a GUI (Graphical User Interface) but most user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* The original source of the code comes from https://github.com/nus-cs2103-AY1920S1/addressbook-level3[AddressBook-Level3 project], created by SE-EDU initiative at https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "victorvic54": 4,
      "tohcejasmine": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u0027site-name\u0027: \u0027Modulo\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T16-2/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 152,
      "tohcejasmine": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "_Modulo_ - a java application that enable students to keep track of their studies"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "by enabling them to create modules, plans, quizzes and managing their finances."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "This application was adapted from the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Tutor: Kyler Wong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d Joanna Sara Susan Purba"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "image::joannasara.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty}About: [https://github.com/joannasara[Github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Responsibilities: Calendar"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d Tuan Ding Wei"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "image::tuandingwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty}About: [https://github.com/tuandingwei[Github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Responsibilities: Modules"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d Victor Varian"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "image::victorvic54.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty}About: [https://github.com/victorvic54[Github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Responsibilities: Quizzes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d Jasmine Toh"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "image::tohcejasmine.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty}About: [https://github.com/tohcejasmine[Github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Responsibilities: Finance"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "victorvic54": 24
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T16-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "* *Creative ideas* : We also welcome creative ideas to improve our product. Please email your creative ideas to us."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "* *Email us* : You can also reach us at `tuandingwei@u.nus.edu`."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d Team Developers: +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Tuan Ding Wei: tuandingwei@u.nus.edu +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Joanna: e0313546@u.nus.edu +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Victor: e0313575@u.nus.edu +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Jasmine: e0104958@u.nus.edu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Advisor:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Kyler Wong: kylerwong@u.nus.edu."
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 6,
      "-": 4,
      "victorvic54": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d MODULO - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "By: `Team T16-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "`Main` has two classes called link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/Main.java[`Main`] and link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*API* : link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*API* : link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*API* : link:https://github.com/AY1920S1-CS2103-T16-2/main/blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joannasara"
        },
        "content": "* students at the National University of Singapore"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*Value proposition*: manage modules and tasks with more flexibility than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |university student |add my modules by specifying a specific module code or title |track the modules I am taking this semester"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |student |view details, content, and requirements of each modules |comprehensively come to a decision on which module to take in the upcoming semester"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |busy student |view my today\u0027s schedule |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |busy student |know the deadlines for my tasks |plan my schedule"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |new user |view the user guide easily |spend less time figuring out how to use the app"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |person who often make mistakes |undo my previous actions |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |organised student |schedule the times when I plan to do an assignment |know my timetable for the day"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * *` |lazy user |add a tag for each task |search each task more quickly by using the tag"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "|`* * *` |competitive student |add some questions and answers that I have learnt today |read again and attempt them before exam"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* *` |student concerned with my CAP |find out what grades I should get in the current semester |pull my CAP up to the next degree classification"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |student |view details of modules I have taken in previous semesters |see my progress"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* *` |graduating student |see what remaining modules I need to take in order to fulfill my graduation requirements |plan my semester"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |new user |see how many marks I have obtained for a module so far |review my progress"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |busy student| refer and use the predictive text |input a command with great ease and less time"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |forgetful user |receive reminders on assignments and work near the deadline |remember to complete and submit it on time"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* *` |curious student |calculate and predict how much effort I need to put for a particular module based on the score I have gained so far |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |lazy and forgetful student |keep track of lectures that I have missed |"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |student with too many assignments | automatically get my assignment sorted according to its grade percentage |"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* * ` |kiasu student |make a checklist of materials that I have to learn for my exams |"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`*` |student interested in numbers |view an overall summary of my academic journey so far |reflect on it"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* ` |clumsy typer |have a program that still understand my commands even with minor spelling errors |not have to enter the command again"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joannasara"
        },
        "content": "|`* ` |calendar app user |sync my timetable to my own personal calendar |refer to my schedule"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d Use case: Add module"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joannasara"
        },
        "content": "1.  User request to add module"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joannasara"
        },
        "content": "2.  Modulo requests user to input the module\u0027s time schedule"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joannasara"
        },
        "content": "3.  User inputs the time schedule"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joannasara"
        },
        "content": "4.  Module adds the new module to the user\u0027s timetable"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joannasara"
        },
        "content": "* 2a. The given time is invalid."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joannasara"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joannasara"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joannasara"
        },
        "content": "** 2a1. Modulo shows an error message."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joannasara"
        },
        "content": "+"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joannasara"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d Use case: Edit lecture time"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joannasara"
        },
        "content": "1.  User request to edit the lecture time of a certain module"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joannasara"
        },
        "content": "2.  Modulo asks the user to input the new timing"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joannasara"
        },
        "content": "3.  User inputs the time"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joannasara"
        },
        "content": "4.  Module edits the lecture time in the user\u0027s timetable"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joannasara"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joannasara"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joannasara"
        },
        "content": "* 2a. The given time is invalid."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joannasara"
        },
        "content": "** 2a1. Modulo shows an error message."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joannasara"
        },
        "content": "+"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joannasara"
        },
        "content": "* 4a. The module doesn\u0027t exist"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joannasara"
        },
        "content": "** 4a1. Modulo shows an error message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".  Should minimize the amount of typing"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".  Should work on various desktop size"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//[appendix]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//*Product Name*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//Author: ..."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//Pros:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//Cons:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//* ..."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "joannasara"
        },
        "content": ". First launch"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Shows the GUI with an initial setup page."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".. User types in `bye` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Closes the app and GUI"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "joannasara"
        },
        "content": ". Subsequent launches"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Shows the GUI with the timetable displayed."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".. User types in `bye` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Closes the app and GUI"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d Deleting a module"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "joannasara"
        },
        "content": ". Deleting a module while timetable is displayed"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//.. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".. Test case: `delete CS2102` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Module is deleted from the timetable."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "joannasara"
        },
        "content": ".. Test case: `delete CC2103` , module doesnt exist on the timetable +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   Expected: Error details shown in the status message."
      }
    ],
    "authorContributionMap": {
      "joannasara": 114,
      "-": 346,
      "victorvic54": 2
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d MODULO - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "By: `Team T16-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Modulo is a desktop application helping National University of Singapore (NUS) students to audit their academics, finances and schedule their time as they try their best to survive yet another semester of college. Those who prefer to work with a Command Line Interface (CLI) might find using Modulo to be more straightforward than the usual Graphical User Interface (GUI) applications. The application has the visual benefits of a GUI but stands strongly rooted in command line usage. Modulo does not require an internet connection to run so there’s no worry when the school wifi goes MIA yet again. The only time you need to be connected is at the start, when downloading the application. Look to \u003c\u003cQuick Start\u003e\u003e to find out how to get started on Modulo!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ".  Make sure that `Java 11` or above is installed in your computer. Otherwise, you can download Java 11 https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html[here]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "* Enter the follow command in Command Prompt for Windows or Terminal on Mac to check your current version of Java: `java --version`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ".  Download the latest `modulo.jar` here."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ".  Copy the `.jar` file to a folder you wish to set as your working directory for the application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ".  Double-click the file to start Modulo. If the GUI does not appear in a few seconds, please try running `java -jar modulo.jar` in your command prompt or terminal."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will show a list of commands which _Modulo_ supports."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* `add CS2100 Assignment 1 t\\21 August 2019 #High-Priority` : adds a task with description `CS2100 Assignment 1` to the _Modulo_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* `add CS2103 1920S1`: adds module `CS2103` to academic year and semester `1920S1`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "* `add [qns] _What can one catch that is not thrown?_ [type] _normal_ [ans] _A cold_ [cat] CS2131`: adds a new quiz question to category `CS2131`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d Common commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d To view a list of commands and help"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: help"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Return to the homepage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Homepage, in this case, is the _Calendar_ section."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: home"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Switch to another feature’s tab"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `switch FEATURE_NAME`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Example: `switch module`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Calendar consists of `planner` and `timetable`. In `planner`, the user can view and manage tasks while the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "`timetable` is used to view and manage the user\u0027s current modules. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "To enter the Calendar section please enter the command: `switch cal`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Switch type: `switch`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Change the type into either `planner` or `timetable` view."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `switch VIEW_TYPE` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `switch timetable`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new task: `add`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Adds a new task. The `TASK_TITLE` should be specified first. Both `TASK_TITLE` and `TIME` are compulsory while the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "other fields are optional. The fields consist of: +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "- `TASK_TITLE` The name of the task. No prefix needed. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "- `TIME` The time when the user plan to do the task. Prefix: `t\\`. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "- `DEADLINE` When the task is due. Prefix: `d\\`. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "- `PLACE` Where the task took place Prefix: `p\\`. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "- `TAG` Tag that can be used to sort the tasks. Prefix: `#`. More than one `TAG` can be added to each task, e.g. `#High-Priority #Math`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `add TASK_TITLE t\\TIME d\\DEADLINE p\\PLACE #TAG` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `add CS2100 Assignment 1 t\\21 August 2019 #High-Priority`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Edit existing task: `edit`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Edit one or multiple fields of an existing task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `edit TASK_TITLE T\\NEW_TASK_TITLE t\\NEW_TIME p\\NEW_PLACE #NEW_TAG` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `edit CS2100 Assignment T\\CS2102 Assignment t\\22 August 2019`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Delete existing task: `delete`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Delete an exisiting task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `delete TASK_TITLE` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g.   `delete CS2102 Assignment`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Sort tasks: `sort`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Change the order of the tasks; either sorted by `time` or `priority`. The default sorting method is by `time`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `sort  SORT_TYPE` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `sort time`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Change week: `next` and `previous`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Go to either the `next` or `previous` week. This can only be done when the `VIEW_TYPE` is `planner`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `next` or `previous`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Add module: `add`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Add module with the specified `MODULE_CODE` to the timetable. After entering the command, user will be prompted to input"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "additional information about its lecture, tutorial, recitation, and lab slots."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `add MODULE_CODE` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `add CS2103`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Edit module: `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Update an existing module. After entering the command, user will be prompted to input additional information depending"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "on the `TYPE`. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `edit  MODULE_CODE TYPE`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `edit CS2103 lecture`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Delete module from timetable: `delete`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Delete an existing module."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `delete MODULE_CODE` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "e.g. `delete CS2103`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003d\u003d\u003d\u003d Reset planner/timetable: `reset`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Remove all existing tasks/modules. If the current view is `planner`, this action would not affect the `timetable` and"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "vice versa."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Format: `reset`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d Modules"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "To enter the Module section please enter the command: `cap`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Sort the modules : `sort`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Sorting allows users to view their historical grades based on a few different arrangements."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The few order types are: sorting by grades, time, mc and title."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `sort ORDER_TYPE`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `sort grade`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Add all modules in the current calendar to record : `integrate\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The user can add all existing modules in the calendar into the records by specifying the semester to add."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "After the modules are added to the records, the grades are left blank. The user can subsequently choose to add the grades and other details."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `integrate YEAR_AND_SEMESTER`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `integrate 1920S1`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Manually add module to record : `add`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The user can add new modules to the a specific semester, even for future semesters."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `add MODULE_CODE YEAR_AND_SEMESTER`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `add CS2103 1920S1`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Delete module from record : `delete`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Delete a specific module from one of the selected semester."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `delete MODULE_CODE YEAR_AND_SEMESTER`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `delete CS2103 1920S1`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Edit details of a module : `edit`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Edit the record of a module including specifications such as CAP and MC."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `edit MODULE_CODE YEAR_AND_SEMESTER`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `edit CS2103 1920S1`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Locating module by module code or title : `find`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Finds the module with the module code or any module that contains the keyword entered by the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The search is case insensitive. e.g. `cs1010s` matches `CS1010S`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The search method adopts the inclusive OR search method that returns any sub-keywords associated with the keyword."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. searching for `prog meth` will return `Programming Methodology I`, `Programming Methodology II`, `Web Programming and Applications`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `find MODULE_CODE [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `find CS1010S`, `find Programming Methodology I`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all modules in a specific semester or clean-slate all records : `clear`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Deletes all modules in the record or delete all modules in a semester. The user can avoid clearing modules one-by-one when large number of modules have to be cleared."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "When the only single keyword `clear` is entered, Modulo would recognise it as a command to clear all the modules. As the action is not reversible, a notification would prompt the user to confirm this non-reversible action."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `clear [YEAR_AND_SEMESTER]`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `clear 1920S2`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Apply a certain grade to a specific module : `make`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Applies a specified grade to a the specified module. This allows the user to experiment with future grades and set goals towards his/her graduation."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "This command allows the user to avoid the hustle of editing score through the edit command. This is a single command that changes the grade of a module instantaneously."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "It supports the Satisfactory / Unsatisfactory grades annotated as S and U respectively."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `make MODULE_CODE GRADE`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `make CS1010S A`, `make CS2103 A`, `make CS2103 S`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Change graduation requirement : `grad`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "The user can change the graduation by entering this command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Format: `grad`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "e.g. `grad`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "\u003d\u003d\u003d\u003d Password protection [Coming in V2.0]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tuandingwei"
        },
        "content": "Prevent unauthorised access to your grades."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d Quiz"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "To enter the Quiz section please enter the command: `switch quiz`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Sort based on priority:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Sorting based on priority will help users to identify which questions are deemed to be important"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "to them for each category. Default: sort by time."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `sort priority *[PRIORITY_TYPE]*` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Usage: *[PRIORITY_TYPE]* accepts keyword `high`, `normal`, `low` only +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example: *sort* priority high +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Add the details of the quiz questions:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Users can add new quiz questions with the details in it. The details of the question should"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "be added before executing `create` command, however, you update or add it later too after the `create` command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "The details/instructions of the questions include: +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[qns]` Indicate that the next several phrases will be the question. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[ans]` Indicate that the next several phrases will be the answer to the question. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[cat]` Indicate that the next several phrases will be the category of the question. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[type]` Indicate that the next several phrases will be the priority/importance level of the question. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*Note that:* +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *`[qns]` and `[ans]` are required to be added before creating the question itself.* +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *`[qns]` word limit is 200. `[ans]` word limit is 1500. `[cat]` word limit is 10.* +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *`[type]` the command after this format should only be: `high`, `normal`, `low`.* +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- Try to avoid the above instruction in your questions, answers, category and most importantly your priority +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `add *[qns]* _your_question_ *[ans]* _your_answer_ *[cat]* _your_category_ *[type]* _your_priority_` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example 1: +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*add [qns]* _What is always coming, but never arrives?_ *[ans]* _Tomorrow_ *[type]* _high_ +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example 2: +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*add [qns]* _What can one catch that is not thrown?_ *[type]* _normal_ *[ans]* _A cold_ *[cat]* CS2131"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Remark: +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*add [qns]* _What is [qns]always comi[qns]ng, but never arrives?_ *[ans]* _Tom[ans]orrow_ +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Modulo will detect the question as: _What is [qns]always comi[qns]ng, but never arrives?_ and the answer as: _Tom[ans]orrow_ +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Delete module from record:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Delete a specific quiz question from the group questions."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `delete *[CATEGORY] [NUMBER]*` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Usage: +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *[CATEGORY]* is the category of the question that you want to delete, case-insensitive. For the question that is uncategorized, put `uncategorized` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *[NUMBER]* is the index/row from that category that you want to delete. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example 1: +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*delete* CS2103 1"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example 2: +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*delete* uncategorized 3 +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Edit details of a module : `edit`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Specify which question you want to edit and modify it from the question list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Usage: +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *[CATEGORY]* is the category of the question that you want to edit, case-insensitive. For the question that is uncategorized category, put `uncategorized`. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *[NUMBER]* is the index/row from that category that you want to edit. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "The details/instructions of the new questions include: +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[qns]` Indicate that the next several phrases will be the new question. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[ans]` Indicate that the next several phrases will be the answer to the new question. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[cat]` Indicate that the next several phrases will be the category of the new question. +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- `[type]` Indicate that the next several phrases will be the priority/importance level of the new question. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- Try to avoid the above instruction in your questions, answers, category and most importantly your priority +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*Note that:* +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- Every instruction is optional but at least one of them should be modified. Use `cancel` command to cancel edit."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *`[qns]` word limit is 200. `[ans]` word limit is 1500. `[cat]` word limit is 10.* +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "- *`[type]` the command after this format should only be: `high`, `normal`, `low`.* +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `*edit *[CATEGORY] [NUMBER] [qns]* _your_new_question_ *[ans]* _your_new_answer_ *[cat]* _your_new_category_ *[type]* _your_new_priority_` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Example 1: +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*edit CS2103 1 [qns]* _How many mammals are there in the universe?_ *[type]* low +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Remark: +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "*edit CS2103 1 [qns]* _What is [qns]always comi[qns]ng, but never arrives?_ *[ans]* _Tom[ans]orrow_ +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Modulo will detect the new question as: _What is [qns]always comi[qns]ng, but never arrives?_ and the answer as: _Tom[ans]orrow_ +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Find the quiz questions with keyword:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Find the quiz questions from the list of questions."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `find [KEYWORDS]` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `cancel`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Move question:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Move question from specified category to another category."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: move [SPECIFIED_CAT] [NUMBER] [DESTINATION_CAT]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003d\u003d\u003d\u003d Undo:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Undo some of the previous action."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d Finances"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "To enter the Finances section, please enter the command: `switch finances`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "All amounts are taken to be in SGD and recorded as if with dollar signs and numerals. For example, 110 cents should be written as `1.10` or `1.1`."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "If dates are to be specified, only dates of format `DDMMYYYY` will be recognised."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Add an expenditure: `add spend`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Record down an entry of spending. By default, the date of spending will be set to the day the entry was added. Otherwise, this can be specified through an optional parameter. Other details regarding the expenditure can also be included."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*add spend* AMOUNT [day\\DAY_OF_SPENDING] [item\\DESCRIPTION] [cat\\CATEGORY(s)] [place\\PLACE] [met\\PAYMENT_METHOD]` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `add spend 2.80 item\\Yong Tau Foo cat\\Food School place\\Frontier met\\cash`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Add an income: `add income`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Record down an entry of incoming money. Source of income can also be specified."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*add income* AMOUNT [day\\DAY_OF_SPENDING] [item\\DESCRIPTION] [cat\\CATEGORY(S)] [from\\ORIGIN] [met\\PAYMENT_METHOD]` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `add income 800 item\\student assistant from\\NUS met\\bank transfer`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Add category: `add cat`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Add a new category to list of exisiting categories. Note that category name is not case-sensitive."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*add cat* NEW_CATEGORY` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `add cat Hobby`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Add an entry of borrowed money: `borrow`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Record down an entry of money borrowed from someone but not yet repaid. By default, the date the money was borrowed is set to the day the entry was recorded."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*borrow* AMOUNT from\\PERSON_BORROWED_FROM [day\\DATE_BORROWED]` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `borrow 1.20 from\\mom`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Add an entry of lent money: `lent`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Record down an entry of money lent to someone."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*lent* AMOUNT to\\PERSON_LENT_TO` [day\\DATE_LENT]` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `lent 5 to\\sister`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d List out finances: `list`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "List out all entries in recorded down. By default, all entries will be ordered chronologically, according to the day the entry is linked to (e.g. the day of spending etc). Entries are indexed chronologically as well."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "To sort or filter, and do more advance searches through the list, additional parameters can be specified."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Attributes that can be *sorted by* are: `day`, `amt` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Attributes that can *filtered by* are: `spend`, `income`, `borrow`, `lent`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*list* [sort\\SORT_TYPE(s)] [filter\\FILTER_TYPE(s)]`[find\\KEYWORD(S)] [cat\\ CATEGORY(s)] +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `list filter\\spend cat\\food`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d List out categories"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "List out available categories."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*list cat*`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Edit an entry: `edit`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Edit an entry previously entered by index of entry in listed listed out by `list`. Note that the newly-entered information will overwrite the details at the attribute. For example, if there were categories `food` and `hobby` linked to the entry at index 5 of the list, command `edit 5 cat\\pet` will delete the previous two categories and replace them with a single category `pet.`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*edit* INDEX [amt\\NEW_AMOUNT] [item\\NEW_DESCRIPTION] [cat\\NEW_CATEGORY] [place\\NEW_PLACE] [met\\NEW_METHOD]` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `edit 2 amt\\5.1`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Delete entry/entries: `delete`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Delete an entry or multiple entries by their index in the list. Note: the indices do not have to be ordered."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*delete* INDEX [MORE_INDEXES]` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `delete 5 4 1`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Show summary of finances: `stats`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Shows an overview of the state of expenses and incomes."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*stats*`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Set a budget: `add budget`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Set a budget, which by default is for the current month. This can be further specified for a specified time period (i.e. duration) or category of spending. A reminder is shown when this budget is about to be exceeded or has exceeded."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*add budget* AMOUNT [dur\\NUM_DAYS] [cat\\CATEGORY]` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "e.g. `add budget 30 dur\\7 cat\\food`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003d\u003d\u003d\u003d Export summary of finances: `export`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Exports a file and saves it to hard disk."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "Format: `*export*`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "_Modulo_ data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous _Modulo_ folder."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "tuandingwei": 66,
      "joannasara": 53,
      "-": 111,
      "victorvic54": 98,
      "tohcejasmine": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.ui.calendar.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.ui.calendar.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Stage primary;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected CalendarModel calendarModel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getCalendarUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarUserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logic \u003d new LogicManager(calendarModel, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private CalendarModel initModelManager(Storage storage, ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Optional\u003cReadOnlyCalendarAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ReadOnlyCalendarAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CalendarModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected CalendarUserPrefs initPrefs(seedu.address.storage.calendar.UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarUserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Optional\u003cCalendarUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new CalendarUserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primary \u003d primaryStage;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            storage.saveUserPrefs(calendarModel.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Stage getPrimary() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return primary;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Config getConfig() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 48,
      "-": 145,
      "victorvic54": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Path calendarUserPrefsFilePath \u003d Paths.get(\"calendarpreferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Path financeUserPrefsFilePath \u003d Paths.get(\"financepreferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getCalendarUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarUserPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Path getFinanceUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return financeUserPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setCalendarUserPrefsFilePath(Path calendarUserPrefsFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.calendarUserPrefsFilePath \u003d calendarUserPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 Objects.equals(calendarUserPrefsFilePath, o.calendarUserPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Objects.hash(logLevel, calendarUserPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + calendarUserPrefsFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 8,
      "-": 55,
      "tohcejasmine": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_QUESTIONS_LISTED_OVERVIEW \u003d \"%1$d questions listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_STATE_CHANGE \u003d \"Application switched\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "victorvic54": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param allowTypo whether the user may type a typo word."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean containsQuizWordMatch(String sentence, String word, boolean allowTypo) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } else if (allowTypo) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String firstLetter \u003d Character.toString(preppedWord.charAt(0)).toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String lastLetter \u003d Character.toString(preppedWord.charAt(preppedWord.length() - 1)).toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            for (int i \u003d 0; i \u003c wordsInPreppedSentence.length; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                wordsInPreppedSentence[i] \u003d wordsInPreppedSentence[i].replaceAll(\"[^A-Za-z0-9]\", \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .anyMatch(text -\u003e text.startsWith(firstLetter) \u0026\u0026 text.endsWith(lastLetter))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if the {@code tagList} contains the {@code word}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param tagList cannot be null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param allowTypo whether the user may type a typo word."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean containsTagQuizIgnoreCase(Set\u003cTag\u003e tagList, String word, boolean allowTypo) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (Tag myTag : tagList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String comparedWord \u003d myTag.tagName.toLowerCase();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (comparedWord.equals(preppedWord.toLowerCase())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else if (allowTypo) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String firstLetter \u003d Character.toString(preppedWord.charAt(0)).toLowerCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String lastLetter \u003d Character.toString(preppedWord.charAt(preppedWord.length() - 1)).toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                if (comparedWord.startsWith(firstLetter) \u0026\u0026 comparedWord.endsWith(lastLetter)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "victorvic54": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/SwitchOperation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.LogicFinanceManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.LogicQuizManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.FinanceLog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ModelFinanceManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.AddressQuizBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ModelQuizManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.storage.finance.FinanceStorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.storage.finance.JsonFinanceStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.storage.finance.JsonFinanceUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.AddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.JsonQuizAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.JsonQuizUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.StorageQuizManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.quiz.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.ui.calendar.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.ui.finance.UiFinanceManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.ui.quiz.UiQuizManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Switches the Application to a new component (Calendar, Module, Quiz, or Finance)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class SwitchOperation {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private seedu.address.model.quiz.UserPrefs userPrefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private seedu.address.model.quiz.Model quizModel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private seedu.address.logic.quiz.Logic quizLogic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private seedu.address.ui.quiz.Ui quizUi;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private CalendarUserPrefs userCalendarPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private CalendarModel calendarModel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private seedu.address.logic.calendar.Logic calendarLogic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private seedu.address.ui.calendar.Ui calendarUi;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private seedu.address.model.finance.UserPrefs userFinancePrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private seedu.address.model.finance.Model financeModel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private seedu.address.logic.finance.Logic financeLogic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private seedu.address.ui.finance.Ui financeUi;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public SwitchOperation(String args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Switches the current application component by initializing Model, Logic, and Ui that corresponds with the type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * of component currently saved as args"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (args.equals(\"quiz\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Config config \u003d MainApp.getConfig();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            UserPrefsStorage userPrefsStorage \u003d new JsonQuizUserPrefsStorage(Paths.get(\"preferencesQuiz.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            AddressBookStorage addressBookStorage \u003d new JsonQuizAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            Storage quizStorage \u003d new StorageQuizManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            quizModel \u003d initModelManager(quizStorage, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            quizLogic \u003d new LogicQuizManager(quizModel, quizStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            quizUi \u003d new UiQuizManager(quizLogic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Stage stages \u003d MainApp.getPrimary();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            quizUi.start(stages);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else if (args.equals(\"calendar\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Config config \u003d MainApp.getConfig();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            seedu.address.storage.calendar.UserPrefsStorage userCalendarPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    new JsonUserPrefsStorage(config.getCalendarUserPrefsFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            userCalendarPrefs \u003d initPrefs(userCalendarPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            seedu.address.storage.calendar.AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    new JsonAddressBookStorage(userCalendarPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            seedu.address.storage.calendar.Storage calendarStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    new StorageManager(addressBookStorage, userCalendarPrefsStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            calendarModel \u003d initModelManager(calendarStorage, userCalendarPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            calendarLogic \u003d new LogicManager(calendarModel, calendarStorage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            calendarUi \u003d new UiManager(calendarLogic);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Stage stages \u003d MainApp.getPrimary();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            calendarUi.start(stages);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } else if (args.equals(\"finance\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Config config \u003d MainApp.getConfig();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            seedu.address.storage.finance.UserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    new JsonFinanceUserPrefsStorage(config.getFinanceUserPrefsFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            userFinancePrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            seedu.address.storage.finance.FinanceStorage financeLogStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    new JsonFinanceStorage(userFinancePrefs.getFinanceLogFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            seedu.address.storage.finance.Storage financeStorage \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    new FinanceStorageManager(financeLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            financeModel \u003d initModelManager(financeStorage, userFinancePrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            financeLogic \u003d new LogicFinanceManager(financeModel, financeStorage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            financeUi \u003d new UiFinanceManager(financeLogic);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Stage stages \u003d MainApp.getPrimary();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            financeUi.start(stages);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Load user\u0027s Quiz preference."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param storage Quiz storage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return UserPrefs"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    protected seedu.address.model.quiz.UserPrefs initPrefs(seedu.address.storage.quiz.UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        System.out.println(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        seedu.address.model.quiz.UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            Optional\u003cseedu.address.model.quiz.UserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new seedu.address.model.quiz.UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            System.out.println(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            initializedPrefs \u003d new seedu.address.model.quiz.UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            initializedPrefs \u003d new seedu.address.model.quiz.UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            System.out.println(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Load user\u0027s Quiz preference."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param storage Quiz storage"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return UserPrefs"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected CalendarUserPrefs initPrefs("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            seedu.address.storage.calendar.UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarUserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Optional\u003cCalendarUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new CalendarUserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initializedPrefs \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Load user\u0027s Finance preference."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param storage Quiz storage"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return UserPrefs"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    protected seedu.address.model.finance.UserPrefs initPrefs("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            seedu.address.storage.finance.UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.out.println(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        seedu.address.model.finance.UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Optional\u003cseedu.address.model.finance.UserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new seedu.address.model.finance.UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            System.out.println(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initializedPrefs \u003d new seedu.address.model.finance.UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initializedPrefs \u003d new seedu.address.model.finance.UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            System.out.println(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private seedu.address.model.quiz.Model initModelManager(seedu.address.storage.quiz.Storage storage,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                                                            seedu.address.model.quiz.ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Optional\u003cseedu.address.model.quiz.ReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        seedu.address.model.quiz.ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                System.out.println(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d addressBookOptional"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    .orElseGet(seedu.address.model.quiz.util.SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            System.out.println(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            initialData \u003d new seedu.address.model.quiz.AddressQuizBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            initialData \u003d new AddressQuizBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new ModelQuizManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private CalendarModel initModelManager("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            seedu.address.storage.calendar.Storage storage,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Optional\u003cReadOnlyCalendarAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ReadOnlyCalendarAddressBook initialData;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                System.out.println(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d addressBookOptional"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    .orElseGet(seedu.address.model.calendar.util.SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            initialData \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CalendarModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private seedu.address.model.finance.Model initModelManager(seedu.address.storage.finance.Storage storage,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                                                            seedu.address.model.finance.ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Optional\u003cseedu.address.model.finance.ReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        seedu.address.model.finance.ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                System.out.println(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initialData \u003d addressBookOptional"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    .orElseGet(seedu.address.model.finance.util.SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            System.out.println(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initialData \u003d new seedu.address.model.finance.FinanceLog();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            System.out.println(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            initialData \u003d new FinanceLog();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new ModelFinanceManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 117,
      "victorvic54": 86,
      "tohcejasmine": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the CalendarAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ReadOnlyCalendarAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.storage.calendar.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final CalendarModel calendarModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public LogicManager(CalendarModel calendarModel, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.calendarModel \u003d calendarModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        commandResult \u003d command.execute(calendarModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            //We can deduce that the previous line of code modifies calendarModel in some way"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            storage.saveAddressBook(calendarModel.getCalendarAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ReadOnlyCalendarAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarModel.getCalendarAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarModel.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarModel.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKDESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKPLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Adds a task to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTIME + \"TIME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKDESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKPLACE + \"PLACE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKTAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTITLE + \"CS2109 Assignment 7 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTIME + \"20/10/2019 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKDESCRIPTION + \"Submit to Luminus \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKPLACE + \"NUS \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTAG + \"IMPORTANT \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTAG + \"CS2109\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This task already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (calendarModel.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.setCalendarAddressBook(new CalendarAddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param calendarModel {@code CalendarModel} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public abstract CommandResult execute(CalendarModel calendarModel) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d calendarModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.deletePerson(taskToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKDESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKPLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.model.calendar.CalendarModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskPlace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Edits the details of an existing task in the taskPlace book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKTITLE + \"TITLE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKTIME + \"TIME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKDESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKPLACE + \"PLACE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"[\" + PREFIX_TASKTAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKTIME + \"12/02/2019 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + PREFIX_TASKDESCRIPTION + \"Submit softcopy only\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This task already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param editPersonDescriptor details to edit the task with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d calendarModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task editedTask \u003d createEditedPerson(taskToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!taskToEdit.isSamePerson(editedTask) \u0026\u0026 calendarModel.hasPerson(editedTask)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.setPerson(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Task createEditedPerson(Task taskToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskTitle updatedTaskTitle \u003d editPersonDescriptor.getTaskTitle().orElse(taskToEdit.getTaskTitle());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskTime updatedTaskTime \u003d editPersonDescriptor.getTaskTime().orElse(taskToEdit.getTaskTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskDescription updatedTaskDescription \u003d editPersonDescriptor.getTaskDescription()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .orElse(taskToEdit.getTaskDescription());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskPlace updatedTaskPlace \u003d editPersonDescriptor.getTaskPlace().orElse(taskToEdit.getTaskPlace());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Set\u003cTaskTag\u003e updatedTaskTags \u003d editPersonDescriptor.getTaskTags().orElse(taskToEdit.getTaskTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new Task(updatedTaskTitle, updatedTaskTime, updatedTaskDescription, updatedTaskPlace, updatedTaskTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private TaskTitle taskTitle;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private TaskTime taskTime;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private TaskDescription taskDescription;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private TaskPlace taskPlace;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private Set\u003cTaskTag\u003e taskTags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * A defensive copy of {@code taskTags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setTaskTitle(toCopy.taskTitle);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setTaskTime(toCopy.taskTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setTaskDescription(toCopy.taskDescription);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setTaskPlace(toCopy.taskPlace);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setTaskTags(toCopy.taskTags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return CollectionUtil.isAnyNonNull(taskTitle, taskTime, taskDescription, taskPlace, taskTags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public void setTaskTitle(TaskTitle taskTitle) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.taskTitle \u003d taskTitle;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public Optional\u003cTaskTitle\u003e getTaskTitle() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.ofNullable(taskTitle);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public void setTaskTime(TaskTime taskTime) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public Optional\u003cTaskTime\u003e getTaskTime() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.ofNullable(taskTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public void setTaskDescription(TaskDescription taskDescription) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public Optional\u003cTaskDescription\u003e getTaskDescription() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.ofNullable(taskDescription);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public void setTaskPlace(TaskPlace taskPlace) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.taskPlace \u003d taskPlace;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public Optional\u003cTaskPlace\u003e getTaskPlace() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.ofNullable(taskPlace);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Sets {@code taskTags} to this object\u0027s {@code taskTags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * A defensive copy of {@code taskTags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public void setTaskTags(Set\u003cTaskTag\u003e taskTags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.taskTags \u003d (taskTags !\u003d null) ? new HashSet\u003c\u003e(taskTags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code taskTags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public Optional\u003cSet\u003cTaskTag\u003e\u003e getTaskTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return (taskTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(taskTags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return getTaskTitle().equals(e.getTaskTitle())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    \u0026\u0026 getTaskTime().equals(e.getTaskTime())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    \u0026\u0026 getTaskDescription().equals(e.getTaskDescription())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    \u0026\u0026 getTaskPlace().equals(e.getTaskPlace())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    \u0026\u0026 getTaskTags().equals(e.getTaskTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 227
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose titles contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" assignment tutorial math\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final TaskTitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public FindCommand(TaskTitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, calendarModel.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.model.calendar.CalendarModel.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.SwitchOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Switches to a new application component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": need to pass the argument \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"you want to switch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String args;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public SwitchCommand(String args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandResult execute(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(calendarModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        SwitchOperation swOperation \u003d new SwitchOperation(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        swOperation.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                String.format(Messages.MESSAGE_STATE_CHANGE, calendarModel.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 args.equals(((SwitchCommand) other).args)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKDESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKPLACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskPlace;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASKTITLE, PREFIX_TASKTIME, PREFIX_TASKDESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                        PREFIX_TASKPLACE, PREFIX_TASKTAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASKTITLE, PREFIX_TASKPLACE, PREFIX_TASKTIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                PREFIX_TASKDESCRIPTION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskTitle taskTitle \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_TASKTITLE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskTime taskTime \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_TASKTIME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskDescription taskDescription \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_TASKDESCRIPTION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskPlace taskPlace \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_TASKPLACE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Set\u003cTaskTag\u003e taskTagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TASKTAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task task \u003d new Task(taskTitle, taskTime, taskDescription, taskPlace, taskTagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.SwitchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final Prefix PREFIX_TASKTITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final Prefix PREFIX_TASKTIME \u003d new Prefix(\"time/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final Prefix PREFIX_TASKDESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final Prefix PREFIX_TASKPLACE \u003d new Prefix(\"place/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final Prefix PREFIX_TASKTAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKDESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKPLACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.calendar.parser.CliSyntax.PREFIX_TASKTITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASKTITLE, PREFIX_TASKTIME, PREFIX_TASKDESCRIPTION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                        PREFIX_TASKPLACE, PREFIX_TASKTAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASKTITLE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            editPersonDescriptor.setTaskTitle(ParserUtil.parseName(argMultimap.getValue(PREFIX_TASKTITLE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASKTIME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            editPersonDescriptor.setTaskTime(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_TASKTIME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASKDESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            editPersonDescriptor.setTaskDescription(ParserUtil.parseEmail(argMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    .getValue(PREFIX_TASKDESCRIPTION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASKPLACE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            editPersonDescriptor.setTaskPlace(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_TASKPLACE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TASKTAG)).ifPresent(editPersonDescriptor::setTaskTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTaskTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code Set\u003cTaskTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Optional\u003cSet\u003cTaskTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new FindCommand(new TaskTitleContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskPlace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses a {@code String name} into a {@code TaskTitle}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskTitle parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTitle.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(TaskTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskTitle(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses a {@code String phone} into a {@code TaskTime}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskTime parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTime.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskTime(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses a {@code String address} into an {@code TaskPlace}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskPlace parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskPlace.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(TaskPlace.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskPlace(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses a {@code String email} into an {@code TaskDescription}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskDescription parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskDescription.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskDescription(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses a {@code String tag} into a {@code TaskTag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskTag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException(TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskTag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTaskTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Set\u003cTaskTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final Set\u003cTaskTag\u003e taskTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            taskTagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return taskTagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/SwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses the command to switch"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new SwitchCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/calendar/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.logic.calendar.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see seedu.address.model.finance.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "tohcejasmine": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/LogicFinanceManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.storage.finance.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class LogicFinanceManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicFinanceManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public LogicFinanceManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "tohcejasmine": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "tohcejasmine": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.FinanceLog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance log has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        model.setAddressBook(new FinanceLog());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "tohcejasmine": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.model.finance.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 211,
      "tohcejasmine": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "tohcejasmine": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.model.finance.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "tohcejasmine": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.SwitchOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Switches to a new application component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": need to pass the argument \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            + \"you want to switch\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final String args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public SwitchCommand(String args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        SwitchOperation swOperation \u003d new SwitchOperation(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        swOperation.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                String.format(Messages.MESSAGE_STATE_CHANGE, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 args.equals(((SwitchCommand) other).args)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "tohcejasmine": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.SwitchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.logic.finance.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "tohcejasmine": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "tohcejasmine": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "tohcejasmine": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/SwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Parses the command to switch"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new SwitchCommand(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/finance/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.logic.finance.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @see seedu.address.model.quiz.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of questions */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 3,
      "victorvic54": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/LogicQuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.storage.quiz.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class LogicQuizManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicQuizManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public LogicQuizManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 5,
      "victorvic54": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Adds a question to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \": Adds a new question in modulo.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TYPE + \"PRIORITY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TAG + \"TAG \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_QUESTION + \"What is always coming, but never arrives? \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_ANSWER + \"Tomorrow \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_CATEGORY + \"CS2131 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TYPE + \"high \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TAG + \"lecture\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Question toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Question}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public AddCommand(Question question) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (model.hasQuestion(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.addQuestion(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 3,
      "victorvic54": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.AddressQuizBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.setAddressBook(new AddressQuizBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Deletes a question identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \": Deletes the question identified by the index number used in the displayed question list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted Question: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Question questionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 4,
      "victorvic54": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.model.quiz.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Edits the details of an existing question in modulo quiz."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the question identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"by the index number used in the displayed question list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Parameters: \" + COMMAND_WORD + \" CATEGORY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_QUESTION + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_ANSWER + \"PHONE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_CATEGORY + \"EMAIL \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TYPE + \"ADDRESS \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"CS2103 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_QUESTION + \"How many mammals are there in the universe? \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + PREFIX_TYPE + \"low\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_EDIT_QUESTION_SUCCESS \u003d \"Edited Question: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists in the modulo quiz.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final EditQuestionDescriptor editQuestionDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param index of the question in the filtered question list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param editQuestionDescriptor details to edit the question with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public EditCommand(Index index, EditQuestionDescriptor editQuestionDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(editQuestionDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.editQuestionDescriptor \u003d new EditQuestionDescriptor(editQuestionDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Question questionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Question editedQuestion \u003d createEditedQuestion(questionToEdit, editQuestionDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!questionToEdit.isSameQuestion(editedQuestion) \u0026\u0026 model.hasQuestion(editedQuestion)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.setQuestion(questionToEdit, editedQuestion);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Creates and returns a {@code Question} with the details of {@code questionToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * edited with {@code editQuestionDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static Question createEditedQuestion(Question questionToEdit,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                                                 EditQuestionDescriptor editQuestionDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        assert questionToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Name updatedName \u003d editQuestionDescriptor.getName().orElse(questionToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Answer updatedAnswer \u003d editQuestionDescriptor.getAnswer().orElse(questionToEdit.getAnswer());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Category updatedCategory \u003d editQuestionDescriptor.getCategory().orElse(questionToEdit.getCategory());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Type updatedType \u003d editQuestionDescriptor.getType().orElse(questionToEdit.getType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editQuestionDescriptor.getTags().orElse(questionToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Question(updatedName, updatedAnswer, updatedCategory, updatedType, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 editQuestionDescriptor.equals(e.editQuestionDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Stores the details to edit the question with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * corresponding field value of the question."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static class EditQuestionDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public EditQuestionDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public EditQuestionDescriptor(EditQuestionDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, answer, category, type, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (!(other instanceof EditQuestionDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            EditQuestionDescriptor e \u003d (EditQuestionDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 10,
      "victorvic54": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Finds and lists all questions in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String.format(Messages.MESSAGE_QUESTIONS_LISTED_OVERVIEW, model.getFilteredQuestionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.model.quiz.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Lists all questions in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all questions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        model.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.SwitchOperation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Switches to a new application component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": need to pass the argument \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"you want to switch\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public SwitchCommand(String args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        SwitchOperation swOperation \u003d new SwitchOperation(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        swOperation.execute();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String.format(Messages.MESSAGE_STATE_CHANGE, model.getFilteredQuestionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 args.equals(((SwitchCommand) other).args)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "victorvic54": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Question question \u003d new Question(name, answer, category, type, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new AddCommand(question);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "victorvic54": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.commands.SwitchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 12,
      "victorvic54": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"\u003cqns\u003e\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"\u003cans\u003e\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"\u003ccat\u003e\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"\u003ctype\u003e\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"\u003ctag\u003e\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.logic.quiz.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.EditCommand.EditQuestionDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_TYPE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String editParameters \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String[] arrParameters \u003d editParameters.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String category \u003d arrParameters[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (arrParameters.length !\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(\"Please specify the category and question index properly\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                index \u003d ParserUtil.parseIndex(arrParameters[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        EditQuestionDescriptor editQuestionDescriptor \u003d new EditQuestionDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            editQuestionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            editQuestionDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            editQuestionDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            editQuestionDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editQuestionDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!editQuestionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new EditCommand(index, editQuestionDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 9,
      "victorvic54": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        boolean allowTypo \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (trimmedArgs.startsWith(\"-i \")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            allowTypo \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            trimmedArgs \u003d trimmedArgs.substring(3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (trimmedArgs.substring(0, 5).equals(\"\u003ckey\u003e\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            trimmedArgs \u003d trimmedArgs.substring(6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\",\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords), allowTypo));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\" \u003ckey\u003e \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (nameKeywords.length !\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String[] instructionKeyword \u003d nameKeywords[0].split(\",\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                String[] searchKeyword \u003d nameKeywords[1].split(\",\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                if (instructionKeyword.length \u003e 5) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    throw new ParseException(\"Category instruction overload. Maximum allowed 5 instructions\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                } else if (searchKeyword.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    throw new ParseException(String.format(\"Nothing to search here\", FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(instructionKeyword),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                        Arrays.asList(searchKeyword), allowTypo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 4,
      "victorvic54": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses a {@code String type} into an {@code Type}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses a {@code String category} into an {@code Category}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 6,
      "victorvic54": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/SwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Parses the command to switch"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new SwitchCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 5,
      "victorvic54": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/quiz/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.logic.quiz.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CalendarAddressBook implements ReadOnlyCalendarAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final UniqueTaskList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        persons \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarAddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates an CalendarAddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarAddressBook(ReadOnlyCalendarAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPersons(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.persons.setPersons(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Resets the existing data of this {@code CalendarAddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void resetData(ReadOnlyCalendarAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean hasPerson(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return persons.contains(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void addPerson(Task p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPerson(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        persons.setPerson(target, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Removes {@code key} from this {@code CalendarAddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void removePerson(Task key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ObservableList\u003cTask\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof CalendarAddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 persons.equals(((CalendarAddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * The API of the CalendarModel component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface CalendarModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setUserPrefs(ReadOnlyCalendarUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ReadOnlyCalendarUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces address book data with the data in {@code calendarAddressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setCalendarAddressBook(ReadOnlyCalendarAddressBook calendarAddressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Returns the CalendarAddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ReadOnlyCalendarAddressBook getCalendarAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    boolean hasPerson(Task task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void deletePerson(Task target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void addPerson(Task task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void setPerson(Task target, Task editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents the in-memory calendarModel of the address book data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CalendarModelManager implements CalendarModel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final CalendarAddressBook calendarAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final CalendarUserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Initializes a CalendarModelManager with the given calendarAddressBook and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarModelManager(ReadOnlyCalendarAddressBook addressBook, ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.calendarAddressBook \u003d new CalendarAddressBook(addressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.userPrefs \u003d new CalendarUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.calendarAddressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this(new CalendarAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarUserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ReadOnlyCalendarUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarAddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setCalendarAddressBook(ReadOnlyCalendarAddressBook calendarAddressBook) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.calendarAddressBook.resetData(calendarAddressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ReadOnlyCalendarAddressBook getCalendarAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarAddressBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean hasPerson(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarAddressBook.hasPerson(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void deletePerson(Task target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void addPerson(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarAddressBook.addPerson(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPerson(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        calendarAddressBook.setPerson(target, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(obj instanceof CalendarModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarModelManager other \u003d (CalendarModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarAddressBook.equals(other.calendarAddressBook)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CalendarUserPrefs implements ReadOnlyCalendarUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"calendardata.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates a {@code CalendarUserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarUserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates a {@code CalendarUserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Resets the existing data of this {@code CalendarUserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void resetData(ReadOnlyCalendarUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(other instanceof CalendarUserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarUserPrefs o \u003d (CalendarUserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/ReadOnlyCalendarAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface ReadOnlyCalendarAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    ObservableList\u003cTask\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/ReadOnlyCalendarUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface ReadOnlyCalendarUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Task in the taskPlace book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final TaskTitle taskTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final TaskTime taskTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final TaskDescription taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final TaskPlace taskPlace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Set\u003cTaskTag\u003e taskTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task(TaskTitle taskTitle, TaskTime taskTime, TaskDescription taskDescription, TaskPlace taskPlace,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                Set\u003cTaskTag\u003e taskTags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireAllNonNull(taskTitle, taskTime, taskDescription, taskPlace, taskTags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskTitle \u003d taskTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskPlace \u003d taskPlace;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskTags.addAll(taskTags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTitle getTaskTitle() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return taskTitle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTime getTaskTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return taskTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskDescription getTaskDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskPlace getTaskPlace() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return taskPlace;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Set\u003cTaskTag\u003e getTaskTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Collections.unmodifiableSet(taskTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if both persons of the same taskTitle have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean isSamePerson(Task otherTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 otherTask.getTaskTitle().equals(getTaskTitle())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 (otherTask.getTaskTime().equals(getTaskTime())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || otherTask.getTaskDescription().equals(getTaskDescription()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return otherTask.getTaskTitle().equals(getTaskTitle())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 otherTask.getTaskTime().equals(getTaskTime())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 otherTask.getTaskDescription().equals(getTaskDescription())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 otherTask.getTaskPlace().equals(getTaskPlace())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 otherTask.getTaskTags().equals(getTaskTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Objects.hash(taskTitle, taskTime, taskDescription, taskPlace, taskTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        builder.append(getTaskTitle())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(\" TaskTime: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(getTaskTime())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(\" TaskDescription: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(getTaskDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(getTaskPlace())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getTaskTags().forEach(builder::append);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/TaskDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Task\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs an {@code TaskDescription}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskDescription(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 value.equals(((TaskDescription) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/TaskPlace.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Task\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskPlace {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs an {@code TaskPlace}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskPlace(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskPlace // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 value.equals(((TaskPlace) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/TaskTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Task\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \"TaskTime numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code TaskTime}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTime(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskTime // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 value.equals(((TaskTime) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/TaskTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a Task\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code TaskTitle}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTitle(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskTitle // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 fullName.equals(((TaskTitle) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/TaskTitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code TaskTitle} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskTitleContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTaskTitle().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskTitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskTitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/UniqueTaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSamePerson(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * persons uses Task#isSamePerson(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * @see Task#isSamePerson(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPerson(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!target.isSamePerson(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPersons(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setPersons(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!personsAreUnique(tasks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private boolean personsAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (tasks.get(i).isSamePerson(tasks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/person/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/tag/TaskTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a TaskTag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code TaskTag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                || (other instanceof TaskTag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 tagName.equals(((TaskTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.model.calendar.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskPlace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Contains utility methods for populating {@code CalendarAddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Task[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            new Task(new TaskTitle(\"CS2100 Assignment\"), new TaskTime(\"31 December 2019\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    new TaskDescription(\"Hardcopy only\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    new TaskPlace(\"Blk 30 Geylang Street 29, #06-40\"), getTagSet(\"CS2100\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static ReadOnlyCalendarAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarAddressBook sampleAb \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (Task sampleTask : getSamplePersons()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            sampleAb.addPerson(sampleTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static Set\u003cTaskTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .map(TaskTag::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/FinanceLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class FinanceLog implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public FinanceLog() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public FinanceLog(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                || (other instanceof FinanceLog // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 persons.equals(((FinanceLog) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "tohcejasmine": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "tohcejasmine": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/ModelFinanceManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ModelFinanceManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelFinanceManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final FinanceLog addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ModelFinanceManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.fine(\"Initializing with finance log: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.addressBook \u003d new FinanceLog(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ModelFinanceManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this(new FinanceLog(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return userPrefs.getFinanceLogFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(obj instanceof ModelFinanceManager)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        ModelFinanceManager other \u003d (ModelFinanceManager) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "tohcejasmine": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "tohcejasmine": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Path getFinanceLogFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Path financeLogFilePath \u003d Paths.get(\"data\" , \"financelog.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getFinanceLogFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Path getFinanceLogFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return financeLogFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.financeLogFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 financeLogFilePath.equals(o.financeLogFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return Objects.hash(guiSettings, financeLogFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + financeLogFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "tohcejasmine": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 118,
      "tohcejasmine": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "tohcejasmine": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "tohcejasmine": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.model.finance.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.FinanceLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        FinanceLog sampleAb \u003d new FinanceLog();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "tohcejasmine": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/AddressQuizBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.UniqueQuestionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class AddressQuizBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final UniqueQuestionList questions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public AddressQuizBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public AddressQuizBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces the contents of the question list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.questions.setQuestions(questions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        setQuestions(newData.getQuestionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //// question-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return questions.contains(question);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Adds a question to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void addQuestion(Question p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questions.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces the given question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * another existing question in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questions.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void removeQuestion(Question key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questions.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return questions.asUnmodifiableObservableList().size() + \" questions\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return questions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof AddressQuizBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 questions.equals(((AddressQuizBook) other).questions));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return questions.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 4,
      "victorvic54": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    Predicate\u003cQuestion\u003e PREDICATE_SHOW_ALL_QUESTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    boolean hasQuestion(Question question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Deletes the given question."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void deleteQuestion(Question target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Adds the given question."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code question} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces the given question {@code target} with {@code editedQuestion}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * another existing question in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void setQuestion(Question target, Question editedQuestion);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /** Returns an unmodifiable view of the filtered question list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Updates the filter of the filtered question list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 3,
      "victorvic54": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/ModelQuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class ModelQuizManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelQuizManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final AddressQuizBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuestions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ModelQuizManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.addressBook \u003d new AddressQuizBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        filteredQuestions \u003d new FilteredList\u003c\u003e(this.addressBook.getQuestionList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ModelQuizManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this(new AddressQuizBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return addressBook.hasQuestion(question);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        addressBook.removeQuestion(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        addressBook.addQuestion(question);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        addressBook.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Question} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return filteredQuestions;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        filteredQuestions.setPredicate(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!(obj instanceof ModelQuizManager)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        ModelQuizManager other \u003d (ModelQuizManager) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 filteredQuestions.equals(other.filteredQuestions);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "victorvic54": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbookquiz.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a Person\u0027s answer number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \"Answer should not contains any instruction command\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param answer A valid answer number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        value \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if a given string is a valid answer number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return !test.contains(\"[ans]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 value.equals(((Answer) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a Person\u0027s category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category should only contain alphanumeric \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            + \"characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs an {@code Category}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param category A valid category address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        value \u003d category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns if a given string is a valid category."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 value.equals(((Category) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \"Question name should not contains any instruction command\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return !test.contains(\"\u003cqns\u003e\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private List\u003cString\u003e instruction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private boolean allowTypo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean allowTypo) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.allowTypo \u003d allowTypo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e instruction, List\u003cString\u003e keywords, boolean allowTypo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.allowTypo \u003d allowTypo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (instruction \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    StringUtil.containsQuizWordMatch(question.getName().fullName, keyword.trim(), allowTypo)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    || StringUtil.containsQuizWordMatch(question.getAnswer().value, keyword.trim(), allowTypo)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    || StringUtil.containsQuizWordMatch(question.getCategory().value, keyword.trim(), allowTypo)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    || StringUtil.containsQuizWordMatch(question.getType().value, keyword.trim(), allowTypo)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    || StringUtil.containsTagQuizIgnoreCase(question.getTags(), keyword.trim(), allowTypo));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return getInstructionKeywordResult(question);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private boolean getInstructionKeywordResult(Question question) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (String subInstructionKeyword : instruction) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            String field \u003d subInstructionKeyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (field.equals(\"question\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                isFound \u003d isFound || keywords.stream().anyMatch("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    keyword -\u003e StringUtil.containsQuizWordMatch(question.getName().fullName, keyword, allowTypo));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else if (field.equals(\"answer\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                isFound \u003d isFound || keywords.stream().anyMatch("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    keyword -\u003e StringUtil.containsQuizWordMatch(question.getAnswer().value, keyword, allowTypo));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else if (field.equals(\"category\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                isFound \u003d isFound || keywords.stream().anyMatch("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    keyword -\u003e StringUtil.containsQuizWordMatch(question.getCategory().value, keyword, allowTypo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else if (field.equals(\"type\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                isFound \u003d isFound || keywords.stream().anyMatch("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    keyword -\u003e StringUtil.containsQuizWordMatch(question.getType().value, keyword, allowTypo));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else if (field.equals(\"tag\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                isFound \u003d isFound || keywords.stream().anyMatch("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    keyword -\u003e StringUtil.containsTagQuizIgnoreCase(question.getTags(), keyword, allowTypo));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return isFound;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a Question in modulo quiz."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Question(Name name, Answer answer, Category category, Type type, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireAllNonNull(name, answer, category, type, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if both questions of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * This defines a weaker notion of equality between two questions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean isSameQuestion(Question otherQuestion) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (otherQuestion \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return otherQuestion !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 otherQuestion.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 (otherQuestion.getAnswer().equals(getAnswer()) || otherQuestion.getCategory().equals(getCategory()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if both questions have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * This defines a stronger notion of equality between two questions."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!(other instanceof Question)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Question otherQuestion \u003d (Question) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return otherQuestion.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 otherQuestion.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 otherQuestion.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 otherQuestion.getType().equals(getType())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 otherQuestion.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Objects.hash(name, answer, category, type, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(getAnswer())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 3,
      "victorvic54": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a Person\u0027s type in the modulo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Type value only accepts high, normal or low\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(high|normal|low)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        value \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/UniqueQuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * A list of questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * A question is considered unique by comparing using {@code Question#isSameQuestion(Question)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * As such, adding and updating of questions uses Question#isSameQuestion(Question) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * so as to ensure that the question being added or updated is unique in terms of identity in the UniqueQuestionList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * However, the removal of a question uses Question#equals(Object) so as to ensure that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * the question with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * @see Question#isSameQuestion(Question)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class UniqueQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Adds a question to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void add(Question toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question identity of {@code editedQuestion} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!target.isSameQuestion(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Removes the equivalent question from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * The question must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestions(UniqueQuestionList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Replaces the contents of this list with {@code questions}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!questionsAreUnique(questions)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        internalList.setAll(questions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns true if {@code questions} contains only unique questions."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private boolean questionsAreUnique(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                if (questions.get(i).isSameQuestion(questions.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/exceptions/DuplicateQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Signals that the operation will result in duplicate Questions (Questions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super(\"Operation would result in duplicate questions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/person/exceptions/QuestionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.model.quiz.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.AddressQuizBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Contains utility methods for populating {@code TypeBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Question[] getSampleQuestions() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new Question[] {};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        AddressQuizBook sampleAb \u003d new AddressQuizBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (Question sampleQuestion : getSampleQuestions()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            sampleAb.addQuestion(sampleQuestion);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 5,
      "victorvic54": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns CalendarAddressBook data as a {@link ReadOnlyCalendarAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Saves the given {@link ReadOnlyCalendarAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void saveAddressBook(ReadOnlyCalendarAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyCalendarAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void saveAddressBook(ReadOnlyCalendarAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskPlace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.TaskTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given task details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonAdaptedPerson(Task source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        name \u003d source.getTaskTitle().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        phone \u003d source.getTaskTime().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        email \u003d source.getTaskDescription().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        address \u003d source.getTaskPlace().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        tagged.addAll(source.getTaskTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the calendarModel\u0027s {@code Task} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final List\u003cTaskTag\u003e personTaskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            personTaskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTitle.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException(TaskTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final TaskTitle modelTaskTitle \u003d new TaskTitle(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTime.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final TaskTime modelTaskTime \u003d new TaskTime(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskDescription.isValidEmail(email)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException(TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final TaskDescription modelTaskDescription \u003d new TaskDescription(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskPlace.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskPlace.isValidAddress(address)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException(TaskPlace.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final TaskPlace modelTaskPlace \u003d new TaskPlace(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final Set\u003cTaskTag\u003e modelTaskTags \u003d new HashSet\u003c\u003e(personTaskTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new Task(modelTaskTitle, modelTaskTime, modelTaskDescription, modelTaskPlace, modelTaskTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.tag.TaskTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Jackson-friendly version of {@link TaskTag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts a given {@code TaskTag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonAdaptedTag(TaskTag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the calendarModel\u0027s {@code TaskTag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskTag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!TaskTag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new IllegalValueException(TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new TaskTag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A class to access CalendarAddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveAddressBook(ReadOnlyCalendarAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyCalendarAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveAddressBook(ReadOnlyCalendarAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * An Immutable CalendarAddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts a given {@code ReadOnlyCalendarAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyCalendarAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        persons.addAll(source.getPersonList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Converts this address book into the calendarModel\u0027s {@code CalendarAddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CalendarAddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CalendarAddressBook calendarAddressBook \u003d new CalendarAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Task task \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (calendarAddressBook.hasPerson(task)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            calendarAddressBook.addPerson(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return calendarAddressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A class to access CalendarUserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cCalendarUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cCalendarUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, CalendarUserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Optional\u003cCalendarUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void saveUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void saveAddressBook(ReadOnlyCalendarAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Manages storage of CalendarAddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarUserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cCalendarUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarAddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveAddressBook(ReadOnlyCalendarAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void saveAddressBook(ReadOnlyCalendarAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.CalendarUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.ReadOnlyCalendarUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a storage for {@link CalendarUserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the file path of the CalendarUserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns CalendarUserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Optional\u003cCalendarUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Saves the given {@link ReadOnlyCalendarUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void saveUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/FinanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a storage for {@link seedu.address.model.finance}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public interface FinanceStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/FinanceStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class FinanceStorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FinanceStorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private FinanceStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public FinanceStorageManager(FinanceStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 100,
      "tohcejasmine": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "tohcejasmine": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/JsonFinanceStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class JsonFinanceStorage implements FinanceStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public JsonFinanceStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "tohcejasmine": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/JsonFinanceUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class JsonFinanceUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public JsonFinanceUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.FinanceLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        persons.addAll(source.getPersonList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                .stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public FinanceLog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        FinanceLog addressBook \u003d new FinanceLog();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "tohcejasmine": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public interface Storage extends FinanceStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/finance/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.storage.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "tohcejasmine": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizAdaptedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "class JsonQuizAdaptedQuestion {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Question\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final List\u003cJsonQuizAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given question details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizAdaptedQuestion(@JsonProperty(\"name\") String name, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            @JsonProperty(\"category\") String category, @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonQuizAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        answer \u003d source.getAnswer().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        category \u003d source.getCategory().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .map(JsonQuizAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final List\u003cTag\u003e questionTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (JsonQuizAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            questionTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(questionTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Question(modelName, modelAnswer, modelCategory, modelType, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "victorvic54": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "class JsonQuizAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 1,
      "victorvic54": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class JsonQuizAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonQuizAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Optional\u003cJsonQuizSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                filePath, JsonQuizSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonQuizSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "victorvic54": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.AddressQuizBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "class JsonQuizSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Questions list contains duplicate question(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final List\u003cJsonQuizAdaptedQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given questions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizSerializableAddressBook(@JsonProperty(\"questions\") List\u003cJsonQuizAdaptedQuestion\u003e questions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questions.addAll(source.getQuestionList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .map(JsonQuizAdaptedQuestion::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public AddressQuizBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        AddressQuizBook addressBook \u003d new AddressQuizBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        for (JsonQuizAdaptedQuestion jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (addressBook.hasQuestion(question)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            addressBook.addQuestion(question);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 6,
      "victorvic54": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/JsonQuizUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class JsonQuizUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public JsonQuizUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 1,
      "victorvic54": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 1,
      "victorvic54": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/StorageQuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class StorageQuizManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageQuizManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public StorageQuizManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 1,
      "victorvic54": 8,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/quiz/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 4,
      "victorvic54": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"CalendarCommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CalendarAddressBook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public PersonCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        name.setText(task.getTaskTitle().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        phone.setText(task.getTaskTime().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        address.setText(task.getTaskPlace().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        email.setText(task.getTaskDescription().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        task.getTaskTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.model.calendar.person.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ListView\u003cTask\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public PersonListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        personListView.setItems(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                setGraphic(new PersonCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.logic.calendar.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 6,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "tohcejasmine": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final String FXML \u003d \"FinanceWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 186,
      "tohcejasmine": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "tohcejasmine": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.model.finance.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "tohcejasmine": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/UiFinanceManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.logic.finance.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public class UiFinanceManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiFinanceManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UiFinanceManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/finance/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "package seedu.address.ui.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final String FXML \u003d \"BabyShark.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final String FXML \u003d \"WindowShark.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private StackPane questionListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getFilteredQuestionList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public QuestionListPanel getQuestionListPanel() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return questionListPanel;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/QuestionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * An UI component that displays information of a {@code Question}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class QuestionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final String FXML \u003d \"QuestionListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public QuestionCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        name.setText(question.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        answer.setText(question.getAnswer().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        type.setText(question.getType().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        category.setText(question.getCategory().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        question.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        if (!(other instanceof QuestionCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        QuestionCard card \u003d (QuestionCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/QuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.model.quiz.person.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * Panel containing the list of questions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final String FXML \u003d \"QuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private ListView\u003cQuestion\u003e questionListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questionListView.setItems(questionList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        questionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuestionCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                setGraphic(new QuestionCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 1,
      "victorvic54": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/quiz/UiQuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "package seedu.address.ui.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "import seedu.address.logic.quiz.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "public class UiQuizManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiQuizManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public UiQuizManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 2,
      "victorvic54": 85
    }
  },
  {
    "path": "src/main/resources/view/BabyShark.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter baby shark here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "victorvic54": 9
    }
  },
  {
    "path": "src/main/resources/view/CalendarCommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Type Calendar command\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joannasara": 9
    }
  },
  {
    "path": "src/main/resources/view/FinanceWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Modulo\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" style\u003d\"-fx-background-color: #61ad58;\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohcejasmine"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tohcejasmine": 58
    }
  },
  {
    "path": "src/main/resources/view/QuestionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 36
    }
  },
  {
    "path": "src/main/resources/view/QuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003cListView fx:id\u003d\"questionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 8
    }
  },
  {
    "path": "src/main/resources/view/WindowShark.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" style\u003d\"-fx-background-color: #00ff00;\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cVBox fx:id\u003d\"questionList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "          \u003cStackPane fx:id\u003d\"questionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "victorvic54"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "victorvic54"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "victorvic54": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 7,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the CalendarModel) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager(calendarModel.getCalendarAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), calendarModel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task personInList \u003d calendarModel.getCalendarAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), calendarModel, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different task -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A default calendarModel stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStub implements CalendarModel {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setUserPrefs(ReadOnlyCalendarUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyCalendarUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void addPerson(Task task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setCalendarAddressBook(ReadOnlyCalendarAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyCalendarAddressBook getCalendarAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Task task) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void deletePerson(Task target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setPerson(Task target, Task editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ObservableList\u003cTask\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A CalendarModel stub that contains a single task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        private final Task task;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStubWithPerson(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            this.task \u003d task;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Task task) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(task);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return this.task.isSamePerson(task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A CalendarModel stub that always accept the task being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final ArrayList\u003cTask\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Task task) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(task);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return personsAdded.stream().anyMatch(task::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void addPerson(Task task) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(task);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            personsAdded.add(task);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyCalendarAddressBook getCalendarAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return new CalendarAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 195
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel calendarModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), calendarModel, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setCalendarAddressBook(new CalendarAddressBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), calendarModel, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandSuccess(Command command, CalendarModel actualModel,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                                            CommandResult expectedCommandResult, CalendarModel expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Convenience wrapper to {@link #assertCommandSuccess(Command, CalendarModel, CommandResult, CalendarModel)}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandSuccess(Command command, CalendarModel actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            CalendarModel expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandFailure(Command command, CalendarModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // we are unable to defensively copy the calendarModel for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarAddressBook expectedAddressBook"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new CalendarAddressBook(actualModel.getCalendarAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddressBook, actualModel.getCalendarAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Updates {@code calendarModel}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * {@code calendarModel}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void showPersonAtIndex(CalendarModel calendarModel, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(targetIndex.getZeroBased() \u003c calendarModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task task \u003d calendarModel.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final String[] splitName \u003d task.getTaskTitle().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        calendarModel.updateFilteredPersonList(new TaskTitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(1, calendarModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the CalendarModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task personToDelete \u003d calendarModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModelManager expectedModel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new CalendarModelManager(calendarModel.getCalendarAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(deleteCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(calendarModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(deleteCommand, calendarModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task personToDelete \u003d calendarModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new CalendarModelManager(calendarModel.getCalendarAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(deleteCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c calendarModel.getCalendarAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(deleteCommand, calendarModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different task -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Updates {@code calendarModel}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void showNoPerson(CalendarModel calendarModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        calendarModel.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(calendarModel.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the CalendarModel, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarAddressBook(calendarModel.getCalendarAddressBook()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(calendarModel.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(calendarModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task lastPerson \u003d calendarModel.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarAddressBook(calendarModel.getCalendarAddressBook()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarUserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedPerson \u003d calendarModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarAddressBook(calendarModel.getCalendarAddressBook()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarUserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task personInFilteredList \u003d calendarModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarModel expectedModel \u003d new CalendarModelManager("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarAddressBook(calendarModel.getCalendarAddressBook()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new CalendarUserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(calendarModel.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task firstPerson \u003d calendarModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, calendarModel, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // edit task in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task personInList \u003d calendarModel.getCalendarAddressBook()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, calendarModel, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(calendarModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, calendarModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003c calendarModel.getCalendarAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, calendarModel, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel expectedModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), calendarModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the CalendarModel) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel expectedModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new TaskTitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new TaskTitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different task -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Collections.emptyList(), calendarModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, calendarModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), calendarModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Parses {@code userInput} into a {@code TaskTitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private TaskTitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new TaskTitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel expectedModel \u003d new CalendarModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), calendarModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the CalendarModel) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel calendarModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarModel expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        calendarModel \u003d new CalendarModelManager(getTypicalAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel \u003d new CalendarModelManager(calendarModel.getCalendarAddressBook(), new CalendarUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), calendarModel, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(calendarModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), calendarModel, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskPlace;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.tag.TaskTag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple tags - all accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, TaskTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, TaskDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, TaskPlace.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + INVALID_TAG_DESC + VALID_TAG_FRIEND, TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                TaskTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddressBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task task \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task task \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new FindCommand(new TaskTitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify the last value is returned"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Preamble present"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // No preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Only two arguments are present"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // All three arguments are present"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equalsMethod() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskPlace;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.tag.TaskTag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, TaskTitle.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, TaskTime.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, TaskDescription.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, TaskPlace.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, TaskTag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, TaskTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                TaskTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class FindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new FindCommand(new TaskTitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/calendar/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.calendar.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskPlace;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.tag.TaskTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitle expectedName \u003d new TaskTitle(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitle expectedName \u003d new TaskTitle(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTime expectedPhone \u003d new TaskTime(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTime expectedPhone \u003d new TaskTime(VALID_PHONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskPlace expectedAddress \u003d new TaskPlace(VALID_ADDRESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskPlace expectedAddress \u003d new TaskPlace(VALID_ADDRESS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskDescription expectedEmail \u003d new TaskDescription(VALID_EMAIL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskDescription expectedEmail \u003d new TaskDescription(VALID_EMAIL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTag expectedTag \u003d new TaskTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTag expectedTag \u003d new TaskTag(VALID_TAG_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Set\u003cTaskTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Set\u003cTaskTag\u003e expectedTagSet"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new HashSet\u003cTaskTag\u003e(Arrays.asList(new TaskTag(VALID_TAG_1), new TaskTag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 195
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandResultTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    static {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // only do so by copying its components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class FindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple tags - all accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify the last value is returned"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Preamble present"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // No preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Only two arguments are present"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // All three arguments are present"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equalsMethod() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class FindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/quiz/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.logic.quiz.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskPlace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddressTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TaskPlace(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new TaskPlace(invalidAddress));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e TaskPlace.isValidAddress(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskPlace.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskPlace.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskPlace.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskPlace.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskPlace.isValidAddress("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EmailTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TaskDescription(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new TaskDescription(invalidEmail));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e TaskDescription.isValidEmail(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // blank email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid parts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskDescription.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid email"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskDescription.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate firstPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new TaskTitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate secondPredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new TaskTitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate firstPredicateCopy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new TaskTitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different task -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate predicate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new TaskTitleContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new TaskTitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new TaskTitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new TaskTitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TaskTitleContainsKeywordsPredicate predicate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                \u003d new TaskTitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new TaskTitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new TaskTitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class NameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TaskTitle(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new TaskTitle(invalidName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e TaskTitle.isValidName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTitle.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTitle.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTitle.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTitle.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTitle.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTitle.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTitle.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTitle.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTitle.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task task \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTaskTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different task -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PhoneTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TaskTime(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new TaskTime(invalidPhone));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidPhone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null phone number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e TaskTime.isValidPhone(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(TaskTime.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTime.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTime.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(TaskTime.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.UniqueTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class UniquePersonListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final UniqueTaskList uniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicateTaskException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(TaskNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Task editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicateTaskException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(TaskNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniqueTaskList) null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cTask\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cTask\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicateTaskException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.calendarModel.calendar.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.tag.TaskTag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TagTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TaskTag(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new TaskTag(invalidTagName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null tag name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e TaskTag.isValidTagName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddressTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EmailTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // blank email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // missing parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid parts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid email"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class NameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isSamePerson() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PhoneTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidPhone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null phone number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // invalid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // valid phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class UniquePersonListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.model.quiz.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TagTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void isValidTagName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // null tag name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/calendar/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskPlace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.calendarModel.task.TaskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getTaskTitle().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getTaskTime().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getTaskDescription().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getTaskPlace().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTaskTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(BENSON, task.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d TaskTitle.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskTitle.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d TaskTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskTime.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d TaskDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d TaskPlace.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskPlace.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson task \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/calendar/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyCalendarAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarAddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ReadOnlyCalendarAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new CalendarAddressBook(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new CalendarAddressBook(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new CalendarAddressBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void saveAddressBook(ReadOnlyCalendarAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new CalendarAddressBook(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/calendar/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarAddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarAddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/calendar/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Optional\u003cCalendarUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new CalendarUserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private CalendarUserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs userPrefs \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                () -\u003e saveUserPrefs(new CalendarUserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void saveUserPrefs(CalendarUserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs original \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/calendar/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs original \u003d new CalendarUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarUserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        CalendarAddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ReadOnlyCalendarAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new CalendarAddressBook(retrieved));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/quiz/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonAdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonAdaptedTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/quiz/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/quiz/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/quiz/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/quiz/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.storage.calendar.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class AddressBookBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private AddressBook addressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public AddressBook build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class for test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TypicalPersons {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            ab.addPerson(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return ab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "///**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "// */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 114
    }
  }
]
