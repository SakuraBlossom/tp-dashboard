[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d Dukemon"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T11-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-T11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/AY1920S1-CS2103T-T11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "https://www.codacy.com/manual/kohyida1997/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103T-T11-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/cd0b23e15b6a4fbca82036bdf5952fb1[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Dukemon is a desktop Flashcard style program designed to help YOU revise your work. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* It is a program intended to help *troubled students* revise definitions and important keywords that they encounter in their studies."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Subjects like Biology, Physics and Chemistry are especially compatible with our program. You will be able to create and save your own flashcards and datasets to test yourself."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* The flow of the program is simple - the question appears and you type in the matching answer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* There are different game modes (Timed vs. Non-Timed, Hints vs. No-Hints) and difficulties that you can configure to challenge yourself."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* You will also be able to keep track of your statistics and progress."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* *SUPERCHARGE YOUR LEARNING NOW* and use *Dukemon* !"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "* Adapted from source code of the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 12,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Dukemon was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d CS2103T-T11-2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d James Pang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::jamessspanggg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/jamessspanggg[homepage]] [https://github.com/jamessspanggg[github]] [\u003c\u003cjamessspanggg#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Role: Project Advisor + TA"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Chen Hui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::chrischenhui.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/chrischenhui[github]] [\u003c\u003cchrischenhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Game Logic"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Koh Yi Da"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::kohyida1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/kohyida1997[github]] [\u003c\u003ckohyida1997#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: Game + Timer + Threading"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Sree Subbash"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::sreesubbash.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/sreesubbash[github]] [\u003c\u003csreesubbash#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: Dev Ops + Game Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Jason Sathya Citro"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::jascxx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/jascxx[github]] [\u003c\u003cjascxx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003d\u003d\u003d Paul Tho"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "image::dragontho.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "{empty}[http://github.com/dragontho[github]] [\u003c\u003cdragontho#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "Responsibilities: UI + Data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 31,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "* *Email us* : You can also reach us at +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "oranged97@gmail.com +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "kohyida1997@gmail.com +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "sreesubbash@gmail.com +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "jasonsathyacitro@gmail.com +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "paultho97@gmail.com"
      }
    ],
    "authorContributionMap": {
      "jascxx": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* wants to learn new English words or definitions"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "* enjoys games"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "*Value proposition*: gamify learning experiences"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |teacher |add, edit, and delete questions in the word banks |make corrections on what my students are supposed to learn"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |teacher |give customised word banks and definitions |can let my students practice specific problems."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |list all my word banks |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |give titles to word banks |recognise them better"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |delete word banks |free up some memory when I don’t need it anymore"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |user |see the content of the word bank |study beforehand/make changes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |young student |trivia questions to be gamified |enjoy the process"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |student |create my own question banks |tailor fit to my learning"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* * *` |computer science student |have a manual of the commands available |refer to them when I am lost"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |frequent user |easily access my most recently attempted question sets |can quickly resume my revision"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |studious student |set and complete goals |have something to work towards"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |see my test statistics |track my progress/improvement"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |choose different kinds of time constraints |can simulate exam conditions"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |categorise my question sets |easily look for relevant materials"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |mark question sets as important/urgent |know how to prioritise my revision"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |module coordinator |export lessons |send to their students"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |share and compare my results with my classmates |know where I stand"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |student |partition the trivia |attempt questions that I\u0027m comfortable with"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |weak student |have the option to see hints |won’t get stuck all the time"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |computer science student |practise typing bash commands into the CLI |strengthen my bash skills"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`* *` |teacher |export statistics |can compare performance across different students"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |computer science student |customize my “terminal” |changing themes/ background/ font size/ font colour, so that I feel comfortable working on it"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |teacher |protect tests with passwords |let my students do them in lessons together when password is released"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |teacher |protect the files |doesn\u0027t get tampered when distributing to students"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "|`*` |student |have smaller sized files |have more space on my computer"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ".  Users can export and import their \u003c\u003cword-bank,word banks\u003e\u003e or statistics."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "[[word-bank]] Word Bank::"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "A list of word-description pair that either the user can create himself or import from."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 54,
      "-": 414
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d Dukemon - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "By: `SErebros`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Our project is a game that requires the user to match a keyword to a given description. This game aims to aid students who are trying to revise concepts and definitions in their schoolwork."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The general flow of the program is as follows:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "1. Select and Edit Dataset"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "2. Configure Settings"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "3. Start and Play Game"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "4. End Game"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "5. Display Statistics"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "The user manually stores definitions / vocabulary into a word dataset. He can also pre-load a word dataset given to him from a file. During the game, you will be tasked to type the correct word given the description. Depending on the game mode, there may also be time restrictions. Answer correctly as quickly as possible and to score as much as you can! You can view your statistics afterwards to review your performance!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": ".  Download the latest `dukemon.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. typing *`/help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *`/list`* : lists all data sets."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* **`/start`** : starts the quiz."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* **`/stop`** : stops the quiz"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *`/exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* All commands are typed with `/` in front of them to differentiate them from answers that the user puts in. `~` will be used as an escape character in case `/` is used as part of the answer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    - Eg, `~/help` will be intepreted by the computer as a string \"/help\" instead of the command `/help`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Viewing help : `/help`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Loading a data set : `/load`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Loads a data set from storage. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/load DATASET_NAME`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Use `/list` to get all data sets currently in your storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/load List of animals`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/load All gen 1 pokemon`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Listing all data sets : `/list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Shows a list of all data sets currently in storage. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Viewing a data set\u0027s content : `/view`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Views the content of a data set. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/view DATASET_NAME`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/view Anatomy of the guitar`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/view Steps in the krebs cycle`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Editor mode : `/editor`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Opens the in-app editor for managing data sets. All changes made in editor is automatically saved in storage. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/editor`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Create new data set : `/new`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Creates a new data set with specified name. Will automatically be set in edit mode for that data set. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/new DATASET_NAME`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/new Parts of the arm`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/new All amino acids`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a data set\u0027s content : `/edit`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Enters edit mode for selected data set. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/edit DATASET_NAME`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/edit List of animals`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/edit Teeth`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding a word : `/add`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Adds a new word-description pair to the data set. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/add /w WORD /d DESCRIPTION`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dragontho"
        },
        "content": "NOTE: Word can be more than just 1 word. Can consist of multiple words if term to remember requires it."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/add /w Elephant /d Has a long nose`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/add /w Newton\u0027s third law of motion /d Every action will produce and equal and opposite reaction`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/add /w Kopi Luwak /d Coffee produced from the coffee beans found in the faeces of a civet cat`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Locating a word/description: `/find`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Finds entry whose word or description contain any of the given keywords. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* Both word and description will be searched"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `find long` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns entries containing elephant and giraffe."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `find mammal fish bird` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns any entries containing `mammal`, `fish` or `bird` in its descriptions or words."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting a word : `/delete`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Deletes the specified word from the data set. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/delete INDEX`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* Deletes the word at the specified `INDEX`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/list` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dragontho"
        },
        "content": "`/delete 2` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Deletes the 2nd word in the data set."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/find elephant` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Deletes the 1st word in the results of the `/find` command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Start new game session : `/start`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Starts a game session with the desired data set. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/start List of animals`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Stop game session : `/stop`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Stops current game session (all progress will be lost) and returns to the home page. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/stop`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Viewing statistics : `/stats`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Views and compares statistics. Can be specified to view stats for specific data sets. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/stats [DATASET_NAME]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/stats` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns overall statistics for the whole app."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/stats List of animals` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Returns statistics for the data set `List of animals`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Changing settings : `/settings`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Goes into the settings menu. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/settings`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Changing the theme : `/theme`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the theme of the UI. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/theme dark/light`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/theme dark` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the UI theme to dark."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/theme light` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the UI theme to light."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Turning hints on/off : `/hints`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints on or off. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/hints on/off`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/hints on` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints on."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/hints off` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Turns hints off."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d\u003d Changing difficulty : `/difficulty`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty of the game. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/difficulty low/medium/high`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty low` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to low. (Timer \u003d 30 seconds)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty medium` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to medium. (Timer \u003d 20 seconds)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/difficulty high` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Changes the difficulty to high. (Timer \u003d 10 seconds)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Navigating back : `/back`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dragontho"
        },
        "content": "At any point in time, if there is a previous screen, navigates back to that screen. add home to navigate back to the home page. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Format: `/back [home]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/back`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* `/back home`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `/exit`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Dukemon data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d Leaderboard `[coming in v2.0]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dragontho"
        },
        "content": "View and compare your statistics with peers on the internet."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003d\u003d\u003d User profiles `[coming in v2.0]`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dragontho"
        },
        "content": "Have more than one account to monitor statistics on the same computer"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dragontho"
        },
        "content": "*Q*: How do I pronounce your name? +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dragontho"
        },
        "content": "*A*: Think Pokemon."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Help* : `/help`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Load* : `/load DATASET_NAME` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. `/load List of animals`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *List* : `/list`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *View* : `/view DATASET_NAME` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. `/view List of animals`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Editor* : `/editor` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ** *New* : `/new DATASET_NAME` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    e.g. `/new Car brands`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ** *Edit* : `/edit DATASET_NAME` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    e.g. `/edit List of animals`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        *** *Add* : `/add /w WORD /d DESCRIPTION` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        e.g. `/add /w Elephant /d Has a long nose` +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        e.g. `/add /w Giraffe /d Has a long neck`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        *** *Find* : `/find WORD [WORDS]...` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        e.g. `/find long`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        *** *Delete* : `/delete INDEX` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        e.g. `/delete 1`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Start* : `/start DATASET_NAME` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. `/start List of animals`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Stop* : `/stop`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Stats* : `/stats [DATASET_NAME]` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. `/stats` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dragontho"
        },
        "content": "e.g. `/stats List of animals`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Settings* : `/settings`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ** *Theme* : `/theme dark/light`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ** *Hints* : `/hints on/off`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    ** *Difficulty* : `/difficulty low/medium/high`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Back* : `/back [home]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dragontho"
        },
        "content": "* *Exit* : `/exit`"
      }
    ],
    "authorContributionMap": {
      "dragontho": 205,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.gamemanager.GameManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 0."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.Game.*;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    protected GameManager gameManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Step 1."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    protected Game game;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 2. Create game here."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        game \u003d initGameManager(storage, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 8."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Pass game to LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        logic \u003d new LogicManager(game, model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Step 9."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Create GameManager using logic and pass to UIManager."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameManager \u003d new GameManager(logic);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Step 10"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Initialize UIManager using GameManager"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        ui \u003d new UiManager(gameManager);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Optional\u003cReadOnlyWordBank\u003e addressBookOptional;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ReadOnlyWordBank initialData;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WordBank\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleWordBank);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WordBank\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initialData \u003d new WordBank();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WordBank\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initialData \u003d new WordBank();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Step 3."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 4 : storage.readGame()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 5 : define ReadOnlyGame class;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 6 : constructor for new Game();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 7 : constructor for new GameManger;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Game initGameManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        ReadOnlyGame initialData;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Optional\u003cReadOnlyGame\u003e gameOptional;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        gameOptional \u003d storage.readGame();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        initialData \u003d new Game();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new GameManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 40,
      "jascxx": 10,
      "kohyida1997": 14,
      "-": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ++zeroBasedIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String s \u003d filePath.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the {@code sentence} starts with the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *   Ignores case."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"dE\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param word cannot be null, cannot be empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean startsWithIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .anyMatch(x -\u003e x.toLowerCase().startsWith(word.toLowerCase()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/game/Game.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 6"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Construtor for new Game()"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 15"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Game needs to interface for:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "gameplay stuff:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "start(), pause(), exit()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "guess(String), pass()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 16"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Internally has to display on Ui. Hard to comment the flow here."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Follow the code in this order of:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Find command in FindCommand.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) in ModelManager.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Somehow they used this javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "and displayed it using stuff in ui package"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "(╯°□°)╯︵ ┻━┻"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Thats the overall flow. Get ready for Tuesdays hackathon."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/game/GameInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Hint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Interface for a game."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface GameInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void startGame();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void endGame();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void skipCard();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    boolean guess(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Hint getHint();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/game/GameManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 7"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Constructor for GameManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/game/ReadOnlyGame.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Reference from sister file in model"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/gamemanager/GameManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.gamemanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.game.GameCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that wraps around the entire apps logic and the GameTimer. This is done to separate all logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * of the game away from the GameTimer entirely, and to separate all GameTimer from the UI itself."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final long TIMER_MILLIS \u003d 3000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameTimer gameTimer \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private TimerDisplayCallBack timerDisplayCallBack \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Call-back method to update ResultDisplay in MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private ResultDisplayCallBack resultDisplayCallBack \u003d null; // not used for now."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private MainWindowExecuteCallBack mainWindowExecuteCallBack \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GameStatistics gameStatistics \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GameManager(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void setAndRunGameTimer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameTimer \u003d new GameTimer(\"Time Left\", TIMER_MILLIS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this.mainWindowExecuteCallBack,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                this.timerDisplayCallBack);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameTimer.run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Checks if a GameTimer currently exists and terminates it if present."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void abortAnyExistingGameTimer() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (this.gameTimer !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.gameTimer.abortTimer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.gameTimer \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Processes the input command commandText by passing it through the GameManager\u0027s main logic."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (commandResult instanceof StartCommandResult) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            StartCommandResult startCommandResult \u003d (StartCommandResult) commandResult;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            initGameStatistics(startCommandResult.getTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (commandResult instanceof GameCommandResult) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // update statistics upon receiving a GameCommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            GameCommandResult gameCommandResult \u003d (GameCommandResult) commandResult;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            gameStatistics.addDataPoint(gameCommandResult.getGameDataPoint(gameTimer.getElapsedMillis()),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    gameCommandResult.getCard());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // GameTimer is always abort when a new command is entered while Game is running."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        abortAnyExistingGameTimer();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (commandResult.isPromptingGuess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            Platform.runLater(() -\u003e setAndRunGameTimer());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            // todo clear the timer display"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatistics getGameStatistics() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return gameStatistics;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void initGameStatistics(String title) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStatistics \u003d new GameStatistics(title);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getFilteredPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return logic.getAddressBookFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setTimerDisplayCallBack(TimerDisplayCallBack updateTimerDisplay) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timerDisplayCallBack \u003d updateTimerDisplay;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setResultDisplayCallBack(ResultDisplayCallBack updateResultDisplay) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.resultDisplayCallBack \u003d updateResultDisplay;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setMainWindowExecuteCallBack(MainWindowExecuteCallBack mainWindowExecuteCallBack) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.mainWindowExecuteCallBack \u003d mainWindowExecuteCallBack;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface for the GameManager to periodically update the TimerDisplay"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * component of the UI."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface TimerDisplayCallBack {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateTimerDisplay(String timerMessage, long timeLeft);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface from GameManager to MainWindow to update the ResultDisplay"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * component of the UI."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface ResultDisplayCallBack {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        void updateResultDisplay(String message);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Call-back functional interface from GameManager to MainWindow, represents the GameManager sending"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * a command to the app as though it were another user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public interface MainWindowExecuteCallBack {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        CommandResult execute(String commandText) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "jascxx": 29,
      "kohyida1997": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/gamemanager/GameTimer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.gamemanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a countdown timer that runs during a Game session (if enabled)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameTimer implements Runnable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private long currentMilliSeconds; // the initial time allocated for the timer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private long timeLeft; // the time left of this timer, updated by the timer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private String mainMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameManager.MainWindowExecuteCallBack mainWindowExecuteCallBack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameManager.TimerDisplayCallBack timerDisplayCallBack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private boolean cancelled \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Creates a new GameTimer instance, but does not run it yet."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param mainMessage String of the message intended to be shown on UI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param durationInMs Duration that the Timer runs for, in milliseconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param mainWindowExecuteCallBack call-back function to send \u0027skip\" command back to MainWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GameTimer(String mainMessage, long durationInMs,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     GameManager.MainWindowExecuteCallBack mainWindowExecuteCallBack,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     GameManager.TimerDisplayCallBack timerDisplayCallBack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.mainMessage \u003d mainMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.mainWindowExecuteCallBack \u003d mainWindowExecuteCallBack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timerDisplayCallBack \u003d timerDisplayCallBack;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.currentMilliSeconds \u003d durationInMs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.timeLeft \u003d currentMilliSeconds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timer \u003d new Timer(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public double getTimeLeft() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return currentMilliSeconds;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Aborts the current timer even if it has not finished running."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void abortTimer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timer.cancel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        cancelled \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplayCallBack.updateTimerDisplay(\"\", 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Starts the timer and updates the JavaFX UI periodically."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Runs on same thread as JavaFX UI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            private long timeLeft \u003d currentMilliSeconds;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    /* Guard block to prevent concurrency issues. Timer.cancel() has no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     * real time guarantee."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (cancelled) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    if (timeLeft \u003e\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        timerDisplayCallBack.updateTimerDisplay("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                                mainMessage + \": \" + ((double) timeLeft) / 1000, timeLeft);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        cancelled \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        timer.cancel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        // Show Time is Up."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        timerDisplayCallBack.updateTimerDisplay(\"Time\u0027s up!\", timeLeft);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        // Makes a call-back to the mainWindow to execute a \u0027skip\u0027 command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            mainWindowExecuteCallBack.execute(\"skip\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        } catch (ParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        } catch (CommandException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    --timeLeft;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }, 0, 1); // Start timer immediately, and refresh every 1ms"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public long getElapsedMillis() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return currentMilliSeconds - timeLeft;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9,
      "kohyida1997": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see seedu.address.model.Model#getWordBank()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ReadOnlyWordBank getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.ModeEnum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private boolean gameStarted;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private ModeEnum mode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.gameStarted \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.mode \u003d ModeEnum.LOAD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 9."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.game \u003d game //get from constructor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 10."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Modify parseCommand()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        2 user modes: Game mode and Normal mode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 11."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Extends to Step 13 in Command.java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        commandResult \u003d command.execute(model, game);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        //commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /* Checks if command entered in wrong mode */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.mode \u003d command.check(model, mode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 12."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        We save game here too."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Similar methods to saveAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            storage.saveAddressBook(model.getWordBank());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ReadOnlyWordBank getAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getWordBank();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getFilteredCardList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getWordBankFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 31,
      "jascxx": 8,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents a app command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public abstract class AppCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum check(Model model, ModeEnum mode) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (mode !\u003d ModeEnum.APP) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throw new CommandException(\"You\u0027re not in App mode!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return ModeEnum.APP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 16,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Step 13."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends to Step 14 in StartCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Modify commands to take in a game object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract ModeEnum check(Model model, ModeEnum mode) throws CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /** The application is prompting a guess. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final boolean promptsGuess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.promptsGuess \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean promptsGuess) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.promptsGuess \u003d promptsGuess;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean promptsGuess) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this(feedbackToUser, false, false, promptsGuess);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean isPromptingGuess() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return promptsGuess;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "kohyida1997": 17,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents a game command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public abstract class GameCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    protected static final String MESSAGE_NO_ACTIVE_GAME \u003d \"There is no active game!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum check(Model model, ModeEnum mode) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return ModeEnum.GAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 8,
      "jascxx": 2,
      "chrischenhui": 1,
      "kohyida1997": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Represents a game command todo give a more descriptive comment"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public abstract class LoadCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum check(Model model, ModeEnum mode) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (mode !\u003d ModeEnum.LOAD) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throw new CommandException(\"Load word bank first!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return ModeEnum.LOAD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModeEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Game modes for the app"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public enum ModeEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    APP, GAME, LOAD"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "chrischenhui": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Represents an app command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public abstract class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public abstract ModeEnum check(Model model, ModeEnum mode) throws CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 12,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Adds a card to the word bank."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class AddCommand extends AppCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the word bank. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_WORD + \"WORD \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_MEANING + \"MEANING \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_WORD + \"Abra \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_MEANING + \"It sleeps eighteen hours a day, but employs telekinesis even while sleeping.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_TAG + \"psychic \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card meaning already exists in the word bank\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public AddCommand(Card card) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(\"in add command execute: \" + model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 6,
      "jascxx": 22,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Clears the word bank."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ClearCommand extends AppCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Word bank has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.setWordBank(new WordBank());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Deletes a card identified using it\u0027s displayed index from the word bank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class DeleteCommand extends AppCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \": Deletes the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 9,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Edits the details of an existing card in the word bank."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class EditCommand extends AppCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"by the index number used in the displayed card list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"[\" + PREFIX_WORD + \"WORD] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"[\" + PREFIX_MEANING + \"MEANING] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + PREFIX_MEANING + \"PIKA PIKA\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card meaning already exists in the word bank.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final EditCardDescriptor editCardDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param index of the card in the filtered card list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param editCardDescriptor details to edit the card with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!cardToEdit.isSameMeaning(editedCard) \u0026\u0026 model.hasCard(editedCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.setCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word updatedWord \u003d editCardDescriptor.getWord().orElse(cardToEdit.getWord());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning updatedMeaning \u003d editCardDescriptor.getMeaning().orElse(cardToEdit.getMeaning());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCardDescriptor.getTags().orElse(cardToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Card(updatedWord, updatedMeaning, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private Word word;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private Meaning meaning;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public EditCardDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            setWord(toCopy.word);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            setMeaning(toCopy.meaning);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(word, meaning, tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setWord(Word word) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.word \u003d word;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Optional\u003cWord\u003e getWord() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.ofNullable(word);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setMeaning(Meaning meaning) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.meaning \u003d meaning;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Optional\u003cMeaning\u003e getMeaning() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Optional.ofNullable(meaning);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return getWord().equals(e.getWord())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    \u0026\u0026 getMeaning().equals(e.getMeaning())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "jascxx": 59,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ExitCommand extends AppCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting App as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Finds and lists all cards in word bank whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class FindCommand extends AppCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cards whose words contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Singapore\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final WordContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public FindCommand(WordContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 7,
      "kohyida1997": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class HelpCommand extends AppCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/app/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.AppCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Lists all cards in the word bank to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class ListCommand extends AppCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.address.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/GameCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by a game command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public abstract class GameCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Game should finish and open game result display **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean isFinishedGame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Game should exit to home **/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final boolean isExitGame; // field may be used to implement stopGame command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The card displayed when command is executed **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Card card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameCommandResult(Card card, String feedback, boolean isFinishedGame, boolean isExitGame) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(feedback, !isFinishedGame \u0026\u0026 !isExitGame);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.isFinishedGame \u003d isFinishedGame;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.isExitGame \u003d isExitGame;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Used to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public abstract GameDataPoint getGameDataPoint(long millisElapsed);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card getCard() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isFinishedGame() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return isFinishedGame;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isExitGame() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return isExitGame;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/GuessCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Make a guess."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessCommand extends GameCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"guess\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Makes a guess for current flashcard with \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final Guess inputGuess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuessCommand(Guess inputGuess) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.inputGuess \u003d inputGuess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Game game \u003d model.getGame();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (game.isOver()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            String exceptionText \u003d (\"The Game has ended.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    + \"Type \u0027start\u0027 to try again!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.getGame() \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new CommandResult(MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card guessedCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (game.isOver()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            msg \u003d \"GAME OVER!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            msg \u003d game.getCurrQuestion();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GuessCommandResult(inputGuess, guessedCard, msg, game.isOver());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 15,
      "jascxx": 14,
      "kohyida1997": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/GuessCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code GuessCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GuessCommandResult extends GameCommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_WRONG_GUESS \u003d \"Guess is WRONG!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CORRECT_GUESS \u003d \"Guess is CORRECT!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Guess guess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GuessCommandResult(Guess guess, Card card, String additionalMsg, boolean isFinishedGame) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(card, ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        guess.matches(card.getWord()) ? MESSAGE_CORRECT_GUESS : MESSAGE_WRONG_GUESS)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + additionalMsg,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                isFinishedGame,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Guess getGuess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameDataPoint getGameDataPoint(long millisElapsed) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return GameDataPoint.createGuessData(guess, millisElapsed);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/SkipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents skipping over a word while Game is running."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class SkipCommand extends GameCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.getGame() \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new CommandResult(MESSAGE_NO_ACTIVE_GAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d model.getGame();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card curCard \u003d game.getCurrCard();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Skip current card, move to next card."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String msg \u003d game.isOver()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ? \"GAME OVER!\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                : game.getCurrQuestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new SkipCommandResult(curCard, msg, game.isOver());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8,
      "kohyida1997": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/SkipCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameDataPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code GuessCommand}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * This class is needed to pass some info to the {@code GameManager} to populate the {@code GameStatistics}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class SkipCommandResult extends GameCommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String MESSAGE_SKIPPED \u003d \"Word skipped!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public SkipCommandResult(Card card, String additionalMsg, boolean isFinished) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(card,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                MESSAGE_SKIPPED"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + additionalMsg,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                isFinished,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameDataPoint getGameDataPoint(long millisElapsed) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return GameDataPoint.createSkipData(millisElapsed);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/game/StopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.commands.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Class that represents forcibly stopping a Game session that is running."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class StopCommand extends GameCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_STOPPED \u003d \"Current Game has been forcibly stopped!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Executes the StopCommand to forcibly terminate the current game session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return CommandResult to be passed back into the UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        model.getGame().forceStop();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // No collection of statistics when game is stopped."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new CommandResult(MESSAGE_STOPPED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/load/BankCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.load;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbanklist.WordBankList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class BankCommand extends LoadCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MESSAGE_LIST_ACKNOWLEDGEMENT \u003d \"Displaying available wordbanks\\n Choose one\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            + \": Loads the bank identified by the index number.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public BankCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        WordBankList temp \u003d new WordBankList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        model.setWordBank(temp.getWordBank(targetIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_ACKNOWLEDGEMENT , false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 38,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/HomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.ModeEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class HomeCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MESSAGE_HOME_ACKNOWLEDGEMENT \u003d \"Going home as requested\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum check(Model model, ModeEnum mode) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return ModeEnum.APP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return new CommandResult(MESSAGE_HOME_ACKNOWLEDGEMENT, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 27,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/StartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Step 14."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "It has to override execute() from command interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Interacts with Game interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "Extends to Step 15 in Game.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.ModeEnum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Starts the game."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class StartCommand extends SwitchCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \": Starts the word bank identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String MESSAGE_GAME_IN_PROGRESS \u003d \"A game session is still in progress!\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            + \" (Use \u0027stop\u0027 to terminate) Guess the word:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String wordBankName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public StartCommand(String wordBankName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankName \u003d wordBankName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public ModeEnum check(Model model, ModeEnum mode) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return ModeEnum.GAME;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (model.getGame() !\u003d null \u0026\u0026 !model.getGame().isOver()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new CommandException(MESSAGE_GAME_IN_PROGRESS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    + \"\\n\" + model.getGame().getCurrQuestion());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String pathString \u003d \"data/\" + wordBankName + \".json\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path filePath \u003d Paths.get(pathString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank wordBank \u003d SampleDataUtil.getSampleWordBank();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        addressBookStorage.getWordBankList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String usedWordBankTitle \u003d \"Pokémon sample\"; // todo change later"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Optional\u003cReadOnlyWordBank\u003e thisBank \u003d addressBookStorage.readAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (thisBank.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                wordBank \u003d (WordBank) thisBank.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                usedWordBankTitle \u003d wordBankName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Game newGame \u003d new Game(wordBank);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        model.setGame(newGame);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String currQuestion \u003d model.getGame().getCurrQuestion();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new StartCommandResult(usedWordBankTitle, currQuestion);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 16,
      "jascxx": 15,
      "chrischenhui": 29,
      "kohyida1997": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switches/StartCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands.switches;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents the command result returned by {@code StartCommand}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Used mainly to pass the info of the title to the GameManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class StartCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_GAME_START_SUCCESS \u003d \"Sample game session in progress, \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String FIRST_QUESTION_MESSAGE \u003d \"guess the keyword! \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public StartCommandResult(String title, String firstQuestion) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(MESSAGE_GAME_START_SUCCESS + FIRST_QUESTION_MESSAGE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        + firstQuestion,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        System.err.println(\"########: \" + args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_MEANING, PREFIX_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WORD, PREFIX_MEANING)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word word \u003d ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning meaning \u003d ParserUtil.parseMeaning(argMultimap.getValue(PREFIX_MEANING).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card card \u003d new Card(word, meaning, tagList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new AddCommand(card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 3,
      "jascxx": 10,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.game.GuessCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.game.SkipCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.commands.game.StopCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.load.BankCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.switches.HomeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Step 10."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Additional commands to be done"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Have 2 separate user modes: Game, Normal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        case BankCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return new BankCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case GuessCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new GuessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case SkipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new SkipCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return new StopCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 21,
      "chrischenhui": 4,
      "kohyida1997": 13,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BankCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.load.BankCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class BankCommandParser implements Parser\u003cBankCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public BankCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            return new BankCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BankCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final Prefix PREFIX_WORD \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final Prefix PREFIX_MEANING \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WORD, PREFIX_MEANING, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor editCardDescriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WORD).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            editCardDescriptor.setWord(ParserUtil.parseWord(argMultimap.getValue(PREFIX_WORD).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEANING).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            editCardDescriptor.setMeaning(ParserUtil.parseMeaning(argMultimap.getValue(PREFIX_MEANING).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCardDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new EditCommand(index, editCardDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 4,
      "jascxx": 8,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.app.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GuessCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.game.GuessCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Parses input arguments and creates a new GuessCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessCommandParser implements Parser\u003cGuessCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public GuessCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return new GuessCommand(new Guess(trimmedArgs));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 5,
      "kohyida1997": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses a {@code String word} into a {@code Name}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws ParseException if the given {@code word} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Word parseWord(String word) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String trimmedName \u003d word.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Word.isValidWord(trimmedName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ParseException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Word(trimmedName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses a {@code String meaning} into a {@code Meaning}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @throws ParseException if the given {@code meaning} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Meaning parseMeaning(String meaning) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(meaning);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String trimmedMeaning \u003d meaning.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Meaning.isValidMeaning(trimmedMeaning)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new ParseException(Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Meaning(trimmedMeaning);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 18,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StartCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.logic.commands.game.GuessCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.switches.StartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public StartCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return new StartCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "chrischenhui": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the user prefs\u0027 word bank file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Path getWordBankFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the user prefs\u0027 word bank file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setWordBankFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces word bank data with the data in {@code wordBank}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setWordBank(ReadOnlyWordBank wordBank);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Returns the WordBank */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ReadOnlyWordBank getWordBank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a card with the same name as {@code card} exists in the word bank."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the word bank."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code card} must not already exist in the word bank."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the given card {@code target} with {@code editedCard}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card name of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void setCard(Card target, Card editedCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Returns an unmodifiable view of the filtered card list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    void setGame(Game game);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    Game getGame();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27,
      "kohyida1997": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final WordBank wordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //Placeholder game model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private Game game \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Initializes a ModelManager with the given wordBank and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ModelManager(ReadOnlyWordBank wordBank, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(wordBank, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        logger.fine(\"Initializing with word bank: \" + wordBank + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBank \u003d new WordBank(wordBank);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(this.wordBank.getCardList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this(new WordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // Placeholder setGame method"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setGame(Game game) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.game \u003d game;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Game getGame() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this.game;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WordBank \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setWordBank(ReadOnlyWordBank wordBank) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBank.resetData(wordBank);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank.hasCard(card);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.removeCard(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(card);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.setCard(target, editedCard);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code versionedAddressBook} // todo what is this versionedAddressBook?"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return filteredCards;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank.equals(other.wordBank)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 filteredCards.equals(other.filteredCards);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 46,
      "kohyida1997": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // field values"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Word word;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Meaning meaning;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    // stateful objects"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private HintSupplier hintSupplier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card(Word word, Meaning meaning, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(word, meaning, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.meaning \u003d meaning;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.hintSupplier \u003d new HintSupplier(word.value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Word getWord() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Meaning getMeaning() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return meaning;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if both cards have the same meaning."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean isSameMeaning(Card other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getMeaning().equals(other.getMeaning());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the next hint of the name, and null if no more hints available."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Hint getHint() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return hintSupplier.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if both cards have the same name, description, and tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Defines a stronger equality than {@link Card#isSameMeaning(Card)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card otherPerson \u003d (Card) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return otherPerson.getWord().equals(getWord())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 otherPerson.getMeaning().equals(getMeaning())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Objects.hash(word, meaning, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        builder.append(getWord())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(\" Meaning: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .append(getMeaning())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 45,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Hint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Hint of a String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Consists of a letter and its index in the String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Hint {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Character letter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Hint}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param letter A character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param index The index of the character in the String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Hint(Character letter, Index index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(letter, index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.letter \u003d letter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return String.format(\"[letter:%s,index:%d]\", letter.toString(), index.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Hint // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 letter.equals(((Hint) other).letter)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 index.equals(((Hint) other).index)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Objects.hash(letter, index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/HintSupplier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Supplies a hint consisting of a letter and the index the letter occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Each character in the string is output once in random order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class HintSupplier implements Supplier\u003cHint\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private List\u003cHint\u003e hints;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code HintSupplier}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param text the text that the hints are based on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public HintSupplier(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        hints \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c text.length(); ++i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            hints.add(new Hint(text.charAt(i), Index.fromZeroBased(i)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Collections.shuffle(hints);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getRemainingHints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return hints.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the next hint. Null if no more hints available."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Hint get() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return hints.isEmpty() ? null : hints.remove(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Meaning.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card\u0027s meaning."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMeaning(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Meaning {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MAX_LEN \u003d 512;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \"Meanings should be 1-\" + MAX_LEN + \" characters long, and not all are white spaces.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The description should contain 1-MAX_LEN characters, and not all are white spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d.*\\\\S).{1,\" + MAX_LEN + \"}$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Meaning}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param meaning A valid meaning."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Meaning(String meaning) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(meaning);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(isValidMeaning(meaning), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.value \u003d meaning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a given string is a valid meaning."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean isValidMeaning(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Meaning // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 value.equals(((Meaning) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Word.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Card\u0027s word."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class Word {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final int MAX_LEN \u003d 256;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \"Words should be 1-\" + MAX_LEN + \" characters long, and not all are white spaces.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * The word should contain 1-256 characters, and not all are white spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d.*\\\\S).{1,\" + MAX_LEN + \"}$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code Word}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param word A valid word."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Word(String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        checkArgument(isValidWord(word), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.value \u003d word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a given string is a valid word."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static boolean isValidWord(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof Word // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 value.equals(((Word) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 1,
      "jascxx": 20,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/WordContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Word} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Keyword \"HE\" will match all {\"he\", \"HeArt\", \"HeAVEN\", \"NEW HeaVEN\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.startsWithIgnoreCase(card.getWord().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof WordContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 keywords.equals(((WordContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/CardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/exceptions/DuplicateCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * names)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/game/Game.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a game session using Cards from a specified WordBank."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Guarantees: WordBank is not null, and that WordBank is not empty."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class Game {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final int CORRECT_GUESS \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public static final int WRONG_GUESS \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private boolean isOver \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Current WordBank cannot be changed once assigned."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final WordBank wordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // Stateful field Index that updates as game progresses."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Index cardIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Constructor for Game instance that takes in a WordBank."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * WordBank must not be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param wordBank WordBank that current Game session will run on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Game(WordBank wordBank) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(wordBank);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cardIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns current Card at the current index. Throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * if game has already ended (no more available cards)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card getCurrCard() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (isOver()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            throw new UnsupportedOperationException(\"Game is already Over\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank.getCard(cardIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns meaning of current Card at the current index as a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Throws {@code UnsupportedOperationException} if game has already ended (no more available cards)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getCurrQuestion() throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return getCurrCard().getMeaning().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the user\u0027s guess is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param inputGuess User\u0027s input guess of the game\u0027s current card."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @throws UnsupportedOperationException if game has already ended."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean checkGuess(Guess inputGuess) throws UnsupportedOperationException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return inputGuess.matches(getCurrCard().getWord());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Index getCurrIndex() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        return cardIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Returns the state of the Game, whether it is over. Note once a Game has been stopped, it"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * cannot be resumed at any point, for now"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @return True if game is indeed terminated."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public boolean isOver() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (isOver) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            isOver \u003d getCurrIndex().getZeroBased() \u003e\u003d wordBank.size() ? true : false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return isOver;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void forceStop() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        isOver \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void moveToNextCard() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cardIndex.increment();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 19,
      "kohyida1997": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/game/Guess.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": " * Represents a user\u0027s guess during a Game session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class Guess {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    // User\u0027s input guessString cannot be changed once assigned."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private final String guessString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public Guess(String guessString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        requireAllNonNull(guessString);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.guessString \u003d guessString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the {@code word} matches the {@code guessString}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean matches(Word word) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guessString.toLowerCase().equals(word.value.toLowerCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (obj instanceof Guess) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return guessString.equals(((Guess) obj).guessString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guessString.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guessString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 30,
      "kohyida1997": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a Tag of a Card."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Contains utility methods for populating {@code WordBank} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Card[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            new Card(new Word(\"Abra\"), new Meaning(\"It sleeps eighteen hours a day, but employs telekinesis even \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"while sleeping.\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    getTagSet(\"psychic\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            new Card(new Word(\"Butterfree\"), new Meaning(\"Its wings are covered with poisonous dust. If you see \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"one flapping its wings, be careful not to inhale any of the dust.\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    getTagSet(\"bug\", \"flying\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            new Card(new Word(\"Charizard\"), new Meaning(\"It flies around the sky in search of powerful \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"opponents. It breathes fire of such great heat that it melts anything. However, it never turns \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"its fiery breath on any opponent weaker than itself.\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    getTagSet(\"fire\", \"flying\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            new Card(new Word(\"Ditto\"), new Meaning(\"Its transformation ability is perfect. However, if it \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"is made to laugh, it can\u0027t maintain its disguise.\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    getTagSet(\"normal\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            new Card(new Word(\"Eevee\"), new Meaning(\"Possessing an unbalanced and unstable genetic makeup, it \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"conceals many possible evolutions.\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    getTagSet(\"normal\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static WordBank getSampleWordBank() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank sampleWb \u003d new WordBank();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sampleWb.addCard(sampleCard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sampleWb;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 28,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/ReadOnlyWordBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Unmodifiable view of a word bank."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public interface ReadOnlyWordBank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an unmodifiable view of the word bank."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Card getCard(Index index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/UniqueCardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A card is considered unique by comparing using {@code Card#isSameMeaning(Card)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * cards uses Card#isSameMeaning(Card) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * unique in terms of names in UniqueCardList. However, the removal of a card uses Card#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * @see seedu.address.model.card.Card#isSameMeaning(seedu.address.model.card.Card)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if the list contains a card with the same meaning."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeaning);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must not exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see UniqueCardList#contains(Card)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The name of {@code editedPerson} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!target.isSameMeaning(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code cards} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card get(Index index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (cards.get(i).isSameMeaning(cards.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbank/WordBank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.wordbank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Duplicates are not allowed (by Card#isSameMeaning(Card) comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBank implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates a WordBank using the Cards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank(ReadOnlyWordBank toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code cards} must not contain any cards with the same meaning."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Resets the existing data of this {@code WordBank} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns true if a card with the same meaning as {@code card} exists in the word bank."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a card to the word bank."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A card with the same meaning must not already exist in the word bank."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addCard(Card p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card meaning of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes {@code key} from this {@code WordBank}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void removeCard(Card key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        cards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.asUnmodifiableObservableList().size() + \" cards\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                || (other instanceof WordBank // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 cards.equals(((WordBank) other).cards));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return cards.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if both cards have the same meaning."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean isSameMeaning(WordBank other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return getName().equals(other.getName());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 130,
      "chrischenhui": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/ReadOnlyWordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Unmodifiable view of a word bank."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public interface ReadOnlyWordBankList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns an unmodifiable view of the word bank."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    ObservableList\u003cWordBank\u003e getWordBankList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    WordBank getWordBank(Index index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/UniqueWordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * A card is considered unique by comparing using {@code Card#isSameMeaning(Card)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * cards uses Card#isSameMeaning(Card) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * unique in terms of names in UniqueCardList. However, the removal of a card uses Card#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * @see seedu.address.model.wordbank.WordBank#isSameMeaning(seedu.address.model.wordbank.WordBank)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class UniqueWordBankList implements Iterable\u003cWordBank\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final ObservableList\u003cWordBank\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final ObservableList\u003cWordBank\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if the list contains a card with the same meaning."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean contains(WordBank toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeaning);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * The card must not exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * @see UniqueWordBankList#contains(WordBank)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void add(WordBank toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * The name of {@code editedPerson} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(WordBank target, WordBank editedPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!target.isSameMeaning(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(UniqueWordBankList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code cards} must not contain duplicate persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(List\u003cWordBank\u003e cards) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        if (!wordBanksAreUnique(cards)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove(WordBank toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank get(Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Iterator\u003cWordBank\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof UniqueWordBankList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueWordBankList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private boolean wordBanksAreUnique(List\u003cWordBank\u003e cards) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                if (cards.get(i).isSameMeaning(cards.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 12,
      "chrischenhui": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wordbanklist/WordBankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "package seedu.address.model.wordbanklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Duplicates are not allowed (by Card#isSameMeaning(Card) comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "public class WordBankList implements ReadOnlyWordBankList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final UniqueWordBankList wordBankList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankList \u003d new UniqueWordBankList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBankList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        Path filePath \u003d Paths.get(\"data/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        JsonAddressBookStorage storage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cWordBank\u003e wbl \u003d storage.getWordBankList().get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (WordBank wb : wbl) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBankList.add(wb);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     * Creates a WordBank using the Cards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public WordBankList(ReadOnlyWordBankList toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code cards} must not contain any cards with the same meaning."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void setWordBankList(List\u003cWordBank\u003e wordBankList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBankList.setWordBankList(wordBankList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Resets the existing data of this {@code WordBank} with {@code newData}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void resetData(ReadOnlyWordBankList newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        setWordBankList(newData.getWordBankList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Returns true if a card with the same meaning as {@code card} exists in the word bank."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean hasWordBank(WordBank wordBank) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        requireNonNull(wordBank);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.contains(wordBank);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Adds a card to the word bank."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * A card with the same meaning must not already exist in the word bank."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void addCard(WordBank p) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankList.add(p);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     * {@code target} must exist in the word bank."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     * The card meaning of {@code editedCard} must not be the same as another existing card in the word bank."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void setWordBankList(WordBank target, WordBank editedCard) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        wordBankList.setWordBankList(target, editedCard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Removes {@code key} from this {@code WordBank}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * {@code key} must exist in the word bank."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public void removeWordBank(WordBank key) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBankList.remove(key);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.asUnmodifiableObservableList().size() + \" cards\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public ObservableList\u003cWordBank\u003e getWordBankList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public WordBank getWordBank(Index index) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.get(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                || (other instanceof WordBank // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                \u0026\u0026 wordBankList.equals(((WordBankList) other).wordBankList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return wordBankList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameDataPoint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a data point of a game, consisting of an action (GUESS or SKIP) and the time elapsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * The collection of {@code GameDataPoint} is located in {@code GameStatistics}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameDataPoint {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final GameDataType dataType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The millis taken after the current card is shown**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final long millisTaken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** Optional is empty for a SKIP data point, and contains the corresponding guess for GUESS data point **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Optional\u003cGuess\u003e guess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private GameDataPoint(GameDataType dataType, Optional\u003cGuess\u003e guess, long millisTaken) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireAllNonNull(dataType, guess);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (millisTaken \u003c 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new AssertionError(\"Millis taken cannot be negative\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.dataType \u003d dataType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.guess \u003d guess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.millisTaken \u003d millisTaken;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates a skip data point."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param millisTaken The time the skip command occurs after the card is displayed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static GameDataPoint createSkipData(long millisTaken) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GameDataPoint(GameDataType.SKIP,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                millisTaken);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Creates a guess data point."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param guess The corresponding guess."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param millisTaken The time the guess command occurs after the card is displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static GameDataPoint createGuessData(Guess guess, long millisTaken) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new GameDataPoint(GameDataType.GUESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                Optional.of(guess),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                millisTaken);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cGuess\u003e getGuess() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return guess;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public long getMillisTaken() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return millisTaken;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return dataType + \" - \" + guess + \": \" + millisTaken + \"ms\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameDataType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents user actions that affect the game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * New actions should be added to correctly be shown in GameStatistics."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * @see seedu.address.logic.commands.game.GuessCommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * @see seedu.address.logic.commands.game.SkipCommandResult"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public enum GameDataType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    GUESS,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    SKIP"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/statistics/GameStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A class that manages all statistics to be shown at the end of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatistics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /** The data that maps each card to the actions that happen when that card is shown **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final Map\u003cCard, List\u003cGameDataPoint\u003e\u003e data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameStatistics(String title) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        data \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Add a data point to the statistics."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param gameDataPoint The data point that represents the user action."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param card The card displayed when the action happens"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addDataPoint(GameDataPoint gameDataPoint, Card card) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (data.containsKey(card)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            data.get(card).add(gameDataPoint);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            List\u003cGameDataPoint\u003e gameDataPointList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            gameDataPointList.add(gameDataPoint);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            data.put(card, gameDataPointList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Map\u003cCard, List\u003cGameDataPoint\u003e\u003e getData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the score of the game. To be shown in the result page."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * The scoring system can be flexible."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo implement this method properly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int correctAnswer \u003d (int) data.keySet()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .filter(x -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Optional\u003cGuess\u003e guess \u003d data.get(x).get(0).getGuess();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return guess.isPresent() \u0026\u0026 guess.get().matches(x.getWord());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                })"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int score \u003d (int) Math.round(((double) correctAnswer) / data.size() * 100);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public ScoreGrade getScoreGrade() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return ScoreGrade.getGrade(getScore());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the time taken for the entire game. To be shown on the result page."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public double getTimeTakenSec() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return data.keySet()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                // sum up the last guess for every card"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .mapToLong(x -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    List\u003cGameDataPoint\u003e dataPoints \u003d data.get(x);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    return dataPoints.get(dataPoints.size() - 1).getMillisTaken();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }).sum() / 1000.0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Map.Entry\u003cCard, List\u003cGameDataPoint\u003e\u003e entry : data.entrySet()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            sb.append(\"-------\").append(entry.getKey()).append(\"-------\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            for (GameDataPoint gameDataPoint : entry.getValue()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                sb.append(\"   \").append(gameDataPoint).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Represents how good a score is. Used by the UI to set the text color for the score."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see seedu.address.ui.modules.GameResultPanel"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public enum ScoreGrade {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        HIGH(80), MEDIUM(50), LOW(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private int minScore;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ScoreGrade(int minScore) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.minScore \u003d minScore;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        static ScoreGrade getGrade(int grade) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return Arrays.stream(ScoreGrade.values())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .filter(x -\u003e grade \u003e\u003d x.minScore)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    .orElse(LOW);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a storage for {@link WordBank}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyWordBank}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Saves the given {@link ReadOnlyWordBank} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyWordBank)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 10,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "class JsonAdaptedCard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        name \u003d source.getWord().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        description \u003d source.getMeaning().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Word.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Word.isValidWord(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final Word modelWord \u003d new Word(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    Meaning.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!Meaning.isValidMeaning(description)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalValueException(Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final Meaning modelMeaning \u003d new Meaning(description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Card(modelWord, modelMeaning, modelTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 32,
      "chrischenhui": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyWordBank)}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public Optional\u003cList\u003cWordBank\u003e\u003e getWordBankList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        List\u003cWordBank\u003e wordBankList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String pathString \u003d \"data/\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        File dataDirectory \u003d new File(pathString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        String[] pathArray \u003d dataDirectory.list();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c pathArray.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            System.out.println(pathArray[i]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            String wordBankPathString \u003d \"data/\" + pathArray[i];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Path wordBankPath \u003d Paths.get(wordBankPathString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                Optional\u003cReadOnlyWordBank\u003e wordBank \u003d readAddressBook(wordBankPath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                ReadOnlyWordBank wb \u003d wordBank.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                WordBank wbToAdd \u003d (WordBank) wb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                wordBankList.add(wbToAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        return Optional.of(wordBankList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 6,
      "chrischenhui": 26,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    private final List\u003cJsonAdaptedCard\u003e wordBank \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"wordBank\") List\u003cJsonAdaptedCard\u003e card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        this.wordBank.addAll(card);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyWordBank source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        wordBank.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        for (JsonAdaptedCard jsonAdaptedCard : this.wordBank) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            Card card \u003d jsonAdaptedCard.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            if (wordBank.hasCard(card)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "            wordBank.addCard(card);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 7,
      "chrischenhui": 8,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Step 4."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Define method signature of readGame here."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    Extends into concrete definition in StorageManager.java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 5,
      "jascxx": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Optional\u003cReadOnlyWordBank\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult commandResult \u003d commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            if (commandResult.isPromptingGuess()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                commandTextField.setText(\"guess \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "                commandTextField.positionCaret(6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 8,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CurrentModeFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class CurrentModeFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"CurrentModeFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label currentMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public CurrentModeFooter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentMode.setText(\"Current mode: \" + \"load\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void changeMode(String mode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentMode.setText(\"Current mode: \" + mode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.gamemanager.GameManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.logic.commands.game.GameCommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameManager gameManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private TimerDisplay timerDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private ModularDisplay modularDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private CurrentModeFooter currentModeFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //One size fits all stackpane"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane modularDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //TimerDisplay placeholder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private StackPane timerDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private StackPane currentModePlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public MainWindow(Stage primaryStage, GameManager gameManager) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.gameManager \u003d gameManager;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.modularDisplay \u003d new ModularDisplay(gameManager);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        setWindowDefaultSize(gameManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        modularDisplay.displayTitle(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up timer display"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay \u003d new TimerDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplayPlaceholder.getChildren().add(timerDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in GameManager to update TimerDisplay"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameManager.setTimerDisplayCallBack(this::updateTimerDisplay);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in GameManager to update ResultDisplay"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameManager.setResultDisplayCallBack(this::updateResultDisplay);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Set up callback function in GameManager to call MainWindow\u0027s executeCommand"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameManager.setMainWindowExecuteCallBack(this::executeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(gameManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        //Displays the current mode. Starts in \"load\" mode."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentModeFooter \u003d new CurrentModeFooter();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        currentModePlaceholder.getChildren().add(currentModeFooter.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        gameManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //Platform.exit();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        //System.exit(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Opens the result stats window when the game is finished."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private void handleFinishedGame() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (gameManager.getGameStatistics() \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalStateException(\"gameStatistics in gameManager should not be null when game\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"is finished\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modularDisplay.swapToGameResult(modularDisplayPlaceholder, gameManager.getGameStatistics());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            CommandResult commandResult \u003d gameManager.execute(commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            //This is temporary. Todo: Make a separate class to handle switching and ui updates."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (commandText.equals(\"home\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                currentModeFooter.changeMode(\"home\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else if (commandText.matches(\"start [1-9]\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                currentModeFooter.changeMode(\"game\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            //So is this. Todo: Compile both the above and below into a new \"UpdateUI\" class."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            if (commandText.equals(\"bank\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                modularDisplay.swapToBanks(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            } else if (commandText.equals(\"list\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                modularDisplay.swapToList(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else if (commandText.equals(\"help\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                //modularDisplay.swapToBanks(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                modularDisplay.swapToHome(modularDisplayPlaceholder);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (commandResult instanceof GameCommandResult) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                GameCommandResult gameCommandResult \u003d (GameCommandResult) commandResult;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                if (gameCommandResult.isFinishedGame()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    handleFinishedGame();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * Updates the timerDisplay module of MainWindow to be called from GameTimer."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param timerMessage Message to be displayed on the TimerDisplay."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param timeLeft Time in milliseconds that is left in the current timer."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateTimerDisplay(String timerMessage, long timeLeft) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        if (timeLeft \u003c\u003d 200) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.timerDisplay.setAlertTextColour();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            this.timerDisplay.setNormalTextColour();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.timerDisplay.setFeedbackToUser(timerMessage);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private void updateResultDisplay(String resultDisplayMessage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.resultDisplay.setFeedbackToUser(resultDisplayMessage);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 28,
      "sreesubbash": 3,
      "jascxx": 17,
      "chrischenhui": 2,
      "kohyida1997": 45,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModularDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.gamemanager.GameManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.modules.GameResultPanel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.ui.modules.LoadBankPanel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.modules.PersonListPanel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.modules.TitleScreenPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " * Displays the screen for Dukemon."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class ModularDisplay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    //private final LoadBankPanel loadBankPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private final LoadBankPanel loadBankPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final TitleScreenPanel titleScreenPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Changes the screen."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "     * @param gameManager GameManager who will render lists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public ModularDisplay(GameManager gameManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        loadBankPanel \u003d new LoadBankPanel(gameManager.getLogic().getFilteredPersonList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        personListPanel \u003d new PersonListPanel(gameManager.getFilteredPersonList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        titleScreenPanel \u003d new TitleScreenPanel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Initially displays title."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void displayTitle(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(titleScreenPanel.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * Changes back to home display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToHome(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(titleScreenPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to the word list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public void swapToList(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        paneToDisplay.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Changes to the game result."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * @param gameStatistics The statistics to be shown in the game result panel."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void swapToGameResult(StackPane paneToDisplay, GameStatistics gameStatistics) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        paneToDisplay.getChildren().add(new GameResultPanel(gameStatistics).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Changes to list the word banks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param paneToDisplay The view to change."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public void swapToBanks(StackPane paneToDisplay) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        paneToDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        paneToDisplay.getChildren().add(loadBankPanel.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 44,
      "sreesubbash": 7,
      "jascxx": 13,
      "chrischenhui": 14,
      "kohyida1997": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimerDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Represents a timer display. todo give a more descriptive comment"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class TimerDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    //Need to make TimerDisplay.fxml"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private static final String FXML \u003d \"TimerDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private TextArea timerDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public TimerDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setAlertTextColour() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay.setStyle(\"-fx-text-fill: #FF69B4;\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setNormalTextColour() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay.setStyle(\"-fx-text-fill: #ADFF2F;\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        timerDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 3,
      "kohyida1997": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.gamemanager.GameManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    private GameManager gameManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public UiManager(GameManager gameManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        this.gameManager \u003d gameManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, gameManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/CardCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label address; // todo this should be called description instead"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        name.setText(card.getWord().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        address.setText(card.getMeaning().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        card.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (!(other instanceof CardCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardCard card \u003d (CardCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 14,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/GameResultPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.statistics.GameStatistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Panel containing the game result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameResultPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String FXML \u003d \"GameResultPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String BADGE_PATH \u003d \"/images/badges/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_1_BNW \u003d AppUtil.getImage(BADGE_PATH + \"normal_badge_bnw.png\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_2_BNW \u003d AppUtil.getImage(BADGE_PATH + \"medium_badge_bnw.png\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_3_BNW \u003d AppUtil.getImage(BADGE_PATH + \"hard_badge_bnw.png\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_1_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"normal_badge.png\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_2_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"medium_badge.png\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final Image BADGE_3_COLOR \u003d AppUtil.getImage(BADGE_PATH + \"hard_badge.png\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ImageView badge3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label scoreText;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Label timeTakenText;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public GameResultPanel(GameStatistics gameStatistics) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AnchorPane.setLeftAnchor(title, 0.0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        title.setText(gameStatistics.getTitle());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // set badges todo set depending on received badges"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        badge1.setImage(BADGE_1_BNW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        badge2.setImage(BADGE_2_BNW);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        badge3.setImage(BADGE_3_BNW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init score text"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        int score \u003d gameStatistics.getScore();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics.ScoreGrade grade \u003d gameStatistics.getScoreGrade();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        scoreText.setText(score + \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            scoreText.setStyle(\"-fx-text-fill: #ADFF2F;\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            scoreText.setStyle(\"-fx-text-fill: #FF69B4;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            throw new IllegalArgumentException(\"This happens if there is an enum value not put as a case block\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // init time taken text"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        timeTakenText.setText(String.format(\"%.2fs\", gameStatistics.getTimeTakenSec()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/LoadBankPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the list of word banks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class LoadBankPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"LoadBankPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoadBankPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private ListView\u003cCard\u003e loadBankView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public LoadBankPanel(ObservableList\u003cCard\u003e wordBankList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        loadBankView.setItems(wordBankList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        loadBankView.setCellFactory(listView -\u003e new LoadBankViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    class LoadBankViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                setGraphic(new WordBankCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private ListView\u003cCard\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public PersonListPanel(ObservableList\u003cCard\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                setGraphic(new CardCard(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 2,
      "jascxx": 9,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/TitleScreenPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": " * Panel containing the introduction screen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class TitleScreenPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String FXML \u003d \"TitleScreenPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String MESSAGE_INTRODUCTION \u003d \"Welcome to Dukemon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private static final String MESSAGE_INFORMATION \u003d \"Have you ever wanted to sit down and memorise things\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"but was always too lazy to do so? Well then this is your lucky day because this is the solution\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"for you! The Dukedex allows you to put in any terms you want to memorise along with its definitions\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            + \"and tags. You can then start the game right away with \\\"start [INDEX]\\\".\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label introduction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public TitleScreenPanel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        introduction.setText(MESSAGE_INTRODUCTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        body.setText(MESSAGE_INFORMATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/modules/WordBankCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "package seedu.address.ui.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "public class WordBankCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * Card containing the details of the word bank."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param card The card representing its corresponding word bank."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     * @param displayedIndex The index of the word bank."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dragontho"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    public WordBankCard(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        name.setText(card.getWord().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        description.setText(card.getMeaning().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        if (!(other instanceof WordBankCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        WordBankCard card \u003d (WordBankCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dragontho": 14,
      "jascxx": 7,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/CurrentModeFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cGridPane nodeOrientation\u003d\"RIGHT_TO_LEFT\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003cLabel fx:id\u003d\"currentMode\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 16
    }
  },
  {
    "path": "src/main/resources/view/GameResultPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"Title\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cImageView fx:id\u003d\"badge1\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cImageView fx:id\u003d\"badge2\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cImageView fx:id\u003d\"badge3\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cRegion prefHeight\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cLabel fx:id\u003d\"title1\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Score:\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cLabel fx:id\u003d\"scoreText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"XX\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003cHBox minWidth\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cLabel fx:id\u003d\"title11\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Time taken: \" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeTakenText\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"XXs\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cRegion prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jascxx": 37
    }
  },
  {
    "path": "src/main/resources/view/LoadBankCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dragontho"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dragontho"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dragontho"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dragontho"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 36
    }
  },
  {
    "path": "src/main/resources/view/LoadBankPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "  \u003cListView fx:id\u003d\"loadBankView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"900\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dragontho"
        },
        "content": "              \u003cMenuBar fx:id\u003d\"menuBar\" prefHeight\u003d\"35.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"timerDisplayPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"35.0\" prefWidth\u003d\"0.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dragontho"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cStackPane fx:id\u003d\"modularDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dragontho"
        },
        "content": "              \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dragontho"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"currentModePlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dragontho"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dragontho"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 22,
      "jascxx": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/TimerDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" alignment\u003d\"BOTTOM_CENTER\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "  \u003cTextArea fx:id\u003d\"timerDisplay\" editable\u003d\"false\" styleClass\u003d\"timer-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 1,
      "kohyida1997": 7
    }
  },
  {
    "path": "src/main/resources/view/TitleScreenPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dragontho"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"introduction\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-header\" text\u003d\"Introduction\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dragontho"
        },
        "content": "      \u003cLabel fx:id\u003d\"body\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"label-bright\" text\u003d\"Body\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dragontho"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dragontho"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dragontho": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandException(deleteCommand, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    todo: storage test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        // Execute add command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        String addCommand \u003d AddCommand.COMMAND_WORD + WORD_DESC_ABRA + MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        Card expectedPerson \u003d new CardBuilder(ABRA).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        expectedModel.addCard(expectedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void saveAddressBook(ReadOnlyWordBank addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 27,
      "chrischenhui": 21,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card validPerson \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.addCard(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card personInList \u003d model.getWordBank().getCardList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 9,
      "chrischenhui": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.game.Game;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCard).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CARD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card abra \u003d new CardBuilder().withWord(\"Abra\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card butterfree \u003d new CardBuilder().withWord(\"Butterfree\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addAbraCommand \u003d new AddCommand(abra);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addButterfreeCommand \u003d new AddCommand(butterfree);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(addAbraCommand, addAbraCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(abra);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(addAbraCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(1, addAbraCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(null, addAbraCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different Card -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(addAbraCommand, addButterfreeCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public void setGame(Game game) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        public Game getGame() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Path getWordBankFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setWordBankFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setWordBank(ReadOnlyWordBank newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A Model stub that contains a single card."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return this.card.isSameMeaning(card);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * A Model stub that always accept the card being added."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::isSameMeaning);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ReadOnlyWordBank getWordBank() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return new WordBank();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 59,
      "chrischenhui": 1,
      "kohyida1997": 11,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.setWordBank(new WordBank());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "chrischenhui": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, new CommandResult(\"feedback\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, new CommandResult(\"feedback\", false, false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(commandResult, commandResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(null, commandResult);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(0.5f, commandResult);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"different\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"feedback\", true, false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(commandResult, new CommandResult(\"feedback\", false, true));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 8,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_WORD_ABRA \u003d \"Abra\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_WORD_BUTTERFREE \u003d \"Butterfree\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_MEANING_ABRA \u003d \"It sleeps eighteen hours a day, but employs telekinesis \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"even while sleeping.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String VALID_MEANING_BUTTERFREE \u003d \"Its wings are covered with poisonous dust. If you see \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"one flapping its wings, be careful not to inhale any of the dust.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_PSYCHIC \u003d \"psychic\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_BUG \u003d \"bug\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String VALID_TAG_FLYING \u003d \"flying\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String WORD_DESC_ABRA \u003d \" \" + PREFIX_WORD + VALID_WORD_ABRA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String WORD_DESC_BUTTERFREE \u003d \" \" + PREFIX_WORD + VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MEANING_DESC_ABRA \u003d \" \" + PREFIX_MEANING + VALID_MEANING_ABRA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String MEANING_DESC_BUTTERFREE \u003d \" \" + PREFIX_MEANING + VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String TAG_DESC_PSYCHIC \u003d \" \" + PREFIX_TAG + VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String TAG_DESC_BUG \u003d \" \" + PREFIX_TAG + VALID_TAG_BUG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String TAG_DESC_FLYING \u003d \" \" + PREFIX_TAG + VALID_TAG_FLYING;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String INVALID_WORD_DESC \u003d \" \" + PREFIX_WORD + \"      \"; // all white spaces not allowed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final String INVALID_MEANING_DESC \u003d \" \" + PREFIX_MEANING + \"     \"; // all white spaces not allowed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_ABRA;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        DESC_ABRA \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withMeaning(VALID_MEANING_ABRA)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        DESC_BUTTERFREE \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_BUG).withTags(VALID_TAG_FLYING).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "            expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * - the address book, filtered card list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        WordBank expectedWordBank \u003d new WordBank(actualModel.getWordBank());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        List\u003cCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertEquals(expectedWordBank, actualModel.getWordBank());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * {@code model}\u0027s word bank."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public static void showCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        final String[] splitName \u003d card.getWord().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        model.updateFilteredCardList(new WordContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertEquals(1, model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 38,
      "jascxx": 12,
      "chrischenhui": 1,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card personToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.deleteCard(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card personToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.deleteCard(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWordBank().getCardList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model.updateFilteredCardList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(model.getFilteredCardList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 20,
      "chrischenhui": 1,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class EditCardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptorWithSameValues \u003d new EditCommand.EditCardDescriptor(DESC_ABRA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(DESC_ABRA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(DESC_ABRA.equals(DESC_ABRA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(DESC_BUTTERFREE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different meaning -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA).withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new EditCardDescriptorBuilder(DESC_ABRA).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(DESC_ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WordBank(model.getWordBank()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d cardInList.withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastCard, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WordBank(model.getWordBank()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.setCard(lastCard, editedCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCardDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WordBank(model.getWordBank()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedCard \u003d new CardBuilder(cardInFilteredList).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WordBank(model.getWordBank()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.setCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_duplicateCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card firstPerson \u003d model.getFilteredCardList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card personInList \u003d model.getWordBank().getCardList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new EditCardDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void execute_invalidCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWordBank().getCardList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new EditCardDescriptorBuilder().withWord(VALID_WORD_BUTTERFREE).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_ABRA);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "        EditCommand.EditCardDescriptor copyDescriptor \u003d new EditCommand.EditCardDescriptor(DESC_ABRA);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_ABRA)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BUTTERFREE)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 52,
      "chrischenhui": 9,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.commands.app.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.EEVEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.FLAREON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new WordContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCardList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d preparePredicate(\"ee fl\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Arrays.asList(EEVEE, FLAREON), model.getFilteredCardList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses {@code userInput} into a {@code WordContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new WordContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 22,
      "chrischenhui": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import static seedu.address.logic.commands.app.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        model \u003d new ModelManager(getTypicalWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWordBank(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "chrischenhui": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEANING_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FLYING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FLYING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPerson \u003d new CardBuilder(BUTTERFREE).withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // multiple words - last word accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_ABRA + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // multiple meanings - last meaning accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_BUTTERFREE + MEANING_DESC_ABRA + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_PSYCHIC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPersonMultipleTags \u003d new CardBuilder(BUTTERFREE).withTags(VALID_TAG_BUG, VALID_TAG_FLYING)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card expectedPerson \u003d new CardBuilder(ABRA).withTags().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseSuccess(parser, WORD_DESC_ABRA + MEANING_DESC_ABRA, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // missing word prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, MEANING_DESC_ABRA + TAG_DESC_PSYCHIC, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // missing meaning prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_ABRA + TAG_DESC_PSYCHIC, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_BUG, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // invalid word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_BUTTERFREE + INVALID_MEANING_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING, Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, WORD_DESC_ABRA + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_PSYCHIC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, INVALID_WORD_DESC + INVALID_MEANING_DESC, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + WORD_DESC_BUTTERFREE + MEANING_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + TAG_DESC_BUG + TAG_DESC_FLYING,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48,
      "chrischenhui": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrischenhui": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEANING_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WORD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BUG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_ABRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_ABRA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WORD_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, VALID_WORD_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"-5\" + WORD_DESC_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"0\" + WORD_DESC_ABRA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC, Word.MESSAGE_CONSTRAINTS); // invalid word"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MEANING_DESC, Meaning.MESSAGE_CONSTRAINTS); // invalid meaning"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // invalid word followed by valid meaning"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + MEANING_DESC_ABRA, Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // valid word followed by invalid meaning."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + WORD_DESC_ABRA + INVALID_MEANING_DESC, Meaning.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PSYCHIC + TAG_DESC_BUG + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_PSYCHIC + TAG_EMPTY + TAG_DESC_BUG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_PSYCHIC + TAG_DESC_BUG, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WORD_DESC + INVALID_MEANING_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                Word.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + WORD_DESC_ABRA + TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_ABRA).withTags(VALID_TAG_PSYCHIC).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // word"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + WORD_DESC_ABRA;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withWord(VALID_WORD_ABRA).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        // meaning"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withMeaning(VALID_MEANING_ABRA).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_BUG;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MEANING_DESC_ABRA"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + TAG_DESC_BUG + MEANING_DESC_ABRA + TAG_DESC_BUG"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + MEANING_DESC_BUTTERFREE + TAG_DESC_PSYCHIC;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withTags(VALID_TAG_BUG, VALID_TAG_PSYCHIC)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MEANING_DESC + MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_MEANING_DESC + WORD_DESC_BUTTERFREE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                + MEANING_DESC_BUTTERFREE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "                .withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 38,
      "jascxx": 19,
      "chrischenhui": 1,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                new FindCommand(new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 2,
      "chrischenhui": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String INVALID_WORD \u003d \" \\n \\t \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String INVALID_MEANING \u003d \"    \\n\\n\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_WORD \u003d \"Bulbasaur\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_MEANING \u003d \"There is a plant seed on its back right from the day this Pokémon \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"is born. The seed slowly grows larger.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"grass\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"water\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWord((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWord(INVALID_WORD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseWord_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(VALID_WORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_WORD + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Word expectedWord \u003d new Word(VALID_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedWord, ParserUtil.parseWord(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMeaning((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMeaning(INVALID_MEANING));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning expectedMeaning \u003d new Meaning(VALID_MEANING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedMeaning, ParserUtil.parseMeaning(VALID_MEANING));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void parseMeaning_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_MEANING + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Meaning expectedMeaning \u003d new Meaning(VALID_MEANING);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedMeaning, ParserUtil.parseMeaning(phoneWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 30,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WordBankParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card person \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(CardUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card person \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + CardUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(new FindCommand(new WordContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 14,
      "chrischenhui": 8,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.WordContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(new WordBank(), new WordBank(modelManager.getWordBank()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setWordBankFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager.setWordBankFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(path, modelManager.getWordBankFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCard(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(modelManager.hasCard(ABRA));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager.addCard(ABRA);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(modelManager.hasCard(ABRA));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCardList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank wordBank \u003d new WordBankBuilder().withCard(ABRA).withCard(BUTTERFREE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank differentWordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(wordBank, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWordBank, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String[] keywords \u003d ABRA.getWord().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager.updateFilteredCardList(new WordContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(wordBank, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        modelManager.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(wordBank, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 25,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WordBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.ReadOnlyWordBank;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final WordBank wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(Collections.emptyList(), wordBank.getCardList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData_withValidReadOnlyWordBank_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank newData \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(newData, wordBank);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void resetData_withDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // Two Cards with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e newCards \u003d Arrays.asList(ABRA, editedAbra);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStub newData \u003d new WordBankStub(newCards);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e wordBank.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.hasCard(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardNotInWordBank_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(wordBank.hasCard(ABRA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardInWordBank_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(ABRA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(wordBank.hasCard(ABRA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void hasCard_cardWithSameIdentityFieldsInWordBank_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(ABRA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(wordBank.hasCard(editedAbra));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wordBank.getCardList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "     * A stub ReadOnlyWordBankList whose cards list can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private static class WordBankStub implements ReadOnlyWordBank {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBankStub(Collection\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            this.cards.setAll(cards);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public Card getCard(Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        public int size() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            return cards.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 53,
      "chrischenhui": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/CardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e card.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void isSameMeaning() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.isSameMeaning(ABRA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.isSameMeaning(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different word -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.isSameMeaning(editedAbra));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same word, different meanings -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.isSameMeaning(editedAbra));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getHint() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String wordStr \u003d \"Pikachu\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String meaningStr \u003d \"PIKA PIKA\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card card \u003d new Card(new Word(wordStr), new Meaning(meaningStr), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c wordStr.length(); ++i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Hint hint \u003d card.getHint();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            assertTrue(wordStr.charAt(hint.index.getZeroBased()) \u003d\u003d hint.letter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(card.getHint() \u003d\u003d null); // hints exhausted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card abraCopy \u003d new CardBuilder(ABRA).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.equals(abraCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(ABRA.equals(ABRA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different Card -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(BUTTERFREE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        editedAbra \u003d new CardBuilder(ABRA).withTags(VALID_TAG_BUG).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(ABRA.equals(editedAbra));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/HintSupplierTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class HintSupplierTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new HintSupplier(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getRemainingHints() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String name \u003d \"Sudowoodo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        HintSupplier hintSupplier \u003d new HintSupplier(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hintSupplier.getRemainingHints(), name.length());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void get() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String name \u003d \"Sudowoodo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        HintSupplier hintSupplier \u003d new HintSupplier(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        while (hintSupplier.getRemainingHints() \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Hint hint \u003d hintSupplier.get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            assertEquals(name.charAt(hint.index.getZeroBased()), (char) hint.letter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/HintTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class HintTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(null, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(\u0027d\u0027, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Hint(null, Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Character validChar \u003d \u0027C\u0027;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Character validChar2 \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index validIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Index validIndex2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint \u003d new Hint(validChar, validIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hint, hint);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint2 \u003d new Hint(validChar, validIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(hint, hint2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint3 \u003d new Hint(validChar2, validIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(hint, hint3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Hint hint4 \u003d new Hint(validChar, validIndex2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(hint, hint4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/MeaningTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class MeaningTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meaning(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_invalidMeaning_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String emptyMeaning \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(emptyMeaning));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        String whiteSpace \u003d \"   \\t \\n \\r  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(whiteSpace));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder tooLongDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c Meaning.MAX_LEN + 1; ++i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            tooLongDescription.append(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Meaning(tooLongDescription.toString()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void isValidMeaning() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Meaning.isValidMeaning(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Meaning.isValidMeaning(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Meaning.isValidMeaning(\" \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"I need help.\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"Ineedhelp.\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(\"-\")); // one character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder maxLenDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (int i \u003d 0; i \u003c Meaning.MAX_LEN; ++i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            maxLenDescription.append(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Meaning.isValidMeaning(maxLenDescription.toString())); // maximum length"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/UniqueCardListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEANING_BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BUG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PSYCHIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WORD_BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.UniqueCardList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.contains(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(uniqueCardList.contains(ABRA));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.contains(ABRA));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void contains_cardWithSameMeaningInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withWord(VALID_WORD_BUTTERFREE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .withTags(VALID_TAG_PSYCHIC)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedAbra));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.add(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.add(ABRA));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(null, ABRA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCard(ABRA, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_targetCardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.setCard(ABRA, ABRA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardIsSameName_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, ABRA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasSameName_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Card editedAbra \u003d new CardBuilder(ABRA).withMeaning(VALID_MEANING_BUTTERFREE).withTags(VALID_TAG_BUG)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, editedAbra);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(editedAbra);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasDifferentName_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCard(ABRA, BUTTERFREE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCard_editedCardHasNonUniqueName_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCard(ABRA, BUTTERFREE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e uniqueCardList.remove(ABRA));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.remove(ABRA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((UniqueCardList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCardList.setCards((List\u003cCard\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e cardList \u003d Collections.singletonList(BUTTERFREE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.setCards(cardList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        expectedUniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(ABRA, ABRA);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e uniqueCardList.setCards(listWithDuplicateCards));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e uniqueCardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCard_indexOutOfBound_throwsIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e uniqueCardList.get(Index.fromZeroBased(0)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e uniqueCardList.get(Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getCard_indexInBound_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.get(Index.fromZeroBased(0)).equals(ABRA));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.get(Index.fromZeroBased(1)).equals(BUTTERFREE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(ABRA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        uniqueCardList.add(BUTTERFREE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(uniqueCardList.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 199
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/WordContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicate \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate secondPredicate \u003d new WordContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate firstPredicateCopy \u003d new WordContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bobby\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Caroline\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordContainsKeywordsPredicate predicate \u003d new WordContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // Keywords match meaning, but does not match word"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        predicate \u003d new WordContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withWord(\"Alice\").withMeaning(\"Main Street\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 21,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/WordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Word(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Word(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Word.isValidWord(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Word.isValidWord(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(Word.isValidWord(\" \\n \\t   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        // todo dont know if this should be allowed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        //assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        //assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(Word.isValidWord(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 15,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/game/GameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.testutil.WordBankBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GameTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void makeGuess() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Makes correct guess; guess Abra as Abra"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertTrue(game.checkGuess(new Guess(ABRA.getWord().toString())));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Makes wrong guess; guess Abra as Butterfree"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertFalse(game.checkGuess(new Guess(BUTTERFREE.getWord().toString())));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // When a guess is made after game has already ended"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "            game.moveToNextCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            game.checkGuess(new Guess(BUTTERFREE.getWord().toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void nullWordBankPassedIntoConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Game(wb));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void moveToNextCard() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(CHARIZARD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(DITTO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Current card is BUTTERFREE now."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(game.getCurrQuestion(), BUTTERFREE.getMeaning().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Current card is NOT ABRA."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(game.getCurrQuestion(), ABRA.getMeaning().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Current card is DITTO now."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(game.getCurrQuestion(), DITTO.getMeaning().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Current card is NOT CHARIZARD now."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertNotEquals(game.getCurrQuestion(), CHARIZARD.getMeaning().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game should be over now."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e game.getCurrQuestion());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void isOver() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has not ended, 2 cards left."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(false, game.isOver());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has not ended, 1 card left."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(false, game.isOver());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Game has ended, 0 card left."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertEquals(true, game.isOver());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void showCurrQuestion() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBankBuilder wordBankBuilder \u003d new WordBankBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(ABRA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        wordBankBuilder.withCard(BUTTERFREE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        WordBank wb \u003d wordBankBuilder.build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Game game \u003d new Game(wb);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // ABRA card shows correctly."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(ABRA.getMeaning().toString(), game.getCurrQuestion());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // BUTTERFREE card shows correctly."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(BUTTERFREE.getMeaning().toString(), game.getCurrQuestion());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        game.moveToNextCard();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        // Attempting to show current card\u0027s meaning when game already ended"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e game.getCurrQuestion());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 13,
      "kohyida1997": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/game/GuessTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "package seedu.address.model.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "public class GuessTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void nullStringPassedIntoConstructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        String userString \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Guess(userString));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    public void matches() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word lowercaseWord \u003d new Word(\"abra\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess lowercaseGuess \u003d new Guess(\"abra\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(lowercaseGuess.matches(lowercaseWord));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word uppercaseWord \u003d new Word(\"ABRA\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess uppercaseGuess \u003d new Guess(\"ABRA\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(uppercaseGuess.matches(uppercaseWord));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word someWord \u003d new Word(\"Ditto\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess wrongGuess \u003d new Guess(\"Charizard\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertFalse(wrongGuess.matches(someWord));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Word mixedCaseWord \u003d new Word(\"chariZARD\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        Guess mixedCaseGuess \u003d new Guess(\"CHARIzard\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "        assertTrue(mixedCaseGuess.matches(mixedCaseWord));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohyida1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohyida1997": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/GameDataPointTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameDataPointTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void createSkipData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e GameDataPoint.createSkipData(-1)); // invalid millis"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void createGuessData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e GameDataPoint.createGuessData(null, 1)); // null guess"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(AssertionError.class, ()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            -\u003e GameDataPoint.createGuessData(new Guess(\"abc\"), -1)); // invalid millis"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getMillisTaken() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createSkipData(1).getMillisTaken(), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(new Guess(\"abc\"), 1).getMillisTaken(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getGuess() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createSkipData(1).getGuess(), Optional.empty()); // skip data does not have a guess."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Guess g1 \u003d new Guess(\"abc\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        Guess g2 \u003d new Guess(\"abc\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(g1, 1).getGuess().get(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                g1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(GameDataPoint.createGuessData(g1, 1).getGuess().get(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                g2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/statistics/GameStatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.ABRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.BUTTERFREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.CHARIZARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.DITTO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.EEVEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.testutil.TypicalCards.FLAREON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.game.Guess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class GameStatisticsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_nullTitle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GameStatistics(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void constructor_validString_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        new GameStatistics(\"abc\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void addDataPoint() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics gameStats \u003d new GameStatistics(\"pokemon\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(100), ABRA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 101), ABRA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(1, gameStats.getData().size()); // 2 data points in 1 card."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(100), BUTTERFREE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(2, gameStats.getData().size()); // 2 different cards"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getScore() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics gameStats \u003d new GameStatistics(\"pokemon\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 101), ABRA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 101),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(100, gameStats.getScore());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics gameStats1 \u003d new GameStatistics(\"pokemon\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createSkipData(10), ABRA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats1.addDataPoint(GameDataPoint.createSkipData(10), BUTTERFREE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0, gameStats1.getScore());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics gameStats2 \u003d new GameStatistics(\"pokemon\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats2.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10), ABRA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats2.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(50, gameStats2.getScore());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public void getTimeTakenSec() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        GameStatistics gameStats \u003d new GameStatistics(\"pokemon\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"abra\"), 10), ABRA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 10),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                BUTTERFREE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.02, gameStats.getTimeTakenSec(), 1e-9);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(11), CHARIZARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createSkipData(12), DITTO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.043, gameStats.getTimeTakenSec(), 1e-9);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 21),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                EEVEE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        gameStats.addDataPoint(GameDataPoint.createGuessData(new Guess(\"butterfree\"), 31),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                FLAREON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(0.095, gameStats.getTimeTakenSec(), 1e-9);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.card.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.card.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonAdaptedCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 103,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableWordBankTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonSerializableWordBankTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank wordBankFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank typicalPersonsWordBank \u003d TypicalCards.getTypicalWordBank();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        assertEquals(wordBankFromFile, typicalPersonsWordBank);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 13,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonWordBankStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.wordbank.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class JsonWordBankStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyWordBankList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        WordBank original \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//        ReadOnlyWordBankList readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        original.addCard(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        original.addCard(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertEquals(original, new WordBank(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//    private void saveAddressBook(ReadOnlyWordBankList addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new WordBank(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 103,
      "chrischenhui": 4,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import static seedu.address.testutil.TypicalCards.getTypicalWordBank;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "//import seedu.address.model.wordbank.ReadOnlyWordBankList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "//import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        WordBank original \u003d getTypicalWordBank();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "    //        ReadOnlyWordBankList retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertEquals(original, new WordBank(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 36,
      "chrischenhui": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String DEFAULT_WORD \u003d \"Pikachu\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String DEFAULT_MEANING \u003d \"This forest-dwelling Pokémon stores electricity in its cheeks, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            + \"so you\u0027ll feel a tingly shock if you touch it.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Word word;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Meaning meaning;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        word \u003d new Word(DEFAULT_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        meaning \u003d new Meaning(DEFAULT_MEANING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        word \u003d cardToCopy.getWord();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        meaning \u003d cardToCopy.getMeaning();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(cardToCopy.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the {@code Word} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withWord(String word) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.word \u003d new Word(word);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Card} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Sets the {@code Meaning} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public CardBuilder withMeaning(String meaning) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.meaning \u003d new Meaning(meaning);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new Card(word, meaning, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEANING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class for Card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class CardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns an add command string for adding the {@code card}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getAddCommand(Card card) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getCardDetails(card);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the part of command string for the given {@code card}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getCardDetails(Card card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(PREFIX_WORD + card.getWord().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        sb.append(PREFIX_MEANING + card.getMeaning().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        card.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        descriptor.getWord().ifPresent(name -\u003e sb.append(PREFIX_WORD).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        descriptor.getMeaning().ifPresent(phone -\u003e sb.append(PREFIX_MEANING).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 54,
      "chrischenhui": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrischenhui"
        },
        "content": "import seedu.address.logic.commands.app.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Meaning;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.card.Word;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " * A utility class to help with building EditCardDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    private EditCommand.EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder(EditCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Returns an {@code EditCommand.EditCardDescriptor} with fields containing {@code card}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setWord(card.getWord());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setMeaning(card.getMeaning());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setTags(card.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Sets the {@code Word} of the {@code EditCommand.EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withWord(String word) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setWord(new Word(word));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Sets the {@code Meaning} of the {@code EditCommand.EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withMeaning(String meaning) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setMeaning(new Meaning(meaning));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCommand.EditCardDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    public EditCommand.EditCardDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sreesubbash"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sreesubbash": 61,
      "jascxx": 4,
      "chrischenhui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static Card getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return model.getFilteredCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card ABRA \u003d new CardBuilder().withWord(\"Abra\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It sleeps eighteen hours a day, but employs telekinesis even while sleeping.\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"psychic\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card BUTTERFREE \u003d new CardBuilder().withWord(\"Butterfree\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Its wings are covered with poisonous dust. If you see one flapping its wings, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"be careful not to inhale any of the dust.\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"bug\", \"flying\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card CHARIZARD \u003d new CardBuilder().withWord(\"Charizard\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It flies around the sky in search of powerful opponents. It breathes fire of such \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"great heat that it melts anything. However, it never turns its fiery breath on any opponent \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"weaker than itself.\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"fire\", \"flying\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card DITTO \u003d new CardBuilder().withWord(\"Ditto\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Its transformation ability is perfect. However, if it is made to laugh, it can\u0027t \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"maintain its disguise.\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"normal\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card EEVEE \u003d new CardBuilder().withWord(\"Eevee\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"Possessing an unbalanced and unstable genetic makeup, it conceals many possible \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"evolutions\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"normal\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card FLAREON \u003d new CardBuilder().withWord(\"Flareon\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"It fluffs out its fur collar to cool down its body temperature, which can reach \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"1,650 degrees.\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"fire\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final Card GEODUDE \u003d new CardBuilder().withWord(\"Geodude\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withMeaning(\"At rest, it looks just like a rock. Carelessly stepping on it will make it swing \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jascxx"
        },
        "content": "                    + \"its fists angrily.\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .withTags(\"ground\", \"rock\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String KEYWORD_MATCHING_EE \u003d \"ee\"; // A keyword that matches ee"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private TypicalCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Returns a {@code WordBank} with all the typical cards."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static WordBank getTypicalWordBank() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        WordBank wb \u003d new WordBank();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        for (Card card : getTypicalCards()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jascxx"
        },
        "content": "            wb.addCard(card);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wb;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ABRA, BUTTERFREE, CHARIZARD, DITTO, EEVEE, FLAREON, GEODUDE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WordBankBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jascxx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jascxx"
        },
        "content": "import seedu.address.model.wordbank.WordBank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jascxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * A utility class to help with building WordBank objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jascxx"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jascxx"
        },
        "content": " *     {@code WordBank wb \u003d new WordBankBuilder().withCard(CARD).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jascxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jascxx"
        },
        "content": "public class WordBankBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    private WordBank wordBank;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank \u003d new WordBank();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder(WordBank wordBank) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     * Adds a new {@code Card} to the {@code WordBank} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jascxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBankBuilder withCard(Card person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        wordBank.addCard(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jascxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    public WordBank build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jascxx"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jascxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jascxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jascxx": 34
    }
  }
]
