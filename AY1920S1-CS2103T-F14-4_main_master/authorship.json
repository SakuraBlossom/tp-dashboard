[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Deliveria - a delivery task manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-F14-4/main[image:https://travis-ci.com/AY1920S1-CS2103T-F14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "* See below for a detailed introduction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The code base is developed based on the `AddressBook-Level3` project by https://se-education.org[SE-EDU initiative]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tysng": 5,
      "-": 27
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria was developed by the AY1920S1-CS2103T-F14-4 team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Chee You"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::cheeyou.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/cheeyou[github]][\u003c\u003ccheeyou#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Kris Kunthamas"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::argvampir.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[https://github.com/ArgVampir[github]][\u003c\u003cargvampir#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Sam Yong Jek"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::samyj2606.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/SamYJ2606[github]][\u003c\u003csamyj2606#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Song Tianyi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::tysng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/tysng[github]][\u003c\u003ctysng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Tan Jun Bang"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::junnbang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "{empty}[http://github.com/junnbang[github]][\u003c\u003cjunnbang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "junnbang": 23,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "* *Email us* : You can also reach us at `tsong1 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "tysng": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Team Team CS2103T-F14-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* has a need to manage a significant number of delivery tasks and drivers"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "*Value proposition*: manage delivery tasks faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all unfinished delivery tasks |know which tasks have yet to be delivered"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |view all delivered tasks |keep track of all delivered tasks in the past month"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery manager |sort and display delivery tasks by their starting time |view pending tasks in an orderly manner"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* * *` |Delivery Manager |search for tasks by a keyword |find a task more easily"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`* *` |Delivery Manager |toggle dark or light theme for the interface |the UI can change according to user preference"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "|`*` |Delivery Manager |see the image of the drivers |can identify them easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junnbang"
        },
        "content": "(For all use cases below, the *System* is the `Deliveria` and the *Actor* is the `Delivery Manager`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Driver"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  Delivery Manager requests the list of drivers"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria shows a list of drivers"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Delivery Manager requests to delete a specific driver in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4.  Deliveria deletes the driver"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a new task"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1.  User creates a delivery task"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2.  Deliveria adds the task to a list of delivery tasks"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3.  Deliveria prints to assure that the task is added"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 1a. Task given in invalid format"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a1. Deliveria shows an error message"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 1a2. Use case resumes at step 1"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d\u003d Use Case: Assign Driver to delivery task"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. Delivery Manager view the incomplete task list."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. Deliveria shows the incomplete task list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. User assign a driver to one of the task"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4. Deliveria shows the confirmation of driver being assigned to the task."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junnbang"
        },
        "content": "5. Deliveria indicate the incomplete task as On-going."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* 3a. If driver is unavailable to take up the task"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a1. Deliveria prompts that driver is busy"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** 3a2. Deliveria shows the available time of the driver"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junnbang"
        },
        "content": "+"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to maintain up to 100 drivers and 1000 tasks without performance degradation."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should comply with the company\u0027s privacy regulations and safely store the data files."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tysng"
        },
        "content": ".  Should be able to scale quickly and adaptable for different companies."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tysng"
        },
        "content": "Windows 10, MacOS Mojave, Ubuntu"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 2,
      "cheeyou": 2,
      "junnbang": 51,
      "ArgVampir": 6,
      "tysng": 6,
      "-": 405
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "\u003d Deliveria - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Group Name: `CS2103-F14-4`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "By: `Chee You, Rushagrid Kunthamas, Sam Yong Jek, Song Tianyi, Tan Jun Bang`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently. While it consists of a _Graphical User Interface_ (GUI) that is user-friendly, Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ".Draft UI mockup"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "image::/images/Ui.png[Ui]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "[caption\u003d\"Figure 1: \",link\u003d\"/images/Ui.png\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Download the latest release deliveria.jar https://github.com/AY1920S1-CS2103T-F14-4/main/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ". Some example commands you can try"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Lists all contacts: `list`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Adds a contact named John Doe to the Address Book: `Add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Deletes the 3rd contact shown in the current list: `Delete 3`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* Exits the app: `exit`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e  for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* [action] [parameter 1] [parameter 2] [parameter 3]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Parameter consists of a delimiter and a word. For example, to tag a person on index 1: `edit 1 t/ College`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Commands are case sensitive"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "* Order of parameter is can be reordered freely."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "List all available commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003d\u003d\u003d View delivery tasks: `view`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Lists all delivery tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Format: `list delivery`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "\u003d\u003d\u003d Get delivery details: `read`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Retrieves the details of 3rd task shown in the current list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "Format: `list delivery`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Delete delivery tasks: `delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Deletes an existing task shown in the current list +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `delete delivery INDEX`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Deletes the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Update driver field for a delivery task: `update`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Attach an existing task shown in the current list to Driver: `DriverName` +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `update delivery INDEX n/DriverName`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Attaches the task at the specified `INDEX` to Driver: `DriverName`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* `update delivery 3 n/John Doe`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d View list of drivers: `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "List all drivers +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `list drivers`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "\u003d\u003d\u003d Get driver details: `read`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Retrieves the details of an existing driver shown in current list +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "Format: `read driver INDEX`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "* Retrives the details of driver at specified `INDEX`. The index refers to the index number shown in the displayed driver list. The index *must be a positive integer* 1,2,3,..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Delete a driver : `delete driver`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "Deletes the specified driver from the driver list. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `delete driver INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Deletes the driver at the specified `INDEX`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The driver cannot be deleted if it\u0027s already assigned to a task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The index refers to the index numbers shown in the displayed driver\u0027s list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, .."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "`delete driver 2` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "Deletes the 2nd driver in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Editing a driver : `update driver`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits an existing driver in the address book. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `update driver INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Edits the driver at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Assign a task to a driver: `assign`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "Assign an existing task a driver. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": "Format: `assign TASK_INDEX DRIVER_INDEX`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "* If the driver is not available for that task, an error message will be shown."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "* The indices refer to the numbers shown in the displayed lists."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "* `assign 1 3` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "Assigns the task at index 1 to the driver at index 3."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: Where is the saved file at? +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*:  It is located in the same folder where the .jar file is. There will be a folder called `data`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "*Q*: How do I know the list of commands? +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": "*A*: The `help` command will give a list of available commands."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 17,
      "cheeyou": 6,
      "junnbang": 13,
      "ArgVampir": 11,
      "tysng": 50,
      "-": 97
    }
  },
  {
    "path": "docs/team/argvampir.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Kris Kunthamas - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/cheeyou.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/junnbang.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Tan Jun Bang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/samyj2606.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Chee you - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/team/tysng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d Song Tianyi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: Deliveria"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is a *desktop application* that allows a *delivery manager* to *manage and assign delivery tasks* efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "While it consists of a _Graphical User Interface_ (GUI) that is user-friendly,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Deliveria is *optimized for those who prefer* to work with a _Command Line Interface_ (CLI) which allows fast management of the delivery tasks in an organisation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "junnbang": 74
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tysng"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tysng"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tysng"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tysng"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tysng"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tysng"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tysng"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tysng"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tysng"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tysng"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tysng"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tysng"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tysng"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tysng"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tysng"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tysng"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tysng"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tysng"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tysng"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tysng"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tysng"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tysng"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tysng"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tysng"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tysng"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tysng"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tysng"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tysng"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tysng"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tysng"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tysng"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tysng"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tysng"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tysng"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tysng"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tysng"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tysng"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tysng"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tysng"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tysng"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tysng"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tysng"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tysng"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tysng"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tysng"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tysng"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tysng"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tysng"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tysng"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tysng"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tysng"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tysng"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tysng"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tysng"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tysng"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tysng"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tysng"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tysng"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tysng"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tysng"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tysng"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tysng"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tysng"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tysng"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tysng"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tysng"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tysng"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tysng"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tysng"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tysng"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tysng"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tysng"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tysng"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tysng"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tysng"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tysng"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tysng"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tysng"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tysng"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tysng"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tysng"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tysng"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tysng"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tysng"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tysng"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tysng"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tysng"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tysng"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tysng"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tysng"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tysng"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tysng"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tysng"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tysng"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "tysng": 425
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Represents a Description of goods."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "            \"Description allows all types of character and should not be over 255 characters in length.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^.{1,255}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Constructs a valid description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param description A valid Goods description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Returns true if a given string is valid ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DriverManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.person.Driver;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Represents the in-memory driver model of the address book data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class DriverManager extends ModelManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public DriverManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super(addressBook, userPrefs);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public DriverManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean hasDriver(Driver driver) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return super.hasPerson(driver);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void deleteDriver(Driver target) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.deletePerson(target);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void addDriver(Driver driver) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.addPerson(driver);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setDriver(Driver driver, Driver editedDriver) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.setPerson(driver, editedDriver);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EventTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": " * A EventTime contains a start time and an end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class EventTime implements Comparable\u003cEventTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final DateTimeFormatter COMPACT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final DateTimeFormatter DISPLAY_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime start;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private LocalTime end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public EventTime(LocalTime start, Duration duration) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.end \u003d start.plus(duration);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Builds duration from two text representations of time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * This methods appends zeros to the front of the input, if"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * the input is less than 4 digits. For example, \"900\" will be changed into \"0900\"."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param startTime start time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param endTime end time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration with the specified start and end time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static EventTime parse(String startTime, String endTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        // append front with zero"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String first \u003d String.format(\"%04d\", Integer.parseInt(startTime));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        String second \u003d String.format(\"%04d\", Integer.parseInt(endTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return new EventTime(LocalTime.parse(first, COMPACT_TIME_FORMAT), LocalTime.parse(second, COMPACT_TIME_FORMAT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the two durations overlap."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param other the other duration"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if they overlap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean overlaps(EventTime other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime early \u003d this.compareTo(other) \u003e 0 ? other : this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime late \u003d this.compareTo(other) \u003e 0 ? this : other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return early.getEnd().compareTo(late.getStart()) \u003e 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getEnd() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public LocalTime getStart() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Duration.between(this.start, this.end);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Outputs the duration as a string, in HH:mm format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return the duration in string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String to24HrString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.toString(), end.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return String.format(\"%s - %s\", start.format(DISPLAY_TIME_FORMAT), end.format(DISPLAY_TIME_FORMAT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": "                || (obj instanceof EventTime // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.start.equals(((EventTime) obj).start)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 this.end.equals(((EventTime) obj).end)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Objects.hash(this.start, this.end);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public int compareTo(EventTime o) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return !this.getStart().equals(o.getStart())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "                ? this.getStart().compareTo(o.getStart())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "                : this.getEnd().compareTo(o.getEnd());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Goods.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " * Deals with the description of the product to be delivered."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "public class Goods {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public Goods(Description description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * Edits the Name of the goods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     * @param newDescription The new name to be changed into."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public void setName(Description newDescription) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "        return description.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArgVampir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArgVampir": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class Customer extends Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private static int idCount \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        id \u003d idCount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        idCount++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getIdCount() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return idCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CustomerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * A list of customers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "public class CustomerList extends UniquePersonList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        setPerson(target, editedCustomer);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void setCustomers(CustomerList replacement) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        setPersons(replacement);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void addCustomer(Customer toAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        add(toAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public boolean containCustomer(Customer toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        return contains(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    public void removeCustomer(Customer toRemove) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "        remove(toRemove);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SamYJ2606"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SamYJ2606": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Driver.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Represents a Driver available for work."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Gurantees: details are present and not null, field values are validated, id is immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class Driver extends Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private static int idCount \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Driver (Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        id \u003d idCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        idCount++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public int getIdCount() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return idCount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Returns a string representation of the driver, with identity fields visible to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @return string representation of driver"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        StringBuilder driverBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        driverBuilder.append(\" Driver stats: \\n\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    .append(\" id: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    .append(getId())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "                    .append(super.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return driverBuilder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DriverList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * A list of drivers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheeyou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "public class DriverList extends UniquePersonList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Check the presence of a Driver in the DriverList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public boolean containsDriver(Driver toCheck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        return contains(toCheck);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Adds a Driver to the DriverList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param toAdd driver to be added to DriverList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void addDriver(Driver toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.add(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Removes a Driver from the DriverList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param toRemove Driver to be removed from DriverList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void removeDriver(Driver toRemove) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.remove(toRemove);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Replaces an existing Driver from the DriverList with another Driver"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param target       Driver to be replaced"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param editedDriver new Driver"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setDriver(Driver target, Driver editedDriver) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        super.setPerson((Person) target, (Person) editedDriver);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * Replace the entire DriverList with a new DriverList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     * @param replacement new DriverList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    public void setDrivers(DriverList replacement) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        setPersons(replacement);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheeyou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.NavigableSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Manages the availability of the owner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_CONFLICT \u003d \"The duration conflicts with the existing schedule.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_OUTSIDE_WORKING_HOURS \u003d \"The person does not work during the specified time.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE \u003d \"No task assigned\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String START_WORK_TIME \u003d \"0900\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private static final String END_WORK_TIME \u003d \"1800\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private NavigableSet\u003cEventTime\u003e schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private EventTime workingHours;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Constructs a schedule within the working hours."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.schedule \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        this.workingHours \u003d EventTime.parse(START_WORK_TIME, END_WORK_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime beforeWorkingHours \u003d EventTime.parse(\"0000\", START_WORK_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime afterWorkingHours \u003d EventTime.parse(END_WORK_TIME, \"2359\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(beforeWorkingHours);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(afterWorkingHours);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Blocks off the owner\u0027s schedule with the given duration."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime incoming task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @throws SchedulingException when the duration is outside working hours, or conflicts with the existing schedule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public void add(EventTime eventTime) throws SchedulingException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isInWorkingHours(eventTime)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_OUTSIDE_WORKING_HOURS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!isAvailable(eventTime)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(MESSAGE_SCHEDULE_CONFLICT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!schedule.add(eventTime)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": "            throw new SchedulingException(\"An unknown error has occurred.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "    // check within"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Finds the earliest available EventTime has the same length of proposed, and fits in the schedule."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param proposed a proposed time slot"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return Optional of the earliest EventTime that can fit in the schedule; if the proposed time is already the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * earliest, return an Optional of the proposed time; if no slot available, return an empty Optional."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public Optional\u003cEventTime\u003e findFirstAvailableSlot(EventTime proposed) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Duration length \u003d proposed.getDuration();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (!this.isInWorkingHours(proposed)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime lastCandidate \u003d schedule.ceiling(proposed);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": "        NavigableSet\u003cEventTime\u003e candidates \u003d schedule.headSet(lastCandidate, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Iterator\u003cEventTime\u003e iter \u003d candidates.iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime prev \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if (iter.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d iter.next();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tysng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tysng"
        },
        "content": "            EventTime head \u003d iter.next();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tysng"
        },
        "content": "            boolean canFit \u003d Duration.between(prev.getEnd(), head.getStart()).compareTo(length) \u003e\u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tysng"
        },
        "content": "            if (canFit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tysng"
        },
        "content": "                return Optional.of(new EventTime(prev.getEnd(), length));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tysng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tysng"
        },
        "content": "            prev \u003d head;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Removes the scheduled event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime an existing event in the owner\u0027s schedule"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true when the event exists in the schedule, and removed successfully"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public boolean remove(EventTime eventTime) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule.remove(eventTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isInWorkingHours(EventTime eventTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return (eventTime.getEnd().compareTo(eventTime.getStart()) \u003e 0)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 (eventTime.getStart().compareTo(workingHours.getStart()) \u003e\u003d 0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tysng"
        },
        "content": "                \u0026\u0026 (eventTime.getEnd().compareTo(workingHours.getEnd()) \u003c\u003d 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Checks whether the incoming duration clashes with the existing schedule."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tysng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @param eventTime task duration"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return true if the duration clashes"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tysng"
        },
        "content": "    private boolean isAvailable(EventTime eventTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime previous \u003d schedule.floor(eventTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime next \u003d schedule.ceiling(eventTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((previous !\u003d null) \u0026\u0026 (eventTime.overlaps(previous))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tysng"
        },
        "content": "        if ((next !\u003d null) \u0026\u0026 (eventTime.overlaps(next))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tysng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tysng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return this.schedule"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .subSet(EventTime.parse(\"0000\", START_WORK_TIME), false,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tysng"
        },
        "content": "                        EventTime.parse(END_WORK_TIME, \"2359\"), false).stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .map(EventTime::to24HrString)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .reduce((str1, str2) -\u003e str1 + \", \" + str2)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tysng"
        },
        "content": "                .orElse(MESSAGE_EMPTY_SCHEDULE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tysng": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/SchedulingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": " * Signals that the incoming duration will result in a scheduling conflict (i.e. outside working hours, or conflict"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": " * with existing schedule)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": "public class SchedulingException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "    public SchedulingException(String e) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.execeptions.TaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a delivery task. All the tasks are represented by a unique id"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * for differentiation."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String goods;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Optional\u003cString\u003e driver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskStatus status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task(int id, String goods) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.goods \u003d goods;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        status \u003d TaskStatus.INCOMPLETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //get methods"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getGoods() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return goods;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskStatus getStatus() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDriver() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!driver.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskException(\"There is no driver assigned to the task.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return driver.get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getCustomer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isAssign() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getDriver() !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //set methods"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setStatus(TaskStatus status) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this.status \u003d\u003d status) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskException(\"Task\u0027s status is already set to \" + status);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setGoods(String goods) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.goods \u003d goods;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDateTime(String dateTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDriver(String driver) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.driver \u003d Optional.of(driver);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.ON_GOING);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes the driver assigned from the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteDriver() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        driver \u003d Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.INCOMPLETE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setCustomer(String customer) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStatus(TaskStatus.COMPLETED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        // If task id is the same, then the task is the same regardless of other variables."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getId() \u003d\u003d task.getId();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return Objects.hash(this);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return getId() + \". \" + getGoods() + \" \" + getStatus();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import seedu.address.model.task.execeptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a list of delivery tasks. The `TaskList` class supports a minimal set"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * of list operations. List sort and filter operations are provided."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static int lastTaskId \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasksUnmodifiable \u003d FXCollections.unmodifiableObservableList(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Optional\u003cTask\u003e foundTask \u003d tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .filter(task -\u003e task.getId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                    .findFirst();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (foundTask.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return foundTask.get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Adds tasks into the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param newTask task to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        lastTaskId++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskToRemove task to be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(taskToRemove);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(taskToRemove)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.remove(taskToRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Updates the details of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param updatedTask task to be updated."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void updateTask(Task updatedTask) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        requireNonNull(updatedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!tasks.contains(updatedTask)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d getTask(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (task \u003d\u003d updatedTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                tasks.set(i, updatedTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasksUnmodifiable;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getSortedList(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .sorted(comparator)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public List\u003cTask\u003e getFilteredList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .filter(predicate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(List\u003cTask\u003e savedTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setAll(savedTasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder strToPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d getTask(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (i \u003d\u003d getSize() - 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                //if this is the last task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                strToPrint.append(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            strToPrint.append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return strToPrint.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * It contains the minimal set of list operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskManager(TaskList savedTasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks \u003d savedTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setTaskList(TaskList savedTasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.setTaskList(savedTasks.getList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //task list operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(Task taskToRemove) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(taskToRemove);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int taskId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return tasks.getTask(taskId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void updateTask(Task taskToUpdate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.updateTask(taskToUpdate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents the status of a delivery task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public enum TaskStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    INCOMPLETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    ON_GOING,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    COMPLETED"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/execeptions/TaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.execeptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error that relates to a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/execeptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "package seedu.address.model.task.execeptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents an error when a tasks is not found in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(\"Task not found.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheeyou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheeyou": 4,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/model/EventTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "class EventTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void parse_nonZeroPaddedInput_returnsCorrectTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime \u003d EventTime.parse(\"920\", \"1600\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(9, eventTime.getStart().getHour());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(20, eventTime.getStart().getMinute());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(16, eventTime.getEnd().getHour());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(0, eventTime.getEnd().getMinute());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_partialOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0101\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_fullOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0001\", \"1900\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0030\", \"0200\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void overlaps_discreteTime_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0010\", \"0100\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0100\", \"0200\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime1.overlaps(eventTime2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertFalse(eventTime2.overlaps(eventTime1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void equals_sameStartEndTime_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime1 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime eventTime2 \u003d EventTime.parse(\"0000\", \"1100\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(eventTime1, eventTime2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tysng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tysng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tysng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.EventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tysng"
        },
        "content": "import seedu.address.model.person.exceptions.SchedulingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tysng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tysng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * Gets a sample schedule with two events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tysng"
        },
        "content": "     * @return sample schedule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tysng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tysng"
        },
        "content": "    Schedule sampleSchedule() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"900\", \"1000\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1200\", \"1500\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tysng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_outsideWorkingHours_throwsSchedulingException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime outsideWorkingHours \u003d EventTime.parse(\"0200\", \"0400\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(outsideWorkingHours));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_OUTSIDE_WORKING_HOURS, thrown.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void add_conflictingTask_throwsSchedulingException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime conflict \u003d EventTime.parse(\"0930\", \"1130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"0900\", \"1000\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(EventTime.parse(\"1100\", \"1400\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Exception thrown \u003d assertThrows(SchedulingException.class, () -\u003e schedule.add(conflict));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_SCHEDULE_CONFLICT, thrown.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void remove_isSuccessful() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime slot \u003d EventTime.parse(\"0900\", \"1000\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.add(slot);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tysng"
        },
        "content": "        schedule.remove(slot);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(Schedule.MESSAGE_EMPTY_SCHEDULE, schedule.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_lateButAvail_returnsEarlySlot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1500\", \"1600\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(EventTime.parse(\"1000\", \"1100\"), sample.findFirstAvailableSlot(oneHourTask).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_schedulingConflict_returnsAvailableSlot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime oneHourTask \u003d EventTime.parse(\"1400\", \"1500\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(EventTime.parse(\"1000\", \"1100\"), sample.findFirstAvailableSlot(oneHourTask).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_alreadyEarliest_returnsItself() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime threeHourTask \u003d EventTime.parse(\"1500\", \"1800\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertEquals(threeHourTask, sample.findFirstAvailableSlot(threeHourTask).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tysng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tysng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tysng"
        },
        "content": "    void findFirstAvailableSlot_notAvailable_returnsEmpty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tysng"
        },
        "content": "        Schedule sample \u003d sampleSchedule();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tysng"
        },
        "content": "        EventTime fourHourTask \u003d EventTime.parse(\"1400\", \"1800\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tysng"
        },
        "content": "        assertTrue(sample.findFirstAvailableSlot(fourHourTask).isEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tysng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tysng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tysng": 85
    }
  }
]
