[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d ORGANice"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "ORGANice is an organ transplant manager. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This desktop application aims to facilitate the matching of organ transplants between patients and organ donors in hospitals. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": "It is written in Java language in an Object-oriented fashion."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Motivation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": "It is undeniable that organ transplantation is one of the most life-changing medical breakthroughs in history. +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "For a transplant to be successful, we need to have an organ that matches the receiver. +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "Since time is precious during transplant, we aim to provide an organ matching system to efficiently match organs from donors to the patients who need them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "This application is intended for hospital admin staff such as doctors and nurses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Installation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "You can download the https://github.com/AY1920S1-CS2103T-T13-1/main/releases/[jar] file and run it from your desktop."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Usage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "You can refer to the \u003c\u003cUserGuide#, User Guide\u003e\u003e for a more detailed explanation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Technology and Framework Used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Java SE Development Kit 11.0.4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Travis"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    Gradle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Screenshot of User Interface"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Build Status"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T13-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-T13-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "\u003d\u003d Coverage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T13-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T13-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* Some parts of ORGANice were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SimNee"
        },
        "content": "* ORGANice is adapted from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "SimNee": 41
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "ORGANice is being developed by team https://github.com/AY1920S1-CS2103T-T13-1[CS2103T-T13-1]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "We are a group of students in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d William Ryan Kusnadi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::williamryank.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/WilliamRyank[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: In charge of overall project coordination."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Chow Jia Ying"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::c-likethis123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/C-likethis123[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensure project deliverables are done in right format and submitted on time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Iskandar Zulkarnaien Bin Suhaini"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::therealravager.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/TheRealRavager[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Tester +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Chua Sim Nee"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::simnee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[https://github.com/SimNee[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: Ensure proper coding standards are followed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "\u003d\u003d\u003d Yip Yen Peng"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "image::yen-peng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "{empty}[http://github.com/Yen-Peng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Role: UI designer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "Responsibilities: In charge of the UI design of the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 1,
      "-": 28,
      "Yen-Peng": 27
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T13-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "* *Email us* : You can also reach us at `iskandar [at] u.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d ORGANice - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "By: `CS2103T-T13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* hospital administrative staff who need to find matches between patients and organ donors"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*Value proposition*: find matches between a patient and potential organ donors faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |add a new patient/donor/doctor |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |delete a patient/donor/doctor |remove entries that I no longer need"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |find a patient/donor/doctor using certain keywords |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |find potential donors for a patient |help the patient find a donor as fast as possible"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |process a patient and a donor |prepare them for the surgery process"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |see list of a particular patient\u0027s potential donors|know list of potential donors for a particular patient"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |see list of all patients/donors/doctors|"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |careless user |edit a patient/donor/doctor|"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |mark a match as done|know that a particular match has undergone a surgery"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * *` |user |sort the potential donors by success rate/priority|match a patient with the best possible donor"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * ` |user |add multiple data using external file|reduce the time to add in a data into the system"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "|`* * ` |user |find a patient/donor/doctor with incomplete keywords|reduce the time to type in the whole keyword"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "(For all use cases below, the *System* is the `ORGANice` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d Use case: Delete patient/donor/doctor"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "1.  User requests to list patients/donors/doctors"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "2.  ORGANice shows a list of patients/donors/doctors"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "3.  User requests to delete a specific patient/donor/doctor in the list"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "4.  ORGANice deletes the patient/donor/doctor"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* 3a. The given NRIC is invalid."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "** 3a1. ORGANice shows an error message."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003d\u003d\u003d Use case: Match a patient and a donor"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "1.  User requests to list potential donors for a particular patient"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "2.  ORGANice shows a list of potential donors for the patient"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "3.  User requests to process the patient with a specified donor"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "4.  ORGANice matches the patient and the specified donor"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "+"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The system should be usable by a novice."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The source code should be \u003c\u003copen-source,open source\u003e\u003e."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ".  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "[[open-source]] Open Source::"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "Software for which the original source code is made freely available and may be redistributed and modified."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 55,
      "-": 388
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d ORGANice - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ":javaURL: https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "By: `CS2103T-T13-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice is a desktop application for hospital administration staff +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "to manage organ transplants."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "With ORGANice, you can easily do the following:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* organise information about patients, doctors, and donors"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* find matches between organ donors and patients"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice is *optimized for those who prefer to work with a Command Line Interface* (CLI) +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice can get your administration tasks done faster than traditional GUI apps. Interested? +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Below is a list of things to do to use the application:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".  Ensure you have Java `11` or above installed in your computer. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If not, install it link:{javaURL}[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".  Download the latest `organice.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".  Copy the jar file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ".  Double-click the file to start the application. The application should appear in a few seconds. The following screenshot +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "is a sample of how the application looks like:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following section describes the list of features and commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "in this application. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The list below how the format of the commands should be interpreted:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* The first word in a command is the command word. The rest of the words are parameters, which"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "are either compulsory or optional. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. in a command `add n/**NAME** p/**PHONE**`, `add` is the command word while `n/**NAME** p/**PHONE**`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "are parameters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Words in bold are the parameters to be supplied by the user +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. in `add **n/NAME**`, `**NAME**` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `[attributes]` refer to all the attributes in the \u003c\u003cList of Attributes\u003e\u003e."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Parameters can be in any order +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. if the command specifies `n/**NAME** p/**PHONE**`, `p/**PHONE** n/**NAME**`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "is also acceptable."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d List of Attributes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "In this application, a person\u0027s data is represented by attributes. Attributes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "refer to personal particulars such as name, type of person and blood type. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following list shows the list of attributes that can be specified for"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "a person and the criteria for valid inputs:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* n/**NAME**: the name of the person"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: alphabets"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* t/**TYPE**: the type of person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: patient/donor/doctor"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* o/**ORGAN**: the type of organs"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, donors"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: kidney"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* b/**BLOODTYPE** - the blood type of the person"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: A/B/AB/O"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* p/**PHONE** - contact number of a person"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors, donors"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: 8 digit number sequence, starting with 6, 8 or 9"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* ic/**NRIC** - NRIC number of a person"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients, doctors and donors"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: any sequence of alphabets and numbers that fulfill these criteria:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** starts with a capital S, F, T, or G"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** followed by a 7 digit number sequence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*** ends with a capital letter"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* pr/**PRIORITY** - priority of the patient, the value of which is determined by a doctor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: high/medium/low"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* a/**AGE** - age of a person"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* d/**DOCTOR** - doctor in charge of a patient"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: NRIC of the doctor"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* tt/**TISSUE TYPE** - the type of tissues"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: patients and donors"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a string of 6 numbers (from 1 - 12), separated by commas"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* exp/**EXPIRY** - expiry date of a donor\u0027s organ"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Applicable to: donors"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Valid input: a valid date in DD-MMM-YYYY format"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Adds a patient, doctor, or donor to ORGANice with the attributes given, depending on what is specified."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "There are two ways to add a person:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Normal Add"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Add with system prompting"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Normal Add"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Normal add refers to specifying all the attributes in the command. To add, type in the following"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "commands to add a person:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding patients: `add t/patient n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** pr/**PRIORITY** ic/**NRIC** d/**DOCTOR** a/**AGE**` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding donors: `add t/donor n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** ic/**NRIC** exp/**EXPIRY** a/**AGE**` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format for adding doctors: `add t/doctor n/**NAME** ic/**NRIC** p/**PHONE**`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After adding a person, ORGANice will display a form which contains the attributes of the person. Press"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "the Enter key to confirm the details."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "View \u003c\u003cList of Attributes\u003e\u003e to find out what each attribute mean."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/patient n/John Doe o/kidney b/A tt/1,2,3,4,5,6 p/98765432 pr/high ic/S9988330G"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "d/S2235456D a/29`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/donor n/Betsy Kim o/kidney b/AB tt/2,5,7,8,9,10 p/99998888 ic/S2345678H"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "exp/23-Nov-2020 a/21`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `add t/doctor n/Lim Chu Kang p/91054444 ic/S5678908D`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Add with system prompting"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "In this mode, the user can add the person\u0027s attributes one by one."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After entering an attribute, the system will prompt the user input for another attribute."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `add t/**TYPE**`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "ORGANice will prompt the user to type in each attribute, one by one."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "In the display box, there will be a form that reflects the attributes typed by the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After the inputs are added, ORGANice will display a template that shows what the user data will look like"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "if the changes are finalised. Press the Enter key to confirm the changes."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Listing persons : `list`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Shows a list of all doctors, donors, or patients in ORGANice, depending on the type of person specified."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `list t/**TYPE**`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `list t/patient`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `list t/doctor`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `list t/donor`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the information of the person with the specified NRIC to the attributes specified."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is up to the user to specify which attributes should be updated. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `edit ic/**NRIC**`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Optional parameters: any parameter from the \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After editing, ORGANice will display a form to show what information will be stored about"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "the person after confirming the changes. The user is free to edit the fields before"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "changes are confirmed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `edit ic/S8732457G p/91234567` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the phone number of the specified patient to be `91234567`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `edit ic/S8732457G n/Betsy Crower b/A` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Edits the name and blood type of the specified donor to be `Betsy Crower` and `A` respectively."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Finds persons whose attributes contain any of the given keywords."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A list of patient/donor/doctor\u0027s information whose attributes partially match the keywords"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "will be displayed. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `find`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* Persons matching at least one attribute will be returned. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "e.g. `a/28 n/Hans Bo` will return people whose attributes are `n/Hans Gruber`, `n/Bo Yang`,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`a/28 n/Jane`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `find t/patient n/Lim` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Returns any patient whose name contains \u0027Lim\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Deletes the specified person from ORGANice."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Match history of a deleted patient or donor with other patients/donors will be removed. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `delete ic/**NRIC**`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`delete ic/S98654322D` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Deletes a person with the NRIC S98654322D in ORGANice."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Detecting matches: `match`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Currently, ORGANice only supports kidney matching. Refer to \u003c\u003cFAQ\u003e\u003e to know the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "procedure for kidney matching."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This command displays a list of patient-donor pairs that passes both the blood type and tissue"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "typing tests. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To get a list of patients and their number of matches, the format is: `match all/`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To get a list of potential matches a patient has with a donor, the format is: `match ic/**NRIC**`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Each match is accompanied by a success rate number,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "which indicates the degree of compatibility"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "between the patient and donor. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This is so that the doctors can schedule for cross matching between the patient-donor pair."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Matches can be sorted. Refer to \u003c\u003cSorting matches\u003e\u003e for more information."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Sorting matches"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Users can specify how they want the patient-donor pairs to be sorted. +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Sorting is done by passing in optional parameters to the `match` command. +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Matches can be sorted according to three categories:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "1. Success rate of match"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "2. Priority of patient"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "3. Date of expiry of donors\u0027 organs"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "To return a sorted list of patient-donor pairs, include the `sort/` flag in the command. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`match ic/**NRIC** sort/[rate/priority/expiry]`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Typing this command causes the application to display a list of matches sorted"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "according to the specified criteria. More than one sorting criteria can be included."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `match ic/S7778983D sort/rate`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `match ic/S7778983D sort/rate, priority, expiry`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Processing potential matches: `processing`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "//TODO: change to shorter term that captures the meaning"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After finding a list of matches, the hospital is free to schedule a cross-matching test between"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "a specific donor and patient. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After typing this command, the following changes occur:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* the patient and donor statuses will be set to \u0027under cross matching\u0027"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* the patient and donor will not be included in matching with other donor and patients until a status update."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `processing icP/**PATIENT NRIC** icD/**DONOR NRIC**` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`processing icP/S6764235G icD/S1234567D`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Mark as done : `done`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "After the hospital has the results of the cross matching test, they can"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "update the results in ORGANice. Cross matching tests have two possible results: pass or fail."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `done icP/**NRIC OF PATIENT** icD/**NRIC OF DONOR** res/[pass/fail]`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "`icP/**NRIC OF PATIENT**` refers to the NRIC of the patient, while `icD/**NRIC OF DONOR**`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "refers to the NRIC of the donor."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The following section outlines what happens based on the two results: +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If the result of the cross matching is a \u0027pass\u0027:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". It is up to the hospital staff to schedule an organ transplant surgery"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "between the patient and donor."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Mark the patient and donor as \u0027done\u0027, based on the command format."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". After running the command, the system removes the patient and donor from the matching pool."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "The patient and donor statuses will be marked to \u0027done\u0027."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "If the result of the cross matching is a \u0027fail\u0027: +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". Run the command based on the given format"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The patient and donor will be added back to the matching pool for"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "match detection with other patients and donors."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ". The patient-donor pair will not be considered a potential match in future match detection."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `done icP/S7896432A icD/S4578902G res/pass`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `done icP/S7896432A icD/S4578902G res/fail`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Detecting duplicates"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When adding a person, ORGANice will detect if the input is a duplicate of another person in the list."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A duplicate is defined as: Two persons of the same type who have the same NRIC."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When a duplicate is detected, ORGANice will indicate that there is such a person in ORGANice so the inputs"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "should be changed."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d Future improvements"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be added or improved in version 2.0."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is further divided into two sub-sections: **Proposed New Features** and **Proposed Extensions**."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Proposed New Features"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be added to ORGANice in version 2.0."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Filtering persons: `filter`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Filters a patient/doctor/donor by specific attributes."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `filter [patient/donor/doctor] [options]`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Returns a list of patients/doctors/doctors that has the specified attributes."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `filter t/patient g/M`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* `filter t/donor g/M n/Chua`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d Proposed Extensions"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section describes features that can be improved on and its proposed improvements."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Mass addition of data"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Add more than one patient/doctor/donor from data in a specified text file."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "A duplicate is defined as: two persons of the same type having the same ID."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "When a duplicate is detected, it prompts the user to change the data in the text file."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Supporting more types of transplants"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Currently ORGANice has patient-donor matching for kidneys only. Future versions can include matching for +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "more types of organs."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Processing a match: `process`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Emails the doctor in charge of a patient when an organ match for the patient is found."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Format: `process **NRIC**`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d\u003d\u003d Advanced find"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "Finding in v2.0 is more advanced with the implementation of fuzzy search and partial matching of keywords."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "that contains the data of your previous ORGANice folder."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*Q*: What are the steps to find a patient-donor kidney match? +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "*A*: There are three steps to finding a patient-donor match:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "1. Do a blood test to determine donor and patient blood type."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "2. Do a tissue typing test to determine the HLA antigens of the patient and the donor."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "3. Do a cross match, which is a trial transfusion."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section summarises the commands to use this application. The following list"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "contains the summary of the commands."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Add (Normal Mode):*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add patient: `add t/patient n/NAME o/ORGAN b/BLOOD TYPE tt/TISSUE TYPE p/PHONE pr/PRIORITY ic/NRIC d/DOCTOR a/AGE`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add donor: `add t/donor n/**NAME** o/**ORGAN** b/**BLOOD TYPE** tt/**TISSUE TYPE**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "p/**PHONE** ic/**NRIC** exp/**EXPIRY** a/**AGE**`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Add doctor: `add t/doctor n/**NAME** ic/**NRIC** p/**PHONE*`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Add (System Prompt Mode)*: `add t/**TYPE**`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Delete* : `delete ic/**NRIC**` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Edit* : `edit ic/**NRIC**`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Find* : `find`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: any parameter from \u003c\u003cList of Attributes\u003e\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Match* : `match [all/ic]`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "** Optional parameters: `sort/[rate/expiry/priority]` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Processing*: `processing icP/**NRIC of Patient** icD/**NRIC OF DONOR**`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *List* : `list t/**TYPE**`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Done* : `done icP/**NRIC of Patient** icD/**NRIC OF DONOR** `"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "This section contains a list of words used in this user guide and its intended meaning."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "It is meant to clarify the meaning and context of the words used in this user guide."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* user: refers to hospital administration staff who are using this desktop application"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* person: refers to doctors, patients or donors"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* blood type match: refers to a donor and patient whose blood types are compatible."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* tissue match: refers to a donor and patient whose tissues match"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* cross match: a trial blood transfusion, where donor and patient\u0027s blood are mixed in a test tube to check +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "for harmful interactions between patient and donor\u0027s blood"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* potential match: refers to a donor-patient pair whose organs pass the blood test and tissue typing test."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* match: refers to a donor-patient pair whose organs pass all three matching tests"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "* duplicate: refers to two persons of the same type which have the same NRIC"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 390,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * The main entry point to the application..."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it cannot"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "SimNee": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to ORGANice. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TYPE + \"PERSON TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_TYPE + \"doctor \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_NRIC + \"S1234568R \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + PREFIX_AGE + \"21 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Creates an AddCommand to add the specified {@code person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7,
      "C-likethis123": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"PERSON TYPE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type updatedType \u003d editPersonDescriptor.getType().orElse(personToEdit.getType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Person(updatedType, updatedNric, updatedName, updatedPhone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return CollectionUtil.isAnyNonNull(type, nric, name, phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return getType().equals(e.getType())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "-": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns the {@code Type} of person in the given {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the type is not specified correctly in the input arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static Type parseType(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return ParserUtil.parseType(argumentMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //put all the prefixes in the multimap to tokenize."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NRIC, PREFIX_NAME, PREFIX_AGE, PREFIX_PHONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Type type \u003d parseType(argMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (type.isPatient()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            arePrefixesPresentPatient(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Patient patient \u003d new Patient(type, nric, name, phone, age);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return new AddCommand(patient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else if (type.isDoctor()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //TODO: change implementation of creating a Doctor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            arePrefixesPresentDoctor(argMultimap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Person person \u003d new Person(type, nric, name, phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else if (type.isDonor()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            arePrefixesPresentDonor(argMultimap);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            Donor donor \u003d new Donor(type, nric, name, phone, age);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new AddCommand(donor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            //TODO: refine error message later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for {@code Patient} are absent."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentPatient(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_AGE, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for Donor are absent."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentDonor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_AGE, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Throws ParseException when one of the required prefixes for Doctor are absent."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static void arePrefixesPresentDoctor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 9,
      "C-likethis123": 72,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 2,
      "C-likethis123": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NRIC, PREFIX_NAME, PREFIX_PHONE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            editPersonDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 12,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Parses a {@code String type} into a {@code Type}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 19,
      "C-likethis123": 10,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The identity of {@code editedPerson} must not be the same as another existing {@code person}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * in the ORGANice Transplant Manager."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 1,
      "TheRealRavager": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * {@code target} must exist in ORGANice."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Person\u0027s age in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \"Age should only be an integer more than 0 and less than 150.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Integer AGE_MAX \u003d 150;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Integer AGE_MIN \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        value \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Integer age \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (age \u003e AGE_MIN \u0026\u0026 age \u003c AGE_MAX) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Bloodtype.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Represents a Person\u0027s bloodtype in ORGANice."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBloodtype(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class Bloodtype {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final HashSet\u003cString\u003e BLOOD_TYPES \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(\"A\", \"B\", \"AB\", \"O\", \"A+\", \"AB+\", \"B+\", \"O+\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "            \"Bloodtype should only have A, B, O or AB.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                    + \"Positive bloodtypes will have a \u0027+\u0027 behind, it should not be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Constructs a {@code Bloodtype}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * @param bloodtype A valid bloodtype."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public Bloodtype(String bloodtype) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        requireNonNull(bloodtype);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        checkArgument(isValidBloodtype(bloodtype), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d bloodtype.toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     * Returns true if a given string is a valid bloodtype."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public static boolean isValidBloodtype(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return BLOOD_TYPES.contains(test.toUpperCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                || (other instanceof Bloodtype // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SimNee"
        },
        "content": "                \u0026\u0026 value.equals(((Bloodtype) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 7,
      "SimNee": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DoctorInCharge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Patient\u0027s doctor in charge in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDoctorInCharge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DoctorInCharge {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \"Doctor in charge\u0027s NRIC must start with a letter \u0027S/T/F/G\u0027, 7 numbers afterward \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    + \"and its must end with a letter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_DOCTOR_NOT_FOUND \u003d \"We could not identify the doctor that you have specified.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \" Please check and try again!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs a {@code DoctorInCharge}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param doctorInCharge A valid DoctorInCharge."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DoctorInCharge(String doctorInCharge) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(doctorInCharge);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidDoctorInCharge(doctorInCharge), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d doctorInCharge.toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid doctor in charge."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidDoctorInCharge(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.toUpperCase().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof DoctorInCharge // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((DoctorInCharge) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Donor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Donor in ORGANice."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Donor extends Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Donor(Type type, Nric nric, Name name, Phone phone, Age age) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(type, nric, name, phone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireAllNonNull(age);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if both donors have the same identity and data fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * This defines a stronger notion of equality between two donors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!(other instanceof Donor)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor otherPerson \u003d (Donor) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getType().equals(getType())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 otherPerson.getAge().equals(getAge());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return Objects.hash(type, nric, name, phone, age);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(\" Age: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .append(getAge());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s name in the ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nric.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Person\u0027s nric in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Nric must start with a letter \u0027S/T/F/G\u0027, 7 numbers afterward \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"and its must end with a letter\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param nric A valid nric."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Nric(String nric) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d nric.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.toUpperCase().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((Nric) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Organ.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s organ in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOrgan(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class Organ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "            \"Please key in a valid organ. Valid organ(s): kidney.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static final String KIDNEY \u003d \"kidney\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Constructs an {@code Organ}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * @param organ A valid organ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public Organ(String organ) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        requireNonNull(organ);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        checkArgument(isValidOrgan(organ), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        value \u003d organ.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     * Returns true if a given string is a valid organ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public static boolean isValidOrgan(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return test.toLowerCase().equals(KIDNEY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                || (other instanceof Organ // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "                \u0026\u0026 value.equals(((Organ) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yen-Peng": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Represents a Patient in ORGANice."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient(Type type, Nric nric, Name name, Phone phone, Age age) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(type, nric, name, phone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        requireAllNonNull(age);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                .append(getAge());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person in ORGANice."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Type type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Nric nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Person(Type type, Nric nric, Name name, Phone phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireAllNonNull(type, nric, name, phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if both persons of the same nric."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getNric().equals(getNric());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return otherPerson.getNric().equals(getNric())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u0026\u0026 otherPerson.getType().equals(getType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return Objects.hash(type, nric, name, phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Person Type: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .append(getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "-": 71,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": " * Represents a Person\u0027s phone number in ORGANice."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "Yen-Peng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Represents a Person\u0027s type in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Types can only take \u0027patient\u0027, \u0027donor\u0027, or \u0027doctor as values \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DOCTOR \u003d \"doctor\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DONOR \u003d \"donor\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Constructs an {@code Type}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        value \u003d type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 (test.toLowerCase().equals(PATIENT) || test.toLowerCase().equals(DONOR)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        || test.toLowerCase().equals(DOCTOR));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a patient."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a patient"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isPatient() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(PATIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a donor."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a donor"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isDonor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(DONOR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Checks if the {@code Type} is a doctor."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @return boolean if this Type is a doctor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean isDoctor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return value.equals(DOCTOR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 value.equals(((Type) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 58,
      "C-likethis123": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"S1111111A\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"T1333333P\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"G1234213L\"), new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    new Phone(\"93210283\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"F5734625D\"), new Name(\"David Li\"), new Phone(\"91031282\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"S6243536R\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            new Person(new Type(\"doctor\"), new Nric(\"T6746356G\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 9,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Data fields of Patient"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected final String age;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"type\") String type, @JsonProperty(\"nric\") String nric,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            @JsonProperty(\"age\") String age) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d source.getType().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d source.getNric().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (source instanceof Patient) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            age \u003d ((Patient) source).getAge().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else if (source instanceof Donor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            age \u003d ((Donor) source).getAge().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else { //TODO: change to else if instanceof Doctor"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            age \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (nric \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!Nric.isValidNric(nric)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        //if it is a patient"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (modelType.isPatient()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return new Patient(modelType, modelNric, modelName, modelPhone, modelAge);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        } else if (modelType.isDonor()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return new Donor(modelType, modelNric, modelName, modelPhone, modelAge);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Person(modelType, modelNric, modelName, modelPhone);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 36,
      "C-likethis123": 29,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DonorCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * An UI component that displays information of a {@code Donor}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String FXML \u003d \"DonorListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public final Donor donor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorCard(Donor donor, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.donor \u003d donor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        name.setText(donor.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        phone.setText(\"Phone Number: \" + donor.getPhone().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric.setText(donor.getNric().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type.setText(donor.getType().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age.setText(\"Age: \" + donor.getAge().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        if (!(other instanceof DonorCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DonorCard card \u003d (DonorCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u0026\u0026 donor.equals(card.donor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + patient.getPhone().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        nric.setText(patient.getNric().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        type.setText(patient.getType().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age.setText(\"Age: \" + patient.getAge().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        phone.setText(\"Phone Number: \" + person.getPhone().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric.setText(person.getNric().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type.setText(person.getType().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "C-likethis123": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                if (person instanceof Patient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                    setGraphic(new PatientCard((Patient) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                } else if (person instanceof Donor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    setGraphic(new DonorCard((Donor) person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                } else { //TODO: change into doctor card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "C-likethis123": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/DonorListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 47
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "         \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 47
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"type\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #ebb789;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003cLabel fx:id\u003d\"nric\" style\u003d\"-fx-background-radius: 4; -fx-border-radius: 4; -fx-background-color: #77B5FE;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            \u003cInsets bottom\u003d\"1.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 18,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + TYPE_DESC_AMY + NRIC_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().withNric(\"S1234567A\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        CommandResult commandResultPatient \u003d new AddCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResultPatient.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void execute_donorAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor validDonor \u003d new DonorBuilder().withAge(\"23\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        CommandResult commandResultDonor \u003d new AddCommand(validDonor).execute(modelStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDonor), commandResultDonor.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(Arrays.asList(validDonor), modelStub.personsAdded);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPatient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPatient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void execute_duplicateDonor_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor validDonor \u003d new DonorBuilder().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validDonor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validDonor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Patient alicePatient \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        AddCommand addAlicePatientCommand \u003d new AddCommand(alicePatient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e return false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(addAliceCommand.equals(addAlicePatientCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "C-likethis123": 22,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_NAME_IRENE \u003d \"Irene\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_NAME_JOHN \u003d \"John\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_PHONE_IRENE \u003d \"85355255\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_PHONE_JOHN \u003d \"81230942\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"G2222222B\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_NRIC_IRENE \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_NRIC_JOHN \u003d \"T1312123P\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TYPE_AMY \u003d \"doctor\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"patient\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_TYPE_IRENE \u003d \"patient\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_TYPE_JOHN \u003d \"donor\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_AGE_IRENE \u003d \"21\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"21\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String VALID_AGE_JOHN \u003d \"60\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TYPE_DESC_AMY \u003d \" \" + PREFIX_TYPE + VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TYPE_DESC_BOB \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String NAME_DESC_IRENE \u003d \" \" + PREFIX_NAME + VALID_NAME_IRENE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String PHONE_DESC_IRENE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_IRENE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String NRIC_DESC_IRENE \u003d \" \" + PREFIX_NRIC + VALID_NRIC_IRENE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String TYPE_DESC_IRENE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_IRENE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String AGE_DESC_IRENE \u003d \" \" + PREFIX_AGE + VALID_AGE_IRENE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String NAME_DESC_JOHN \u003d \" \" + PREFIX_NAME + VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String PHONE_DESC_JOHN \u003d \" \" + PREFIX_PHONE + VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String NRIC_DESC_JOHN \u003d \" \" + PREFIX_NRIC + VALID_NRIC_JOHN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String TYPE_DESC_JOHN \u003d \" \" + PREFIX_TYPE + VALID_TYPE_JOHN;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String AGE_DESC_JOHN \u003d \" \" + PREFIX_AGE + VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"G123A\"; // need exactly 7 numbers in nrics"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"student\"; // only allow \u0027patient\u0027,\u0027donor\u0027,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    // \u0027doctor\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"-9\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withType(\"doctor\").withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withType(\"patient\").withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "C-likethis123": 15,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 2,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_IRENE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_JOHN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_IRENE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOHN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_IRENE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_JOHN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_IRENE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_JOHN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_IRENE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_JOHN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_IRENE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IRENE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_IRENE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_JOHN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRENE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_IRENE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_JOHN;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IRENE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOHN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_AMY + NRIC_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_AMY + NRIC_DESC_AMY + NAME_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_BOB + PHONE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_AMY + NRIC_DESC_BOB + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_AMY + PHONE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_BOB + TYPE_DESC_AMY + NRIC_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            + NAME_DESC_AMY + PHONE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //Testing all fields present for a Donor"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient expectedPatient \u003d IRENE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_IRENE + NRIC_DESC_IRENE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_IRENE + PHONE_DESC_IRENE + AGE_DESC_IRENE, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_IRENE + PHONE_DESC_IRENE + AGE_DESC_IRENE, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_IRENE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_IRENE + AGE_DESC_IRENE, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_IRENE + NRIC_DESC_AMY + NRIC_DESC_IRENE + NAME_DESC_IRENE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_IRENE + AGE_DESC_IRENE, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_BOB + TYPE_DESC_IRENE + NRIC_DESC_IRENE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + NAME_DESC_IRENE + PHONE_DESC_IRENE + AGE_DESC_IRENE, new AddCommand(expectedPatient));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //Testing all fields present for a Donor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor expectedDonor \u003d JOHN;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TYPE_DESC_JOHN + NRIC_DESC_JOHN"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + NAME_DESC_JOHN + PHONE_DESC_JOHN + AGE_DESC_JOHN, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_AMY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + NAME_DESC_JOHN + PHONE_DESC_JOHN + AGE_DESC_JOHN, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PHONE_DESC_AMY + PHONE_DESC_JOHN + AGE_DESC_JOHN, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_JOHN + NRIC_DESC_AMY + NRIC_DESC_JOHN + NAME_DESC_JOHN"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + PHONE_DESC_JOHN + AGE_DESC_JOHN, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_BOB + TYPE_DESC_JOHN + NRIC_DESC_JOHN"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + NAME_DESC_JOHN + PHONE_DESC_JOHN + AGE_DESC_JOHN, new AddCommand(expectedDonor));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //        // zero tags"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_BOB + NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing nric prefix -- donor"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NAME_DESC_JOHN + VALID_NRIC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        //missing nric prefix -- patient"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NAME_DESC_IRENE + VALID_NRIC_IRENE + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing name prefix -- donor"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + VALID_NAME_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing name prefix -- patient"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + VALID_NAME_IRENE + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing phone prefix -- donor"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN + VALID_PHONE_JOHN"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing phone prefix -- patient"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_IRENE + VALID_PHONE_IRENE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + AGE_DESC_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing age prefix -- donor"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_AGE_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // missing age prefix -- patient"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_IRENE + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_AGE_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // all prefixes missing -- donor"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_JOHN + VALID_NRIC_JOHN + VALID_NAME_JOHN + VALID_PHONE_JOHN"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_AGE_JOHN, expectedMessage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // all prefixes missing -- patient"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_IRENE + VALID_NRIC_IRENE + VALID_NAME_IRENE + VALID_PHONE_IRENE"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            + VALID_AGE_IRENE, expectedMessage);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_DESC + NRIC_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric -- donor"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + INVALID_NRIC_DESC + NAME_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric -- patient"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + INVALID_NRIC_DESC + NAME_DESC_IRENE + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_IRENE, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid name -- donor"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + INVALID_NAME_DESC + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid name -- patient"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + INVALID_NAME_DESC + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_IRENE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid phone -- donor"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid phone -- patient"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_IRENE + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_IRENE, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid age -- donor"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN + PHONE_DESC_JOHN"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid age -- patient"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_IRENE + NRIC_DESC_IRENE + NAME_DESC_IRENE + PHONE_DESC_IRENE"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // two invalid values, only first invalid value reported -- donor"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_JOHN + NRIC_DESC_JOHN + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + AGE_DESC_JOHN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // two invalid values, only first invalid value reported -- patient"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_BOB + NRIC_DESC_BOB + INVALID_NAME_DESC + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // non-empty preamble -- donor"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_JOHN + NRIC_DESC_JOHN + NAME_DESC_JOHN"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_JOHN + AGE_DESC_JOHN,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // non-empty preamble -- patient"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_BOB + NRIC_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 133,
      "C-likethis123": 56,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, Type.MESSAGE_CONSTRAINTS); // invalid type"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + TYPE_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertParseFailure(parser, \"1\" + TYPE_DESC_BOB + INVALID_NRIC_DESC + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + INVALID_PHONE_DESC, Nric.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withNric(VALID_NRIC_BOB).withPhone(VALID_PHONE_BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withNric(VALID_NRIC_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // nric"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // type"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_AMY + TYPE_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB + NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 36,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"G123A\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"student\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_NRIC \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_TYPE \u003d \"doctor\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric expectedNric \u003d new Nric(VALID_NRIC);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(INVALID_TYPE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_validValueWithoutWhitespace_returnsNric() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(VALID_TYPE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void parseType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(typeWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 28,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(\"S1532142A\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withNric(\"S1532142A\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 2,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.model.person.Age.AGE_MAX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.model.person.Age.AGE_MIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MAX_ONE_MORE \u003d AGE_MAX + 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    static final Integer AGE_MAX_ONE_LESS \u003d AGE_MAX - 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MAX_TEN_MORE \u003d AGE_MAX + 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    static final Integer AGE_MIN_ONE_LESS \u003d AGE_MIN - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    static final Integer AGE_MIN_ONE_MORE \u003d AGE_MIN + 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"Peter\")); //alphabets"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-74\")); //negative numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-150\")); //negative 3 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(null)); //null age"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"0.8\")); //decimals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"1.9\")); //decimals"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(\"-82.9\")); //negative decimals"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MIN.toString())); //min valid age"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX.toString())); //max valid age"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX_ONE_MORE.toString())); //max age + 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MAX_TEN_MORE.toString())); //max age + 10"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Age.isValidAge(AGE_MIN_ONE_LESS.toString())); //min age - 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // valid age"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        for (int age \u003d AGE_MIN + 1; age \u003c AGE_MAX; age++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            Integer currentAge \u003d age;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            assertTrue(Age.isValidAge(currentAge.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Age(AGE_MAX_ONE_LESS.toString()).toString(), AGE_MAX_ONE_LESS.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Age(AGE_MIN_ONE_MORE.toString()).toString(), AGE_MIN_ONE_MORE.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Age maxValidAge \u003d new Age((AGE_MAX_ONE_LESS.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(maxValidAge.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(maxValidAge.equals(new Age(AGE_MIN_ONE_MORE.toString())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(maxValidAge.equals(maxValidAge));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(maxValidAge.equals(new Age(AGE_MAX_ONE_LESS.toString())));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Age maxValidAge \u003d new Age((AGE_MAX_ONE_LESS.toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(maxValidAge.hashCode(), new Age((AGE_MAX_ONE_LESS.toString())).hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(maxValidAge.hashCode(), new Age((AGE_MIN_ONE_MORE.toString())).hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 28,
      "C-likethis123": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BloodtypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SimNee"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SimNee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SimNee"
        },
        "content": "public class BloodtypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bloodtype(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void constructor_invalidBloodtype_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        String invalidBloodtype \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Bloodtype(invalidBloodtype));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    public void isValidBloodtype() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // null bloodtype"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Bloodtype.isValidBloodtype(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // invalid bloodtype"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\"C\")); // wrong bloodtype"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\"1\")); // numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\"C+C\")); // + within alphabets"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertFalse(Bloodtype.isValidBloodtype(\"A B\")); // spaces within alphabets"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SimNee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        // valid bloodtype"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"B\")); // exactly 1 alphabet"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"AB\")); //2 alphabets"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"Ab\")); //case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"aB+\")); // with positive and case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"O+\")); // with positive and capital"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SimNee"
        },
        "content": "        assertTrue(Bloodtype.isValidBloodtype(\"o+\")); // with positive and non capital"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SimNee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Bloodtype(\"Ab+\").toString(), \"AB+\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Bloodtype(\"ab+\").toString(), \"AB+\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Bloodtype bloodtype \u003d new Bloodtype(\"AB+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(bloodtype.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(bloodtype.equals(new Bloodtype(\"A+\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(bloodtype.equals(bloodtype));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(bloodtype.equals(new Bloodtype(\"AB+\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Bloodtype bloodtype \u003d new Bloodtype(\"AB+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(bloodtype.hashCode(), new Bloodtype(\"Ab+\").hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(bloodtype.hashCode(), new Bloodtype(\"A+\").hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SimNee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 26,
      "SimNee": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DoctorInChargeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DoctorInChargeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DoctorInCharge(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_invalidDoctorInCharge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String invalidDoctorInCharge \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DoctorInCharge(invalidDoctorInCharge));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isValidDoctorInCharge() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null doctor in charge"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DoctorInCharge.isValidDoctorInCharge(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid doctor in charge"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"1234567\")); // contains only number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"9312930R\")); // begins with a number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"S123456A\")); // contains less than 7 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"S1234567\")); // ends with a number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"AAAAAAAAA\")); // contains only letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(DoctorInCharge.isValidDoctorInCharge(\"N1234567A\")); // starts with letter other than S/T/F/G"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // valid doctor in charge"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"s1234512b\")); // should be case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"s1234512R\")); // should be case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"T1234512a\")); // should be case insensitive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"S1234567B\")); // starts with \u0027S\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"T2222222A\")); // starts with \u0027T\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"F3333333A\")); // starts with \u0027F\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(DoctorInCharge.isValidDoctorInCharge(\"G4444444A\")); // starts with \u0027G\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new DoctorInCharge(\"S1111111A\").toString(), \"S1111111A\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DoctorInCharge doctorInCharge \u003d new DoctorInCharge(\"S1111111A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(doctorInCharge.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(doctorInCharge.equals(new DoctorInCharge(\"S1111111B\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(doctorInCharge.equals(doctorInCharge));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(doctorInCharge.equals(new DoctorInCharge(\"S1111111A\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        DoctorInCharge doctorInCharge \u003d new DoctorInCharge(\"S1111111A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(doctorInCharge.hashCode(), new DoctorInCharge(\"S1111111A\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(doctorInCharge.hashCode(), new DoctorInCharge(\"S1111111B\").hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DonorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOHN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.testutil.DonorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.isSamePerson(JOHN));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.isSamePerson(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor editedJohn \u003d new DonorBuilder(JOHN).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric, different other attributes -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withNric(VALID_NRIC_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different other attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.isSamePerson(editedJohn));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor johnCopy \u003d new DonorBuilder(JOHN).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.equals(johnCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(JOHN.equals(JOHN));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor editedJohn \u003d new DonorBuilder(JOHN).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedJohn \u003d new DonorBuilder(JOHN).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(JOHN.equals(editedJohn));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withType(\"doctor\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(editedAlice.equals(editedJohn));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor john \u003d new DonorBuilder(JOHN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(john.toString().trim() , \"John Person Type: donor Nric: T1312123P Phone: 81230942 Age: 60\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Donor john \u003d new DonorBuilder(JOHN).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(john.hashCode(), new DonorBuilder(JOHN).build().hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(john.hashCode(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                new DonorBuilder(JOHN).withPhone(VALID_PHONE_BOB).build().hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // Keywords match type, phone, nric and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"doctor\", \"S1111111A\", \"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withType(\"doctor\").withNric(\"S1111111A\").withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                .withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 5,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Name(VALID_NAME_BOB).toString(), VALID_NAME_BOB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(name.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(name.equals(new Name(VALID_NAME_AMY)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(name.equals(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(name.equals(new Name(VALID_NAME_BOB)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(name.hashCode(), new Name(VALID_NAME_BOB).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(name.hashCode(), new Name(VALID_NAME_AMY).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 27,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NricTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // null nric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"1234567\")); // contains only number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"9312930R\")); // begins with a number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S123456A\")); // contains less than 7 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S1234567\")); // ends with a number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"AAAAAAAAA\")); // contains only letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(Nric.isValidNric(\"N1234567A\")); // starts with letter other than S/T/F/G"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1234512b\")); // should be case insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1234512R\")); // should be case insensitive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T1234512a\")); // should be case insensitive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S1234567B\")); // starts with \u0027S\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T2222222A\")); // starts with \u0027T\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F3333333A\")); // starts with \u0027F\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G4444444A\")); // starts with \u0027G\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Nric(\"S1111111A\").toString(), \"S1111111A\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric nric \u003d new Nric(\"S1111111A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(nric.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(nric.equals(new Nric(\"S1111111B\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(nric.equals(nric));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(nric.equals(new Nric(\"S1111111A\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Nric nric \u003d new Nric(\"S1111111A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(nric.hashCode(), new Nric(\"S1111111A\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(nric.hashCode(), new Nric(\"S1111111B\").hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OrganTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "public class OrganTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Organ(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void constructor_invalidOrgan_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        String invalidOrgan \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Organ(invalidOrgan));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void isValidOrgan() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // null organ"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Organ.isValidOrgan(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // invalid organ"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"kidney*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"12345\")); // only numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(Organ.isValidOrgan(\"kidney1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // valid organ"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(Organ.isValidOrgan(\"kidney\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(Organ.isValidOrgan(\"Kidney\")); // case insensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(new Organ(\"kidney\").toString(), \"kidney\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(new Organ(\"KIDNEY\").toString(), \"kidney\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        Organ organ \u003d new Organ(\"kidney\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertFalse(organ.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(organ.equals(organ));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        // same organ name -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertTrue(organ.equals(new Organ(\"kidney\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        Organ organ \u003d new Organ(\"kidney\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "        assertEquals(organ.hashCode(), new Organ(\"KIDNEY\").hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yen-Peng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yen-Peng": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PatientTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IRENE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.isSamePerson(IRENE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.isSamePerson(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient editedIrene \u003d new PatientBuilder(IRENE).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.isSamePerson(editedIrene));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient ireneCopy \u003d new PatientBuilder(IRENE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.equals(ireneCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(IRENE.equals(IRENE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Patient editedIrene \u003d new PatientBuilder(IRENE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        editedIrene \u003d new PatientBuilder(IRENE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(IRENE.equals(editedIrene));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withType(\"doctor\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(editedAlice.equals(editedIrene));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Patient irene \u003d new PatientBuilder(IRENE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(irene.toString().trim() , \"Irene Person Type: patient Nric: S1111111A Phone: 85355255 Age: 21\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Patient irene \u003d new PatientBuilder(IRENE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(irene.hashCode(), new PatientBuilder(IRENE).build().hashCode());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(irene.hashCode(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                new PatientBuilder(IRENE).withPhone(VALID_PHONE_BOB).build().hashCode());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 18,
      "C-likethis123": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different type -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different phone -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // same nric, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        // different person type -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(alice.toString().trim() , \"Alice Pauline Person Type: doctor Nric: S1532142A Phone: 94351253\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person alice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(alice.hashCode(), new PersonBuilder(ALICE).build().hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(alice.hashCode(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "                new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build().hashCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 36,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Type(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void constructor_invalidType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String invalidType \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidType));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void isValidType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertFalse(Type.isValidType(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"patient\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"doctor\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertTrue(Type.isValidType(\"donor\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void typeCheckTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.DONOR).isDonor());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.DOCTOR).isDoctor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(new Type(Type.PATIENT).isPatient());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(new Type(Type.PATIENT).toString(), \"patient\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type type \u003d new Type(Type.PATIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(type.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertFalse(type.equals(new Type(Type.DOCTOR)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(type.equals(type));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertTrue(type.equals(new Type(Type.PATIENT)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Type type \u003d new Type(Type.PATIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(type.hashCode(), new Type(Type.PATIENT).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertNotEquals(type.hashCode(), new Type(Type.DOCTOR).hashCode());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 32,
      "C-likethis123": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePeople \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePeople));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 4,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IRENE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"G123A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"student\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String INVALID_AGE \u003d \"-28\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String PLACEHOLDER_AGE \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private static final String VALID_TYPE \u003d BENSON.getType().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private static final String VALID_AGE \u003d \"28\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(IRENE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertEquals(IRENE, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_validDonorDetails_returnsDonor() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(JOHN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        assertEquals(JOHN, person.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, INVALID_NAME, VALID_PHONE, PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, null, VALID_PHONE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME, INVALID_PHONE, PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, VALID_NRIC, VALID_NAME, null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            new JsonAdaptedPerson(VALID_TYPE, INVALID_NRIC, VALID_NAME, INVALID_PHONE, PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullNric_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_TYPE, null, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "            new JsonAdaptedPerson(INVALID_TYPE, VALID_NRIC, VALID_NAME, INVALID_PHONE, PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d Type.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public void toModelType_nullType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NRIC, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                PLACEHOLDER_AGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String patientType \u003d \"patient\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson patient \u003d new JsonAdaptedPerson(patientType, VALID_NRIC, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                INVALID_AGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String patientType \u003d \"patient\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        JsonAdaptedPerson patient \u003d new JsonAdaptedPerson(patientType, VALID_NRIC, VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "                null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 21,
      "C-likethis123": 38,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DonorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A utility class to build Donor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "public class DonorBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"60\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d new Type(\"donor\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Initialises the DonorBuilder with the data of {@code donorToCopy}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder(Donor donorToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        super(donorToCopy);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        age \u003d donorToCopy.getAge();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Age} of the {@code Donor} we are building"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Phone} of the {@code Donor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public DonorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public Donor build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Donor(type, nric, name, phone, age);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setType(person.getType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setNric(person.getNric());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Type} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 16,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " * A utility class to build Patient objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "public class PatientBuilder extends PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"20\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        type \u003d new Type(\"patient\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Initialises the PatientBuilder with the data of {@code patientToCopy}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        super(patientToCopy);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        age \u003d patientToCopy.getAge();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Age} of the {@code Patient} we are building"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withAge(String age) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Nric} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "        return new Patient(type, nric, name, phone, age);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "C-likethis123": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Nric;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": " * A utility class to help with building person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"S1111111A\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"doctor\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Nric nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        nric \u003d personToCopy.getNric();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        type \u003d personToCopy.getType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Type} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withType(String type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Nric} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        return new Person(type, nric, name, phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 19,
      "C-likethis123": 4,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        sb.append(PREFIX_TYPE + person.getType().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TYPE).append(type.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_IRENE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_JOHN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IRENE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOHN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_IRENE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_JOHN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_IRENE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_JOHN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "import seedu.address.model.person.Donor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "import seedu.address.model.person.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withType(\"doctor\").withNric(\"S1532142A\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Alice Pauline\").withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withType(\"doctor\").withNric(\"T5231426Q\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Benson Meier\").withPhone(\"98765432\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withAge(\"22\").withNric(\"G5642431P\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Carl Kurz\").withPhone(\"95352563\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withAge(\"34\").withNric(\"F6423467F\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Daniel Meier\").withPhone(\"87652533\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Donor ELLE \u003d new DonorBuilder().withAge(\"13\").withNric(\"S9374923S\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Donor FIONA \u003d new DonorBuilder().withAge(\"25\").withNric(\"F9183156L\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Fiona Kunz\").withPhone(\"9482427\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Donor GEORGE \u003d new DonorBuilder().withAge(\"44\").withNric(\"S1234567A\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"George Best\").withPhone(\"9482442\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withType(\"doctor\").withNric(\"G1245325A\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Hoon Meier\").withPhone(\"8482424\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withType(\"doctor\").withNric(\"T1125125L\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(\"Ida Mueller\").withPhone(\"8482131\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": "    //Sample Patients"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Patient IRENE \u003d new PatientBuilder().withAge(VALID_AGE_IRENE).withName(VALID_NAME_IRENE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "        .withNric(VALID_NRIC_IRENE).withPhone(VALID_PHONE_IRENE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    //Sample Donors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Donor JOHN \u003d new DonorBuilder().withAge(VALID_AGE_JOHN).withName(VALID_NAME_JOHN)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withNric(VALID_NRIC_JOHN).withPhone(VALID_PHONE_JOHN).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "C-likethis123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    // Manually added - person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withType(VALID_TYPE_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withType(VALID_TYPE_BOB).withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WilliamRyank"
        },
        "content": "            .withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WilliamRyank": 39,
      "C-likethis123": 5,
      "-": 42
    }
  }
]
