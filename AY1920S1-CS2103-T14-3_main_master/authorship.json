[
  {
    "path": "src/main/java/seedu/address/flashcard/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the answers of each flashcard"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The answer can take in any value, but it should not be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Modify the answer on the flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newAnswer the updated answer of the flashcard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setAnswer(String newAnswer) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        answer \u003d newAnswer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Compare with the user input to check if the answer is correct or not"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Only applies to MCQ questions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param input The answer input by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if the answer matches, false otherwise"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean compareAnswer(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return input.equals(answer);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While searching for a flashcard by keyword s, decide whether this answer matches the keyword or not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The target keyword"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if the answer contains the keyword, false otherwise"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return answer.contains(s);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 33,
      "jolynnn8D": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/CardId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The unique identity number for each flash card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: Each card\u0027s id number is unique."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CardId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // The id number for the next flash card generated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static int frontier \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private final int identityNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Constructor of the class, automatically generate a unique identity number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CardId() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        identityNumber \u003d frontier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        frontier++;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getIdentityNumber() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return identityNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While finding a flashcard, compare that the id number of this card matches the search string or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The search parameter, target string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if the id number indeed contains the target information, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String idAsString \u003d Integer.toString(identityNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return idAsString.contains(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Integer.toString(identityNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof CardId)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return identityNumber \u003d\u003d ((CardId) other).getIdentityNumber();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return Integer.hashCode(identityNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/Flashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * A flashcard must contain the following components"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * 1. Question on the card"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * 2. Answer on the card"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * 3. A unique card ID to recognize itself to other cards"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * 4. A score class to record how many correct and wrong answers from the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * 5. A list of tags"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public abstract class Flashcard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private CardId id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ArrayList\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Question and Answer must be specified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Flashcard(Question question, Answer answer) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.score \u003d new Score();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.id \u003d new CardId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public CardId getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setQuestion(String newQuestion) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        question.setQuestion(newQuestion);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setAnswer(String newAnswer) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        answer.setAnswer(newAnswer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Add a new tag to the flash card"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Guarantees there are no duplicate tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t the tag to be added to the card"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DuplicateTagException if this card already has this tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addTag(Tag t) throws DuplicateTagException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (tags.contains(t)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Delete the given tag from the flash card"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Guarantees non-existing tags cannot be deleted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param t the tag to be deleted from the card"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws TagNotFoundException if this flashcard does not have the given tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deleteTag(Tag t) throws TagNotFoundException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!tags.contains(t)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tags.remove(t);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * When the user make an answer to a question, change the score of this flashcard"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void isAnswerCorrect(boolean correct) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (correct) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            score.addCorrectAnswerNumber();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            score.addWrongAnswerNumber();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While searching for a flashcard, decide that whether this flashcard contains the keyword or not."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s the keyword we are looking for"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if question, answer or the id contains the keyword, false otherwise"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return question.contains(s) || answer.contains(s) || id.contains(s);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * comparing whether two flash cards are the same or not."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Since each flashcard has a unique id number, only comparing this id is enough"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Flashcard otherFlashcard \u003d (Flashcard) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return otherFlashcard.getId() \u003d\u003d this.getId();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While showing a card in the form of a string, we show its id number and its question."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return String.format(\"Question: %s, id: %d\", getQuestion(), id.getIdentityNumber());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return id.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 90,
      "lzw12345": 3,
      "jolynnn8D": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/FlashcardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The list of all flashcard list, meanwhile, holding the {@Code TagManager}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class FlashcardList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private ArrayList\u003cFlashcard\u003e flashcards;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public FlashcardList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        flashcards \u003d new ArrayList\u003cFlashcard\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e getAllFlashcards() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return flashcards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Fetch the particular flashcard based on its id number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the id number of the flashcard we are looking for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the flashcard with this id number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws CardNotFoundException if flashcard with this number was not found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Flashcard getFlashcard(int flashcardId) throws CardNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (flashcard.getId().getIdentityNumber() \u003d\u003d flashcardId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                return flashcard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        throw new CardNotFoundException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Edit the question on a particular flashcard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the id number of the flashcard we want to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newQuestion the updated question for the target flashcard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcard(int flashcardId, String newQuestion) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard editFlashcard \u003d getFlashcard(flashcardId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        editFlashcard.setQuestion(newQuestion);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Edit the answer on a particular flashcard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the id number of the flashcard we want to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newAnswer the updated answer for the target flashcard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardAnswer(int flashcardId, String newAnswer) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard editFlashcard \u003d getFlashcard(flashcardId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        editFlashcard.setAnswer(newAnswer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Edit the options on a particular MCQ flash card"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the id number of the flashcard we want to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newOptions the updated options for the target flashcard"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws RuntimeException if the card with this id is not found or the corresponding card is not an MCQ card."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setFlashcardOptions(int flashcardId, ArrayList\u003cString\u003e newOptions) throws RuntimeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard editFlashcard \u003d getFlashcard(flashcardId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(editFlashcard instanceof McqFlashcard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqFlashcard castedEditFlashcard \u003d (McqFlashcard) editFlashcard;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        castedEditFlashcard.setOptions(newOptions);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Look up for a flashcard whose id number, question or answer contains this specific keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param search the keyword we want to look up for"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return list of the flashcards that matches the keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws CardNotFoundException when no cards of this keyword was found"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e findFlashcard(String search) throws CardNotFoundException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ArrayList\u003cFlashcard\u003e matchingFlashcards \u003d new ArrayList\u003cFlashcard\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Flashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (flashcard.contains(search)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                matchingFlashcards.add(flashcard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (matchingFlashcards.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return matchingFlashcards;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * delete the flashcard based on its id"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the id of the flashcard we want to delete"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deleteFlashcard (int flashcardId) throws CardNotFoundException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Flashcard flashcardDelete \u003d getFlashcard(flashcardId);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Tag tag : flashcardDelete.getTags()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tag.deleteFlashcard(flashcardId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        flashcards.remove(flashcardDelete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * add an MCQ flash card into the list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param question the question of the flashcard"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param options the options of the flashcard"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param answer the answer of this MCQ, simply \"A\", \"B\", \"C\", \"D\"."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void addFlashcard (String question, ArrayList\u003cString\u003e options, String answer) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.add(new McqFlashcard(new McqQuestion(question, options), new Answer(answer)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * add a shortAnswer flash card into the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param question the question of the flashcard"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param answer the options of the flashcard"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addFlashcard(String question, String answer) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        flashcards.add(new ShortAnswerFlashcard(new ShortAnswerQuestion(question), new Answer(answer)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Give the target flashcard a tag. If this tag currently does not exist, create a new one in the TagManager"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param flashcardId the flashcard to be tagged"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tagName the tag to be added to the flashcard"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagFlashcard(int flashcardId, String tagName) throws DuplicateTagException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!tagManager.hasTag(tagName)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            tagManager.addTag(tagName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Flashcard targetCard \u003d getFlashcard(flashcardId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag targetTag \u003d tagManager.getTag(tagName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (targetTag.hasCard(targetCard)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        targetCard.addTag(targetTag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        targetTag.addFlashcard(targetCard);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 100,
      "lzw12345": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/McqFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the flashcards with MCQ questions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class McqFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public McqFlashcard(McqQuestion question, Answer answer) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * edit the options in the MCQ"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * TODO: Consider if we can edit a particular option instead of changing them as a whole"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newOptions the updated options for the flashcard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setOptions(ArrayList\u003cString\u003e newOptions) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        McqQuestion castedTargetQuestion \u003d (McqQuestion) getQuestion();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        castedTargetQuestion.setOptions(newOptions);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 17,
      "jolynnn8D": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/McqQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The question used for MCQ classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * It is by itself an MCQ question containing question statement and choices"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class McqQuestion extends Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private List\u003cString\u003e options;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Both question and options must be specified"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public McqQuestion(String question, List\u003cString\u003e options) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * edit the options of this question"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newOptions the updated options for this question"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setOptions(List\u003cString\u003e newOptions) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.options \u003d newOptions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String result \u003d this.getQuestion();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        for (String s : options) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            result +\u003d \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            result +\u003d s;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 18,
      "jolynnn8D": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the question on each flashcard"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public abstract class Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The question can take in any value, but it should not be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Modify the question on the flashcard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newQuestion The updated question of the flashcard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setQuestion(String newQuestion) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        question \u003d newQuestion;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While searching for a flashcard, check if the question contains the target message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s the target message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if the question contains target message, false otherwise"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return question.contains(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        if (!(other instanceof Question)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        Question otherQuestion \u003d (Question) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return otherQuestion.getQuestion().equals(this.getQuestion());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 27,
      "jolynnn8D": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/Score.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The record of how many correct and wrong answers has the user done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_BEFORE_TOTAL \u003d \"Total number of practices: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_BEFORE_CORRECT \u003d \"Number of correct answers: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_BEFORE_WRONG \u003d \"Number of wrong answer: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_BEFORE_PERCENTAGE \u003d \"Total Correct rate: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int correctAnswerNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int wrongAnswerNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Score() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        correctAnswerNumber \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        wrongAnswerNumber \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getCorrectAnswerNumber() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return correctAnswerNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getWrongAnswerNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return wrongAnswerNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addCorrectAnswerNumber() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        correctAnswerNumber++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addWrongAnswerNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        wrongAnswerNumber++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int getTotalAnswerNumber() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return correctAnswerNumber + wrongAnswerNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public float getCorrectRate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return correctAnswerNumber / getCorrectAnswerNumber();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String totalMessage \u003d MESSAGE_BEFORE_TOTAL + Integer.toString(getTotalAnswerNumber()) + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String correctMessage \u003d MESSAGE_BEFORE_CORRECT + Integer.toString(getCorrectAnswerNumber()) + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String wrongMessage \u003d MESSAGE_BEFORE_WRONG + Integer.toString(getWrongAnswerNumber()) + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String percentageMessage \u003d MESSAGE_BEFORE_PERCENTAGE + Float.toString(getCorrectRate()) + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return totalMessage + correctMessage + wrongMessage + percentageMessage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/ShortAnswerFlashcard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Represent the flashcard of a short answer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ShortAnswerFlashcard extends Flashcard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ShortAnswerFlashcard(ShortAnswerQuestion question, Answer answer) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 5,
      "jolynnn8D": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/ShortAnswerQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The question type for short answer flash cards"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "public class ShortAnswerQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    public ShortAnswerQuestion(String question) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        super(question);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jolynnn8D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 5,
      "jolynnn8D": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Helps calculating the correct rate for each flashcard, tag and the whole flashcard set."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up all the correct answers in a tag"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTagTotalCorrect(Tag tag) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int overallCorrectAnswer \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard card : tag.getFlashcards()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            overallCorrectAnswer \u003d overallCorrectAnswer + card.getScore().getCorrectAnswerNumber();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return overallCorrectAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up all the wrong answers in a tag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTagTotalWrong(Tag tag) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int overallWrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard card : tag.getFlashcards()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            overallWrongAnswers \u003d overallWrongAnswers + card.getScore().getWrongAnswerNumber();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return overallWrongAnswers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up practice times in a tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTagTotal(Tag tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getTagTotalCorrect(tag) + getTagTotalWrong(tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up all the correct answers in the cardList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTotalCorrect(FlashcardList cardList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int overallCorrectAnswer \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard card : cardList.getAllFlashcards()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            overallCorrectAnswer \u003d overallCorrectAnswer + card.getScore().getCorrectAnswerNumber();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return overallCorrectAnswer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up all the wrong answers in the cardList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTotalWrong(FlashcardList cardList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        int overallWrongAnswer \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard card : cardList.getAllFlashcards()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            overallWrongAnswer \u003d overallWrongAnswer + card.getScore().getWrongAnswerNumber();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return overallWrongAnswer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Sum up practice times in a cardList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static int getTotal(FlashcardList cardList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return getTotalCorrect(cardList) + getTotalWrong(cardList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 46,
      "lzw12345": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " * A class that represents each individual tagged flashcard set"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: every tag must have a unique name, no two tags can have the same name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The tag name can take in any value, but it should not be empty \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ArrayList\u003cFlashcard\u003e cardList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Tag(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        cardList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Add a new flashcard to the tag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param c the flashcard to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DuplicateCardException if the card is already under this tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addFlashcard(Flashcard c) throws DuplicateCardException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (cardList.contains(c)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        cardList.add(c);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Get the list of all the flashcards under this tag."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return a list of all flashcards."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return cardList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Remove a particular flashcard from the tag based on the flashcard ID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param id the ID of the flashcard to be removed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws CardNotFoundException the card with this ID is not found under this tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void deleteFlashcard(int id) throws CardNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        boolean cardWasFound \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard item : cardList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (item.getId().getIdentityNumber() \u003d\u003d id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                cardList.remove(item);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                cardWasFound \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!cardWasFound) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Edit the name of the tag to a new one."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param newName the new name of the tag."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While searching for a tag, check whether the tag name contains the search keyword."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s The search keyword"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if the tag name contains the keyword, false otherwise"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean contains(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return name.contains(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Check whether the tag contains a particular flashcard."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param c the flashcard to be checked."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return whether the flashcard exists."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasCard(Flashcard c) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return cardList.contains(c);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * While deleting a tag from the {@Code TagManager}, the tag should at the same time being detached from all"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * of its flashcard."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    void detachFromAllCards() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Flashcard card : cardList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            card.deleteTag(this);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Check if two tags are equivalent to each other."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Two tags are the same if and only if their names are the same."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param other the other tag to be tested."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return a boolean variable that informs whether the two tags are the same."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        if (!(other instanceof Tag)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        Tag otherTag \u003d (Tag) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return otherTag.getName().equals(getName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 72,
      "Akimatsu98": 43,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/TagManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " *  A class for managing flashcard tagged sets."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "public class TagManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private ArrayList\u003cTag\u003e allTags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public TagManager() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        allTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Identify all the relevant tags whose names contain the keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param keyword the user input keyword for searching."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return a list of all relevant tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cTag\u003e findTag(String keyword) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ArrayList\u003cTag\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        for (Tag item : allTags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (item.contains(keyword)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "                resultList.add(item);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Based on the EXACT tag name, decide if there is a tag with this name inside the tag manager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s the EXACT tag name we are looking for"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return true if such a tag with this name exists, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean hasTag(String s) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        for (Tag item : allTags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (item.getName().equals(s)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Based on the EXACT tag name given, return back the corresponding tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param s the EXACT tag name we are looking for"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return the tag with this name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws TagNotFoundException if such a tag does not exist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public Tag getTag(String s) throws TagNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        for (Tag item : allTags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            if (item.getName().equals(s)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                return item;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        throw new TagNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * list out all tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @return a list of all the tags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public ArrayList\u003cTag\u003e getAllTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return allTags;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * edit the name of a tag to a new name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param tagName the original tag name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param newName the new tag name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws TagNotFoundException if the tag with this name does not exist"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void setTagName(String tagName, String newName) throws TagNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag editTag \u003d getTag(tagName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        editTag.setName(newName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * add a new tag to the current tag list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @param name name of the new tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * @throws DuplicateTagException if this tag name already exists"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void addTag(String name) throws DuplicateTagException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assert (!hasTag(name)) : \"Flashcard list failed to check for duplicate tags.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        allTags.add(new Tag(name));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Remove a specific tag from the current tag list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param name the name of tag that is to be deleted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public void deleteTag(String name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag targetTag \u003d getTag(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        targetTag.detachFromAllCards();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        allTags.remove(targetTag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * Check whether there exists a tag with the given name."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @param name the name of the tag to be searched."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     * @return a boolean variable that informs either true or false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    public boolean contains(String name) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return allTags.contains(new Tag(name));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Akimatsu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 57,
      "Akimatsu98": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/TimeLimit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The time limit for doing a quiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Guarantees: Does not exceed an hour, minutes and seconds are both between 0 and 60."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TimeLimit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Time limit must be in the format of two integers,\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"representing minutes and seconds respectively. Since this a flashcard system, we do not \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            + \"support time limit more than or equals to an hour.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_AFTER_MINUTES \u003d \" minutes \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private static final String MESSAGE_AFTER_SECONDS \u003d \" seconds \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private int seconds;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    // Default Time Limit, 1 minute."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public TimeLimit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        minutes \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        seconds \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public TimeLimit(int minutes, int seconds) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        checkArgument(isValidTimeLimit(minutes, seconds), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        this.seconds \u003d seconds;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * Ensure both minutes and seconds are between 0 and 60"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     * The total time should be less than an hour"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    private boolean isValidTimeLimit(int minutes, int seconds) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (seconds \u003c 0 || minutes \u003c 0 || seconds \u003e\u003d 60 || minutes \u003e\u003d 60) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String minutesString \u003d Integer.toString(minutes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        String secondsString \u003d Integer.toString(seconds);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return minutesString + MESSAGE_AFTER_MINUTES + secondsString + MESSAGE_AFTER_SECONDS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        if (!(other instanceof TimeLimit)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        return minutes \u003d\u003d ((TimeLimit) other).minutes \u0026\u0026 seconds \u003d\u003d ((TimeLimit) other).seconds;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/exceptions/CardNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * The exception when a particular card id cannot be found"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class CardNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/exceptions/DuplicateCardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Exception for when adding two same cards into a tag"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DuplicateCardException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Exception when same tags are added to a flashcard"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/flashcard/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Exception when tag of a given name cannot be found"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TagNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/flashcard/DefaultFlashCards.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " * Some built in flashcards to be used in testing periods"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class DefaultFlashCards {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final ShortAnswerFlashcard MOUNT_BLANC_CARD \u003d new ShortAnswerFlashcard("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new ShortAnswerQuestion(\"What happened in Mount Blanc Tunnel in 1999?\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new Answer(\"The Mount Blanc Tunnel fire\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final ShortAnswerFlashcard KANETSU_CARD \u003d new ShortAnswerFlashcard("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new ShortAnswerQuestion(\"How long is Kan-etsu Tunnel?\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new Answer(\"11055m + 10926m\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public static final ShortAnswerFlashcard ZHONGANANSHAN_CARD \u003d new ShortAnswerFlashcard("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new ShortAnswerQuestion(\"How long is Zhongnanshan tunnel?\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "            new Answer(\"18062m\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/flashcard/FlashCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.address.flashcard.DefaultFlashCards.KANETSU_CARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class FlashCardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void equivalent_card_test() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ShortAnswerFlashcard kanestuCard \u003d new ShortAnswerFlashcard("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new ShortAnswerQuestion(\"How long is Kan-etsu Tunnel?\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Answer(\"11055m + 10926m\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(KANETSU_CARD.equals(kanestuCard));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/flashcard/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "package seedu.address.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.address.flashcard.DefaultFlashCards.KANETSU_CARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import static seedu.address.flashcard.DefaultFlashCards.MOUNT_BLANC_CARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "import seedu.address.flashcard.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagEquivalentTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels1 \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels2 \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels1.addFlashcard(MOUNT_BLANC_CARD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels1.addFlashcard(KANETSU_CARD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(tunnels1.equals(tunnels2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagDifferentTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels1 \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels2 \u003d new Tag(\"long tunnels\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels1.addFlashcard(MOUNT_BLANC_CARD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels2.addFlashcard(MOUNT_BLANC_CARD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertFalse(tunnels1.equals(tunnels2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagDuplicateCardTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.addFlashcard(KANETSU_CARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e tunnels.addFlashcard(KANETSU_CARD));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagValidDeleteCardTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.addFlashcard(KANETSU_CARD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.addFlashcard(MOUNT_BLANC_CARD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.deleteFlashcard(KANETSU_CARD.getId().getIdentityNumber());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertEquals(MOUNT_BLANC_CARD, tunnels.getFlashcards().get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagInvalidDeleteCardTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnels \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.addFlashcard(KANETSU_CARD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnels.addFlashcard(MOUNT_BLANC_CARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e tunnels.deleteFlashcard(15));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    public void tagDetachFromCardTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        ShortAnswerFlashcard Zhongnanshan \u003d new ShortAnswerFlashcard("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new ShortAnswerQuestion(\"How long is the Zhongnanshan tunnel?\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "                new Answer(\"18062m\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Tag tunnel \u003d new Tag(\"tunnels\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnel.addFlashcard(Zhongnanshan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        Zhongnanshan.addTag(tunnel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        tunnel.detachFromAllCards();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "        assertTrue(Zhongnanshan.getTags().isEmpty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Oscar-B-Liang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Oscar-B-Liang": 71
    }
  }
]
