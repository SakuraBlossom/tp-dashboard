[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003d SecureIT"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level3[image:https://travis-ci.org/AY1920S1-CS2103T-F11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT is a desktop application to manage information securely. It offers features including managing passwords, secret notes, credit cards and encrypted files. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT caters to the need of small start-ups with both monetary and infrastructural constraints. With the application, the start-ups can manage their corporate credentials at one place with minimum effort. Moreover, the employees can also use the application to manage their work credentials and personal information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* SecureIT stores all data locally and securely with one master password."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "* The original source of the code is the https://github.com/se-edu/addressbook-level3[AddressBook-Level3] project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u0027site-name\u0027: \u0027SecureIT\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-3/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 2,
      "-": 153
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "SecureIT was developed by the https://github.com/orgs/AY1920S1-CS2103T-F11-3/teams[F11-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Ni Tian Zhen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::niqiukun.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/niqiukun[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Code Quality +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: File encryption"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Hoon Chee Ping"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::hooncp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/hooncp[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Testing +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Password encryption"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Lee Ee Jian"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::eejian97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/eejian97[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / UI +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Password generation and Analysis"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Yang Hui Ting"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::yhtingg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/yhtingg[github]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Analysis  +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Credit card details encryption"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jityong"
        },
        "content": "\u003d\u003d\u003d Leow Jit Yong"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jityong"
        },
        "content": "image::jityong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jityong"
        },
        "content": "{empty}[http://github.com/jityong[github]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jityong"
        },
        "content": "Role: Developer / Design +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jityong"
        },
        "content": "Responsibilities: Notes encryption"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jityong": 26,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jityong"
        },
        "content": "* *Email us* : You can also reach us at `teammoonlight97@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "jityong": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* has a significant number of confidential documents to keep track of"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* prefers localised storage for confidential documents to online or third party vault for storing personal information and passwords"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eejian97"
        },
        "content": "*Value proposition*: Remember only one password, and save the hassle of remembering all other confidential documents (account details, credit card details, secret files, secret notes). Have a safe and secure way to store all confidential documents locally, without the use of the online/ third party / cloud-reliant vaults."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple confidential items |only have to remember a single password|store all other confidential documents"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple passwords |store my passwords| access the passwords easily if I forget them"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee handling confidential files |encrypt my files (image , text files) |other users cannot access my files"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee handling confidential files |decrypt my files (images, text files) |re-access my encrypted file/ deem them as no longer confidential"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* * *` |employee with multiple credit/debit cards |store my credit / debit card information |access the card information easily if i did not bring it out"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee that has to remember confidential snippets of information |Store notes |other users cannot see my notes  / I have a list of confidential notes which i can access easily"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |delete my passwords | my list of passwords will not have any passwords which I do not need"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |update my passwords | I can have the most updated list of passwords"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |generate strong passwords | I can create new passwords will not be cracked easily"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee with multiple passwords |analyse my passwords |I know which passwords are vulnerable and I should change them"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`* *` |employee handling confidential files |receive confirmation of which files have been encrypted |I can be sure that I have encrypted the correct files"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee handling confidential files |see the encryption status of my files |I can know which files are encrypted at one glance"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee with many credit cards/debit cards |delete my credit cards/debit cards |my list of credit cards/debit cards will not have any unnecessary ones"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee with many credit cards/debit cards |receive expiry date notifications |I can be sure that my cards are not expired"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee that has to remember confidential snippets of information|delete notes |my list of confidential notes will not have any unnecessary confidential notes"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eejian97"
        },
        "content": "|`*  *` |employee that has to remember confidential snippets of information|update notes |I can change my notes if there are any new updates to the confidential information"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hooncp"
        },
        "content": "(For all use cases below, the *Actor* is the `user`, the precondition is that `user` needs to be *logged in*, unless specified otherwise)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `PasswordSys`, `FileSys`, `NoteSys`, `CardSys`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC01 - Access password window"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC02 - Access file window"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC03 - Access note window"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. UC04 - Access credit card window"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC01 - Access password window"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access password window"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. PasswordSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC02 - Access file window"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access file window"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. FileSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC03 - Access note window"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access note window"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. NoteSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC02 - Access credit card window"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User request to access credit card window"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. CardSys checks if user is logged in and gives access to user"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `PasswordSys`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC11 - Add a password"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC12 - Delete a password"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC13 - Update a password"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. UC14 - Generate a password"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. UC15 - Analyse all password"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC11 - Add a password"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to add password"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters details"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys adds the password"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Not all details are entered."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC12 - Delete a password"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to delete a password"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys removes the password"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC13 - Update a password"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to update a password"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password and details of changed password"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys updates the password"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC14 - Generate a password"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to generate a password"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. PasswordSys generates a password"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. No description entered"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2b. Description entered already exists"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2b1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC15 - Analyse all password"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to analyse passwords"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. PasswordSys shows report of analysis"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. No passwords available"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. PasswordSys shows an error message"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case end."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "System: `FileSys`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. UC21 - Encrypt a file"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. UC22 - Decrypt a file"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC21 - Encrypt a file"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to encrypt a file"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enter details"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. FileSys encrypts the file"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. FileSys shows an error message"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC22 - Decrypt a file"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to decrypt a file"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters details"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. FileSys decrypts the file"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. FileSys shows an error message"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hooncp"
        },
        "content": "System: `NoteSys`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d Use case:"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. UC31 - Add a note"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. UC32 - Delete a note"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. UC33 - Update a note"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hooncp"
        },
        "content": "---"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC31 - Add a note"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Guarantees:*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. Note will be created after step 2 has been executed"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to add a note"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of note"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys opens a new note"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. User enters note details"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. User submits the note"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hooncp"
        },
        "content": "6. NoteSys saves the note"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered already exists"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a2. NoteSys requests for a new description"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a3. User enters new description"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** Steps 2a1-2a3 are repeated until the description entered is valid"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** Use case resumes from step 4"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hooncp"
        },
        "content": "--"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 5a. No text entered"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 5a1. NoteSys shows a warning message"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case resumes from step 5"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC32 - Delete a note"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to delete a note"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of note"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys removes the note"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC33 - Update a note"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "hooncp"
        },
        "content": "1. User chooses to update a note"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "hooncp"
        },
        "content": "2. User enters description of password"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "hooncp"
        },
        "content": "3. NoteSys opens the note"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "hooncp"
        },
        "content": "4. User edits note details"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "hooncp"
        },
        "content": "5. User submits the note"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "hooncp"
        },
        "content": "6. NoteSys saves the note"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 2a. Description entered is invalid"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 2a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* 5a. No text entered"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "hooncp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "hooncp"
        },
        "content": "** 5a1. NoteSys shows an error message"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "hooncp"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "System: `CardSys`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d Use Case:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. UC41 - Add a card"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. UC42 - Delete a card"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "---"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC41 - Add a card"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to add a card"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters description and details"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. CardSys adds the card"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Details entered are invalid"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. CardSys shows an error message"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a2.CardSys requests for new details"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a3. User enters new details"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** Steps 2s1-2s3 are repeated until the details entered are valid"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** Use case resumes from step 3"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "\u003d\u003d\u003d UC42 - Delete a card"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "1. User chooses to delete a card"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "2. User enters description"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "3. CardSys removes the card"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* 2a. Description entered does not exist"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "** 2a1. CardSys shows an error message"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Accessibility"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* A user shall be able to download the released JAR file conveniently from the newest tagged release."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The app shall be accessible by anyone who has downloaded the released JAR file."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Should be accommodating for both advanced, seasoned users as well as new users."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Efficiency"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The response of the app to any user action shall appear within 5 seconds."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Performance"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  The app shall be able to contain up to 1000 items without any drop in performance."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Reliability"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* The app shall throw appropriate exceptions when any user input is invalid or any user action fails to execute completely."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Security"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "* The app shall resist unauthorised, accidential or unintended usage and provide access only to legitimate users."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "Usability"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yhtingg"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yhtingg"
        },
        "content": "*  A user with above average typing speed for regular English (i.e. not code, not system admin commands) shall be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "eejian97"
        },
        "content": "Data Integrity"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "eejian97"
        },
        "content": "* Should be able to check for the data integrity as to verify that no one has modified the files within secureIT in an unauthorised fashion."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "eejian97"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "yhtingg": 144,
      "eejian97": 40,
      "hooncp": 249,
      "-": 421
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d SecureIT - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hooncp"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hooncp"
        },
        "content": "By: `SecureIT`      Since: `August 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hooncp"
        },
        "content": "SecureIT is for those who *prefer a secure password manager that stores your password locally*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".  Download the latest `SecureIT.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your SecureIT."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hooncp"
        },
        "content": ".  Enter password for SecureIT or set up a new password if it is your first time accessing the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d  Accessing password directory : `goto password`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a password : `add`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Adds a password to the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `add \u003cdesc\u003e \u003cusername\u003e \u003cpassword\u003e`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `add Gmail user1 password1`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing a password : `open`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Shows the username and password for the specified password description provided by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `open \u003cdesc\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `open Gmail`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Updating a password : `update`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Updates a password as specified by the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `update \u003cdesc\u003e`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `update Gmail`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updating description: `-d`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Updates specified password’s description."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `-d \u003cdesc\u003e`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `-d Hotmail`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updating username: `-u`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Updates specified password’s username."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `-u \u003cusername\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `-u user2`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updating password: `-p`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Updates specified password’s password."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `-p \u003cpassword\u003e`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `-p password2`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a password: `delete`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Deletes a password as specified by the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `delete \u003cdesc\u003e`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `delete Gmail`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a password: `find`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Finds a password description as specified by the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `find \u003cdesc\u003e`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `find Gmail`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* The search is case insensitive. e.g `gmail` will match `Gmail`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Generating a new password: `generate`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Generates a new random strong password for the user with the specified description username."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `generate \u003cdesc\u003e \u003cusername\u003e`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `generate Gmail user3`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Analysing all password: `analyse`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Analyses all passwords for the user and creates a report for the user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `analyse`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d  Accessing card directory : `goto card`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a card : `add`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Adds a credit/debit card to the app."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `add \u003cdescription\u003e \u003ccardNumber\u003e \u003cexpiry\u003e \u003ccvc\u003e`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `add VisaPOSB`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a card: `delete`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Deletes a card as specified by the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `delete \u003cdescription\u003e`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `delete VisaPOSB`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d  Accessing note directory : `goto file`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting a file : `encrypt`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Encrypts a local file as specified by the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `encrypt \u003cfilepath\u003e \u003cfilename\u003e`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `encrypt /docs/mysecret/secret_photo.png secretphoto`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Decrypting a file : `encrypt`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Decrypts a local file as specified by the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `decrypt \u003cfilepath\u003e \u003cfilename\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `decrypt /docs/mysecret/secret_photo.png secretphoto`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a file: `find`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Finds a local file as specified by the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `find \u003cfilename\u003e`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `find secretphoto`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* The search is case insensitive. e.g `secretphoto` will match `SecretPhoto`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d  Accessing note directory : `goto note`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a note : `add`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Adds a note to the app."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `add \u003ctitle\u003e`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `add personal_diary`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Accessing a note : `open`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Opens a note to the app."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `open \u003cnote\u003e`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `open personal_diary`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a note: `delete`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Deletes a note as specified by the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `delete \u003cnote\u003e`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `delete personal_diary`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hooncp"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a note: `find`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Finds a note as specified by the user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Format: `find \u003cnote\u003e`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hooncp"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hooncp"
        },
        "content": "Example: `find personal_diary`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hooncp"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* The search is case insensitive. e.g `Personal_diary` will match `personal_diary`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hooncp"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hooncp"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hooncp"
        },
        "content": "SecureIT data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hooncp"
        },
        "content": "*A*: Install the app in the other computer and copy store.tmp files from the application’s directory to the new computer."
      }
    ],
    "authorContributionMap": {
      "hooncp": 151,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.TextInputDialog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.FileBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.JsonFileBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.storage.TestStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises SecureIT app with the given password."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the master password used to encrypt data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void initWithPassword(String password) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath(), password);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath(), password);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath(), password);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileBookStorage fileBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonFileBookStorage(userPrefs.getFileBookFilePath(), password);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, fileBookStorage, userPrefsStorage, password);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ReadOnlyFileBook initialDataFile \u003d initFileBook(storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new ModelManager(initialData, initialDataFile, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns data from {@code storage}\u0027s file book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ReadOnlyFileBook initFileBook(Storage storage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cReadOnlyFileBook\u003e fileBookOptional;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ReadOnlyFileBook initialFileData;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileBookOptional \u003d storage.readFileBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (!fileBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d fileBookOptional.orElseGet(FileBook::new);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d new FileBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FileBook\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            initialFileData \u003d new FileBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return initialFileData;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    protected Config initConfig(Path configFilePath, String password) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readEncryptedConfig(configFilePathUsed, password);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed, password);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!TestStorage.isUserExist()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            TextInputDialog dialog \u003d new TextInputDialog();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            dialog.setTitle(\"SecureIT\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            dialog.setHeaderText(\"Create your master password\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            dialog.setContentText(\"Password: \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Optional\u003cString\u003e result \u003d dialog.showAndWait();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (result.isPresent()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    TestStorage.initPassword(result.get());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    initWithPassword(result.get());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    startAddressBook(primaryStage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    //TODO: if init password fails"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                TextInputDialog dialog \u003d new TextInputDialog();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                dialog.setTitle(\"SecureIT\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                dialog.setHeaderText(\"Enter your master password\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                dialog.setContentText(\"Password: \");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                Optional\u003cString\u003e result \u003d dialog.showAndWait();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                if (result.isPresent()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        if (TestStorage.testPassword(result.get())) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            initWithPassword(result.get());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            startAddressBook(primaryStage);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                        //TODO: if test password fails"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void startAddressBook(Stage primaryStage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (storage !\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 89,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_DISPLAYED_INDEX \u003d \"The file index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FILES_LISTED_OVERVIEW \u003d \"%1$d files listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Optional\u003cConfig\u003e readEncryptedConfig(Path configFilePath, String password)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return JsonUtil.readEncryptedJsonFile(configFilePath, Config.class, password);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath, String password) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUtil.saveEncryptedJsonFile(config, configFilePath, password);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 7,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EncryptionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.Cipher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.SecretKey;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.SecretKeyFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.spec.PBEKeySpec;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javax.crypto.spec.PBEParameterSpec;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class for handling encryption and decryption."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptionUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * An enumeration to represent encryption mode and decryption mode."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private enum EncryptionMode {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ENCRYPT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        DECRYPT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final byte[] salt \u003d {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        (byte) 0x43, (byte) 0x76, (byte) 0x95, (byte) 0xc7,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        (byte) 0x5b, (byte) 0xd7, (byte) 0x45, (byte) 0x17"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final int iteration \u003d 68;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts or decrypts a byte array using a given password."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be encrypted or decrypted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption or decryption."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param mode whether to encrypt or decrypt the byte array."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted or decrypted byte array."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static byte[] cipherBytes(byte[] input, String password, EncryptionMode mode)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws GeneralSecurityException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PBEKeySpec keySpec \u003d new PBEKeySpec(password.toCharArray());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        SecretKeyFactory keyFactory \u003d SecretKeyFactory.getInstance(\"PBEWithMD5AndTripleDES\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        SecretKey key \u003d keyFactory.generateSecret(keySpec);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        PBEParameterSpec pbeParameterSpec \u003d new PBEParameterSpec(salt, iteration);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Cipher cipher \u003d Cipher.getInstance(\"PBEWithMD5AndTripleDES\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case ENCRYPT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            cipher.init(Cipher.ENCRYPT_MODE, key, pbeParameterSpec);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case DECRYPT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            cipher.init(Cipher.DECRYPT_MODE, key, pbeParameterSpec);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipher.doFinal(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a byte array using a given password."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be encrypted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted byte array."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] encryptBytes(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipherBytes(input, password, EncryptionMode.ENCRYPT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a byte array using a given password."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be decrypted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted byte array."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] decryptBytes(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return cipherBytes(input, password, EncryptionMode.DECRYPT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a string into byte array using a given password."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the string to be encrypted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for encryption."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the encrypted byte array."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static byte[] encryptBytesFromString(String input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return encryptBytes(input.getBytes(), password);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a byte array into string using a given password."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param input the byte array to be decrypted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted string."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String decryptBytesToString(byte[] input, String password) throws GeneralSecurityException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new String(decryptBytes(input, password));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts a file using the given file path and password."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param path the path of the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the encryption fails."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void encryptFile(String path, String password) throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path oldPath \u003d Paths.get(path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] fileData \u003d Files.readAllBytes(oldPath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] encryptedData \u003d encryptBytes(fileData, password);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path newPath \u003d Paths.get(oldPath.getParent().toString()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + \"/[LOCKED] \" + oldPath.getFileName().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.write(newPath, encryptedData);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.deleteIfExists(oldPath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Decrypts a file using the given file path and password."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param path the path of the file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the password used for decryption."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the decryption fails."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void decryptFile(String path, String password) throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path oldPath \u003d Paths.get(path);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] fileData \u003d Files.readAllBytes(oldPath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] decryptedData \u003d decryptBytes(fileData, password);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Path newPath \u003d Paths.get(oldPath.getParent().toString()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + \"/\" + oldPath.getFileName().toString().replace(\"[LOCKED] \", \"\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.write(newPath, decryptedData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Files.deleteIfExists(oldPath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Read data as string from an encrypted file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param file the file to be decrypted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to decrypt the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the decrypted string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the file cannot be decrypted using the password."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static String readFromEncryptedFile (Path file, String password) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jityong"
        },
        "content": "            return new String(EncryptionUtil.decryptBytes(Files.readAllBytes(file), password), CHARSET);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Read encrypted file failed.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Write data as string to an encrypted file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param file the file to be written."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to encrypt the string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the file cannot be encrypted using the password."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jityong"
        },
        "content": "    public static void writeToEncryptedFile (Path file, String content, String password) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jityong"
        },
        "content": "            Files.write(file, EncryptionUtil.encryptBytes(content.getBytes(CHARSET), password));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Write encrypted file failed.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 23,
      "jityong": 8,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    static \u003cT\u003e void serializeObjectToEncryptedJsonFile(Path jsonFile, T objectToSerialize, String password)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "        FileUtil.writeToEncryptedFile(jsonFile, toJsonString(objectToSerialize), password);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromEncryptedJsonFile(Path jsonFile,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                                        Class\u003cT\u003e classOfObjectToDeserialize,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                                                        String password)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jityong"
        },
        "content": "        return fromJsonString(FileUtil.readFromEncryptedFile(jsonFile, password), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the Json object from the given encrypted file or {@code Optional.empty()} object if the file is not"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * found. If any values are missing from the file, default values will be used, as long as the file is a valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * json file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to decrypt the Json file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readEncryptedJsonFile("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize, String password) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFile \u003d deserializeObjectFromEncryptedJsonFile(filePath, classOfObjectToDeserialize, password);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Encrypts and saves the Json object to the specified file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password used to encrypt the file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static \u003cT\u003e void saveEncryptedJsonFile(T jsonFile, Path filePath, String password) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        serializeObjectToEncryptedJsonFile(filePath, jsonFile, password);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 51,
      "jityong": 2,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if two strings are equal, or both strings are null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param a the first string to be compared."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param b the second string to be compared."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether two strings are equal, or both strings are null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean equalOrBothNull(String a, String b) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (a \u003d\u003d null \u0026\u0026 b \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else if (a !\u003d null \u0026\u0026 b !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return a.equals(b);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the FileBook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see seedu.address.model.Model#getFileBook()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ReadOnlyFileBook getFileBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of files */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setMode(String newMode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    String getMode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.FileBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileBookParser fileBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBookParser \u003d new FileBookParser(storage.getStoragePassword());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        mode \u003d \"home\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            command \u003d fileBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            switch (mode) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            case \"file\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                storage.saveFileBook(model.getFileBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return model.getFileBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return model.getFilteredFileList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setMode(String newMode) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        mode \u003d newMode;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getMode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 45,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final boolean isGoTo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String modeToGoTo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean goTo, String modeToGoTo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.isGoTo \u003d goTo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.modeToGoTo \u003d modeToGoTo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(feedbackToUser, false, false, false, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean isGoTo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return isGoTo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getModeToGoTo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return modeToGoTo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 isGoTo \u003d\u003d otherCommandResult.isGoTo"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 StringUtil.equalOrBothNull(modeToGoTo, otherCommandResult.modeToGoTo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isGoTo, modeToGoTo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 21,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DecryptFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Decrypt a file identified using it\u0027s displayed index from the file book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DecryptFileCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"decrypt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Decrypt the file identified by the index number used in the displayed file list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_SUCCESS \u003d \"File decrypted: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_FAILURE \u003d \"File decryption failed.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DecryptFileCommand(Index targetIndex, String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        List\u003cEncryptedFile\u003e lastShownList \u003d model.getFilteredFileList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile fileToDecrypt \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.decryptFile(fileToDecrypt.getEncryptedPath(), password);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_FILE_FAILURE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_FILE_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.deleteFile(fileToDecrypt);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FILE_SUCCESS, fileToDecrypt));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof DecryptFileCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DecryptFileCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EncryptFileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Encrypt a file identified using it\u0027s file path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"encrypt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \": Encrypts the file in user\u0027s file system specified the file path.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Parameters: FILEPATH\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" ~/Desktop/sample.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File encrypted: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"File encryption failed.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FILE \u003d \"This file is already encrypted.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedFile toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates an EncryptFileCommand to encrypt the specified {@code File}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptFileCommand(EncryptedFile file, String password) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(file, password);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        toAdd \u003d file;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (model.hasFile(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FILE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptionUtil.encryptFile(toAdd.getFullPath(), password);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        model.addFile(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 toAdd.equals(((EncryptFileCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_GOTO_ACKNOWLEDGEMENT \u003d \"Switched to %s mode.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public GoToCommand(String mode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GOTO_ACKNOWLEDGEMENT, mode), false, false, true, mode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 4,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DecryptFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.DecryptFileCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new DecryptFileCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DecryptFileCommandParser implements FileCommandParser\u003cDecryptFileCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DecryptFileCommand parse(String args, String password) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new DecryptFileCommand(index, password);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptFileCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EncryptFileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.EncryptFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new EncryptFileCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptFileCommandParser implements FileCommandParser\u003cEncryptFileCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptFileCommand parse(String args, String password) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileName fileName \u003d ParserUtil.parseFileName(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FilePath filePath \u003d ParserUtil.parseFilePath(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedAt encryptedAt \u003d new EncryptedAt(new Date());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile file \u003d new EncryptedFile(fileName, filePath, encryptedAt, tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new EncryptFileCommand(file, password);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FileBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.DecryptFileCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.EncryptFileCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses user input for file book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileBookParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises a FileBookParser with a given password for file encryption."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBookParser(String password) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case EncryptFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new EncryptFileCommandParser().parse(arguments, password);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case DecryptFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new DecryptFileCommandParser().parse(arguments, password);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case GoToCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new GoToCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FileCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface FileCommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    T parse(String userInput, String password) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoToCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.commands.GoToCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class GoToCommandParser implements Parser\u003cGoToCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public GoToCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new GoToCommand(args.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses a {@code String fullPath} into a {@code FileName}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the given {@code fullPath} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static FileName parseFileName(String fullPath) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fullPath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String trimmedFullPath \u003d fullPath.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String fileName \u003d Path.of(trimmedFullPath).getFileName().toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!FileName.isValidFileName(fileName)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(FileName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FileName(fileName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Parses a {@code String fullPath} into a {@code FilePath}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if the given {@code fullPath} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static FilePath parseFilePath(String fullPath) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fullPath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String trimmedFullPath \u003d fullPath.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String filePath \u003d Path.of(trimmedFullPath).getParent().toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!FilePath.isValidFilePath(filePath)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new ParseException(FilePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new FilePath(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.UniqueFileList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Wraps all data at the file-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileBook implements ReadOnlyFileBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final UniqueFileList files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates an empty FileBook."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files \u003d new UniqueFileList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Creates a FileBook using the Files in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook(ReadOnlyFileBook toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the contents of the file list with {@code files}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code files} must not contain duplicate files."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.files.setFiles(files);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Resets the existing data of this {@code FileBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void resetData(ReadOnlyFileBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        setFiles(newData.getFileList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a file with the same identity as {@code file} exists in the file book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.contains(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds a file to the file book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must not already exist in the file book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile p) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.add(p);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the given file {@code target} in the list with {@code editedFile}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file identity of {@code editedFile} must not be the same as another existing file in the file book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(editedFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.setFile(target, editedFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Removes {@code key} from this {@code FileBook}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code key} must exist in the file book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void removeFile(EncryptedFile key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.asUnmodifiableObservableList().size() + \" files\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFileList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FileBook // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 files.equals(((FileBook) other).files));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return files.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces file book data with the data in {@code fileBook}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setFileBook(ReadOnlyFileBook fileBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /** Returns the FileBook */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ReadOnlyFileBook getFileBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a file with the same identity as {@code file} exists in the file book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    boolean hasFile(EncryptedFile file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Deletes the given file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void deleteFile(EncryptedFile target);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds the given file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code person} must not already exist in the file book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void addFile(EncryptedFile file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the given file {@code target} with {@code editedFile}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the file book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file identity of {@code editedPerson} must not be the same as another existing file in the file book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void setFile(EncryptedFile target, EncryptedFile editedFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /** Returns an unmodifiable view of the filtered file list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFilteredFileList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Updates the filter of the filtered file list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 42,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileBook fileBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FilteredList\u003cEncryptedFile\u003e filteredFiles;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyFileBook fileBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(addressBook, fileBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBook \u003d new FileBook(fileBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filteredFiles \u003d new FilteredList\u003c\u003e(this.fileBook.getFileList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(addressBook, new FileBook(), userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this(new AddressBook(), new FileBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FileBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileBook(ReadOnlyFileBook fileBook) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBook.resetData(fileBook);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook.hasFile(file);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void deleteFile(EncryptedFile target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.removeFile(target);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.addFile(file);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, editedFile);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBook.setFile(target, editedFile);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered File List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code EncryptedFile} backed by the internal list of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code versionedFileBook}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filteredFiles;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filteredFiles.setPredicate(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 65,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Unmodifiable view of a file book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface ReadOnlyFileBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an unmodifiable view of the files list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * This list will not contain any duplicate files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    ObservableList\u003cEncryptedFile\u003e getFileList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Path fileBookFilePath \u003d Paths.get(\"data\" , \"filebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFileBookFilePath(Path fileBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fileBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBookFilePath \u003d fileBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 10,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/EncryptedAt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s encryption date and time in SecureIT."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedAt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Encrypted at should be in the format of dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs an {@code EncryptedAt} field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param encryptedAt A file\u0027s encryption date and time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedAt(Date encryptedAt) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d encryptedAt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return DateUtil.formatDate(value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof EncryptedAt // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((EncryptedAt) other).value)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/EncryptedFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents an Encrypted File in SecureIT."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptedFile {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FileName fileName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final FilePath filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final EncryptedAt encryptedAt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile(FileName fileName, FilePath filePath, EncryptedAt encryptedAt, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(fileName, filePath, encryptedAt, tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.encryptedAt \u003d encryptedAt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileName getFileName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FilePath getFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedAt getEncryptedAt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return encryptedAt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the full path of the file in string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getFullPath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Paths.get(getFilePath().value + \"/\" + getFileName()).toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the full path of the encrypted file in string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getEncryptedPath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Paths.get(getFilePath().value + \"/[LOCKED] \" + getFileName()).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!(other instanceof EncryptedFile)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        EncryptedFile otherFile \u003d (EncryptedFile) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return otherFile.getFileName().equals(getFileName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getFilePath().equals(getFilePath())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getEncryptedAt().equals(getEncryptedAt())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getTags().equals(getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Objects.hash(fileName, filePath, encryptedAt, tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        builder.append(getFileName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if both files have the same file name and path."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean isSameFile(EncryptedFile otherFile) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (otherFile \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return otherFile !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 otherFile.getFileName().equals(getFileName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 (otherFile.getFilePath().equals(getFilePath()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FileName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s FileName in SecureIT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File name should not be blank.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code FileName}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileName A file\u0027s name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileName(String fileName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d fileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a given string is a valid file name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isValidFileName(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return !(\"\".equals(test.trim()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FileName // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((FileName) other).value)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/FilePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a File\u0027s FilePath in SecureIT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File path should not be blank.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code FilePath}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileName A file\u0027s path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FilePath(String fileName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        value \u003d fileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if a given string is a valid file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return !(\"\".equals(test.trim()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof FilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 value.equals(((FilePath) other).value)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/UniqueFileList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.exceptions.DuplicateFileException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.exceptions.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A list of files that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class UniqueFileList implements Iterable\u003cEncryptedFile\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final ObservableList\u003cEncryptedFile\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final ObservableList\u003cEncryptedFile\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if the list contains an equivalent file as the given argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean contains(EncryptedFile toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFile);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Adds a file to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must not already exist in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void add(EncryptedFile toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the file {@code target} in the list with {@code editedFile}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The person identity of {@code editedFile} must not be the same as another existing file in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(target, editedFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!target.isSameFile(editedFile) \u0026\u0026 contains(editedFile)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.set(index, editedFile);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Removes the equivalent file from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * The file must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void remove(EncryptedFile toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(UniqueFileList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Replaces the contents of this list with {@code files}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void setFiles(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireAllNonNull(files);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!filesAreUnique(files)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DuplicateFileException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        internalList.setAll(files);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public ObservableList\u003cEncryptedFile\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Iterator\u003cEncryptedFile\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                || (other instanceof UniqueFileList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFileList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if {@code persons} contains only unique files."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private boolean filesAreUnique(List\u003cEncryptedFile\u003e files) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (int i \u003d 0; i \u003c files.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            for (int j \u003d i + 1; j \u003c files.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                if (files.get(i).isSameFile(files.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/exceptions/DuplicateFileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Signals that the operation will result in duplicate Files (Files are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * file name and path)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DuplicateFileException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public DuplicateFileException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(\"Operation would result in duplicate files\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/file/exceptions/FileNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.file.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Contains utility methods for parsing and formatting date and time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a Date object using the string supplied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param rawDate the string to be parsed as a Date object in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the Date object parsed from the given string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws ParseException if rawDate supplied is not in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static Date parseDate(String rawDate) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Date newDate \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(rawDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a Date object into the storage format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param date the Date object to be converted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the formatted date string, in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String formatDate(Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new SimpleDateFormat(\"dd/MM/yyyy HHmm\").format(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a Date object into the display format of dd MMM yyyy at HH:mm."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param date the Date object to be converted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return the formatted date string, in the format of dd MMM yyyy at HH:mm."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static String formatDateForDisplay(Date date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new SimpleDateFormat(\"dd MMM yyyy\").format(date) + \" at \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                + new SimpleDateFormat(\"HH:mm\").format(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns true if the string supplied is in the format of dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isValidDateFormat(String rawDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(rawDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FileBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Represents a storage for {@link seedu.address.model.FileBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface FileBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the password used to store the file book and encrypt files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    String getStoragePassword();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns FileBook data as a {@link ReadOnlyFileBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see #getFileBookFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Saves the given {@link ReadOnlyFileBook} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param fileBook cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook fileBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see #saveFileBook(ReadOnlyFileBook)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedAt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.FilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.file.EncryptedFile}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "class JsonAdaptedFile {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"File\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final String encryptedAt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code JsonAdaptedFile} with the given file details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAdaptedFile(@JsonProperty(\"filename\") String fileName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"path\") String filePath,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"encrypted_at\") String encryptedAt,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.encryptedAt \u003d encryptedAt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a given {@code EncryptedFile} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAdaptedFile(EncryptedFile source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileName \u003d source.getFileName().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        filePath \u003d source.getFilePath().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        encryptedAt \u003d DateUtil.formatDate(source.getEncryptedAt().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public EncryptedFile toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final List\u003cTag\u003e fileTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (fileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    FileName.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final FileName modelName \u003d new FileName(fileName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    FilePath.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final FilePath modelPath \u003d new FilePath(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (encryptedAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptedAt.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final EncryptedAt modelEncryptedAt;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            modelEncryptedAt \u003d new EncryptedAt(DateUtil.parseDate(encryptedAt));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IllegalValueException(EncryptedAt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(fileTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return new EncryptedFile(modelName, modelPath, modelEncryptedAt, modelTags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonAddressBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonAddressBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonAddressBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableAddressBook.class, password);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableAddressBook(addressBook), filePath, password);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 16,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFileBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * A class to access FileBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class JsonFileBookStorage implements FileBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFileBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonFileBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonFileBookStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getStoragePassword() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return readFileBook(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Similar to {@link #readFileBook()}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Optional\u003cJsonSerializableFileBook\u003e jsonFileBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFileBook \u003d JsonUtil.readJsonFile(filePath, JsonSerializableFileBook.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            jsonFileBook \u003d JsonUtil.readEncryptedJsonFile(filePath, JsonSerializableFileBook.class, password);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!jsonFileBook.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return Optional.of(jsonFileBook.get().toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        saveFileBook(fileBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Similar to {@link #saveFileBook(ReadOnlyFileBook)}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(fileBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFileBook(fileBook), filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(new JsonSerializableFileBook(fileBook), filePath, password);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFileBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.FileBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * An Immutable FileBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "@JsonRootName(value \u003d \"filebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "class JsonSerializableFileBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Files list contains duplicate file(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final List\u003cJsonAdaptedFile\u003e files \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Constructs a {@code JsonSerializableFileBook} with the given files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonSerializableFileBook(@JsonProperty(\"files\") List\u003cJsonAdaptedFile\u003e files) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.files.addAll(files);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts a given {@code ReadOnlyFileBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFileBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonSerializableFileBook(ReadOnlyFileBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        files.addAll(source.getFileList().stream().map(JsonAdaptedFile::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Converts this file book into the model\u0027s {@code FileBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileBook fileBook \u003d new FileBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        for (JsonAdaptedFile jsonAdaptedFile : files) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            EncryptedFile file \u003d jsonAdaptedFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (fileBook.hasFile(file)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileBook.addFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath, String password) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return JsonUtil.readEncryptedJsonFile(prefsFilePath, UserPrefs.class, password);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            JsonUtil.saveEncryptedJsonFile(userPrefs, filePath, password);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public interface Storage extends AddressBookStorage, FileBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    String getStoragePassword();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Path getFileBookFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void saveFileBook(ReadOnlyFileBook fileBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileBookStorage fileBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jityong"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage, String password) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                          FileBookStorage fileBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                          String password) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.fileBookStorage \u003d fileBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public String getStoragePassword() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FileBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Path getFileBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookStorage.getFileBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return readFileBook(fileBookStorage.getFileBookFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public Optional\u003cReadOnlyFileBook\u003e readFileBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return fileBookStorage.readFileBook(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        saveFileBook(fileBook, fileBookStorage.getFileBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void saveFileBook(ReadOnlyFileBook fileBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileBookStorage.saveFileBook(fileBook, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 43,
      "jityong": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TestStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.util.EncryptionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Handles initialisation and validation of master password."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class TestStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String MAGIC_WORD \u003d \"hello world\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String TEST_FILENAME \u003d \"magic_word\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Initialises a master password and store the encrypted magic word in the storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the master password."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the master password cannot be stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static void initPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            byte[] encryptedByteArray \u003d EncryptionUtil.encryptBytesFromString(MAGIC_WORD, password);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(Paths.get(TEST_FILENAME), encryptedByteArray);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new IOException(\"Init password failed.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns whether the given password matches the master password set previously."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @param password the given password."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether the given password matches the master password."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @throws IOException if the encrypted magic word file cannot be retrieved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean testPassword(String password) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        byte[] byteArrayFromFile \u003d Files.readAllBytes(Paths.get(TEST_FILENAME));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            String decryptedMagicWord \u003d EncryptionUtil.decryptBytesToString(byteArrayFromFile, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return MAGIC_WORD.equals(decryptedMagicWord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Returns whether the user has already set the master password."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @return whether the master password is already set."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public static boolean isUserExist() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return Files.exists(Paths.get(TEST_FILENAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.Dragboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handles drag over event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void handleDragOver(DragEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (event.getGestureSource() !\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 event.getDragboard().hasFiles()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handles drag dropped event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private void handleDragDropped(DragEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Dragboard dragboard \u003d event.getDragboard();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        boolean success \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (dragboard.hasFiles()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            commandTextField.setText(commandTextField.getText() + dragboard.getFiles().get(0).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            success \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.setDropCompleted(success);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 31,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.util.DateUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * An UI component that displays information of an {@code EncryptedFile}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FXML \u003d \"FileListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public final EncryptedFile file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private Label encryptedAt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileCard(EncryptedFile file, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        name.setText(file.getFileName().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        path.setText(\"Location:\\t\\t\" + file.getFilePath().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        encryptedAt.setText(\"Encrypted: \\t\" + DateUtil.formatDateForDisplay(file.getEncryptedAt().value));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        file.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        if (!(other instanceof FileCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileCard card \u003d (FileCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                \u0026\u0026 file.equals(card.file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FileListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class FileListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String FXML \u003d \"FileListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FileListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private ListView\u003cEncryptedFile\u003e fileListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public FileListPanel(ObservableList\u003cEncryptedFile\u003e fileList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileListView.setItems(fileList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fileListView.setCellFactory(listView -\u003e new FileListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code EncryptedFile} using a {@code FileCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    class FileListViewCell extends ListCell\u003cEncryptedFile\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        protected void updateItem(EncryptedFile file, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            super.updateItem(file, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (empty || file \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                setGraphic(new FileCard(file, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private FileListPanel fileListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fillInnerPartsWithMode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Fills up all the placeholders of this window using the current mode."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void fillInnerPartsWithMode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        switch (logic.getMode()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            fileListPanel \u003d new FileListPanel(logic.getFilteredFileList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(fileListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     * Handle UI changes on mode change."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    void handleModeChange() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        fillInnerPartsWithMode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            if (commandResult.isGoTo()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                switch (commandResult.getModeToGoTo()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                case \"password\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    logic.setMode(\"password\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                case \"file\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    logic.setMode(\"file\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                case \"note\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    logic.setMode(\"note\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    logic.setMode(\"home\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                handleModeChange();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 43,
      "-": 191
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onDragDropped\u003d\"#handleDragDropped\" onDragOver\u003d\"#handleDragOver\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/FileListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cLabel fx:id\u003d\"path\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$path\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "      \u003cLabel fx:id\u003d\"encryptedAt\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$encryptedAt\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 35
    }
  },
  {
    "path": "src/main/resources/view/FileListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "  \u003cListView fx:id\u003d\"fileListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        Config readBack \u003d ConfigUtil.readEncryptedConfig(configFilePath, PASSWORD).get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        readBack \u003d ConfigUtil.readEncryptedConfig(configFilePath, PASSWORD).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath, PASSWORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 6,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/EncryptionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jityong"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "public class EncryptionUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void encryptDecryptBytes_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String testString \u003d \"hello world\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        String password \u003d \"password\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            assertEquals(testString,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    EncryptionUtil.decryptBytesToString(EncryptionUtil.encryptBytesFromString(testString, password),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                            password));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jityong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    public void encryptDecryptFromFile_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jityong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jityong"
        },
        "content": "            String testString \u003d \"hello world\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jityong"
        },
        "content": "            String password \u003d \"password\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jityong"
        },
        "content": "            byte[] encryptedByteArray \u003d EncryptionUtil.encryptBytesFromString(testString, password);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            Files.write(TestUtil.getFilePathInSandboxFolder(\"test.txt\"), encryptedByteArray);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            byte[] encryptedByteArrayFromFile \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                    Files.readAllBytes(TestUtil.getFilePathInSandboxFolder(\"test.txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jityong"
        },
        "content": "            assertEquals(encryptedByteArray.length, encryptedByteArrayFromFile.length);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jityong"
        },
        "content": "            assertEquals(testString, EncryptionUtil.decryptBytesToString(encryptedByteArrayFromFile, password));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jityong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jityong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jityong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jityong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jityong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 29,
      "jityong": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUtil.serializeObjectToEncryptedJsonFile(SERIALIZATION_FILE, serializableTestClass, PASSWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertEquals(FileUtil.readFromEncryptedFile(SERIALIZATION_FILE, PASSWORD),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        FileUtil.writeToEncryptedFile(SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION, \"password1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                .deserializeObjectFromEncryptedJsonFile(SERIALIZATION_FILE, SerializableTestClass.class, PASSWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 7,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"), PASSWORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"), PASSWORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"), PASSWORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            super(filePath, PASSWORD);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 8,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.ReadOnlyFileBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "import seedu.address.model.file.EncryptedFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void addFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void setFileBook(ReadOnlyFileBook newData) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public ReadOnlyFileBook getFileBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public boolean hasFile(EncryptedFile file) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void deleteFile(EncryptedFile target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void setFile(EncryptedFile target, EncryptedFile editedFile) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public ObservableList\u003cEncryptedFile\u003e getFilteredFileList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        public void updateFilteredFileList(Predicate\u003cEncryptedFile\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 42,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false, null)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false, null)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false, null)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different goTo value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true, null)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false, null).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false, null).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        // different goTo value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true, null).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 11,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath, PASSWORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath), PASSWORD)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 3,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder), PASSWORD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath, PASSWORD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 3,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "    private static final String PASSWORD \u003d \"password1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "niqiukun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"), PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"), PASSWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "niqiukun"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, PASSWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "niqiukun": 5,
      "-": 65
    }
  }
]
