[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Address Book (Level 3)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "https://travis-ci.org/brianyenna/main[image:https://travis-ci.org/brianyenna/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 35
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-name\u0027: \u0027Alfred\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "-": 153
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 424
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook Level 3 (AB3) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public abstract class AlfredException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(Exception cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class AlfredRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredRuntimeException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TYPE \u003d \"Unknown entity type\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_INPUT \u003d \"User input is incomplete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The entity index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // to set restrictions as some operations can only be applied to some entity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"The type of entity is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Joanna-YJA": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DataConversionException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Constructs an instance of DataConversionException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause Can have one of two main causes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 1) IOException from error reading from JSON file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 2) Illegal value exception, thrown when there are illegal values in json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Joanna-YJA": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class IllegalValueException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * There are 4 main scenario where CommandException is thrown:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) Could not store data to file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) Person index is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) Duplicate person with the same identity is added to model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) Type of entity(mentor, participant, team) is invalid)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandException extends AlfredException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "Joanna-YJA": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * ParseException is thrown is one of the 4 scenario:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) When the command is unknown"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) When the specific operation cannot be applied on an entity(invalid entity)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) When the command format is inaccurate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) When user input is incomplete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Joanna-YJA": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation will result in duplicate Entity (Entities are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of DuplicateEntityException according to type of entity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public DuplicateEntityException(String type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(\"Operation would result in duplicate \" + type + \" s\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation is unable to find the specified Entity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * This is due to incorrect index specified."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityNotFoundException extends AlfredRuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of EntityNotFoundException according to type of entity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityNotFoundException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(type + \"is not found\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.EntityList.TeamList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.EntityList.IssueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.EntityList.ParticipantList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.EntityList.MentorList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface AlfredStorage extends UserPrefsStorage, TeamListStorage,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantListStorage, IssueListStorage, MentorListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IssueList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getIssueListFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Manages storage of Entity (Participant, Mentor, Issue, Team) and UserPref data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class AlfredStorageManager implements AlfredStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantListStorage pStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorListStorage mStore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private IssueListStorage iStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamListStorage tStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public AlfredStorageManager(ParticipantListStorage pStore,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                MentorListStorage mStore,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                IssueListStorage iStore,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                TeamListStorage tStore,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pStore \u003d pStore;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mStore \u003d mStore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.iStore \u003d iStore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tStore \u003d tStore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.getParticipantListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.readParticipantList(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pStore.saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.getMentorListFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.readMentorList(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mStore.saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IssueList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return iStore.getIssueListFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readIssueList(iStore.getIssueListFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return iStore.readIssueList(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveIssueList(iList, iStore.getIssueListFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        iStore.saveIssueList(iList, filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.getTeamListFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.readTeamList(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tStore.saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IssueListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EntityList.IssueList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface IssueListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getIssueListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns IssueList data as a {@link IssueList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getIssueListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link IssueList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param issueList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveIssueList(IssueList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIssue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Issue}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedIssue {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final PrefixType[] prefixTypes \u003d PrefixType.values();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final IssueType issueType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final Boolean isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final PrefixType prefixType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterIssue} with the given participant details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedIssue(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            @JsonProperty(\"issueType\") IssueType issueType, @JsonProperty(\"isCompleted\") Boolean isCompleted,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            @JsonProperty(\"prefixType\") PrefixType prefixType, @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issueType \u003d issueType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Issue} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedIssue(Issue source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        isCompleted \u003d source.isCompleted();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        issueType \u003d source.getType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixType \u003d source.getId().getPrefix();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Issue} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Issue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (isCompleted \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"IsCompleted\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final String modelIsCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (issueType \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, IssueType.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!IssueType.isValidIssueType(issueType)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(IssueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final IssueType modelIssueType \u003d issueType;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d prefixType;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        if (idNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ID Number in ID object\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Must find a way to validate idNum"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Issue(modelName, modelId, modelDescription, modelIssueType, modelIsCompleted);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Mentor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedMentor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mentor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final PrefixType[] prefixTypes \u003d PrefixType.values();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final PrefixType prefixType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterMentor} with the given participant details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"organization\") String organization,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"subject\") String subject, @JsonProperty(\"prefixType\") PrefixType prefixType,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Mentor} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(Mentor source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        organization \u003d source.getOrganization().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixType \u003d source.getId().getPrefix();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Mentor} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Mentor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(Organization)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(organization)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelOrganization \u003d new Name(organization);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidName(subject)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubjectName \u003d new SubjectName(subject);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d prefixType;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        if (idNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ID Number in ID object\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Must find a way to validate idNum"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Mentor(modelName, modelId, modelPhone, modelEmail, modelOrganization, modelSubjectName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Participant}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedParticipant {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final PrefixType[] prefixTypes \u003d PrefixType.values();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final PrefixType prefixType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterParticipant} with the given participant details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"prefixType\") PrefixType prefixType,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Participant} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(Participant source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixType \u003d source.getId().getPrefix();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Participant} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Participant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d prefixType;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        if (idNum \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ID Number in ID object\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Must find a way to validate idNum"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Participant(modelName, modelEmail, modelPhone, modelId);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTeam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Team;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Team}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedTeam {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String teamName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final ProjectType projectType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e pList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final JsonAdaptedMentor mentor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final PrefixType prefixType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdaptedTeam} with the given person details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(@JsonProperty(\"teamName\") String teamName, @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"score\") int score, @JsonProperty(\"projectName\") String projectName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"projectType\") ProjectType projectType, @JsonProperty(\"location\") int location,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e pList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"mentor\") JsonAdaptedMentor mentor, @JsonProperty(\"PrefixType\") PrefixType prefixType,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Team} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(Team source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teamName \u003d source.getTeamName().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().toString(); //This is an enum. Need to check this."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        score \u003d source.getScore.getValue(); //Not implemented currently"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectName \u003d source.getProjectName().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectType \u003d source.getProjectType().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        location \u003d source.getLocation().getTableNumber();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentor \u003d JsonAdaptedMentor(source.getMentor().get()); //Must deal with Optional"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixType \u003d source.getId().getPrefix();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList.addAll(source.getParticipants().get().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .map(JsonAdaptedParticipant::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Team} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final List\u003cParticipant\u003e modelParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant p : pList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelParticipants.add(p.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (teamName \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(teamName)\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(teamName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelTeamName \u003d new Name(teamName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubject \u003d new SubjectName(subject);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Score.isValidScore(score)){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Score modelScore \u003d new Score(score);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(projectName)\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(projectName)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelProjectName \u003d new Name(projectName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectType \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ProjectType.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!ProjectType.isValidProjectType(projectType)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(ProjectType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final ProjectType modelProjectType \u003d projectType;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (mentor \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Mentor.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Mentor.isValidLocation(location)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Mentor modelMentor \u003d mentor.toModelType();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d prefixType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Team(modelId, modelTeamName, modelParticipants, modelMentor, modelSubject, modelScore, modelProjectName, modelProjectType, modelLocation);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonIssueListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access IssueList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonIssueListStorage implements IssueListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIssueListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonIssueListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readIssueList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readIssueList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableIssueList\u003e jsonIssueList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableIssueList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonIssueList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cIssueList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonIssueList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveIssueList(iList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveIssueList(IssueList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(iList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIssueList(iList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access MentorList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonMentorListStorage implements MentorListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMentorListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonMentorListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readMentorList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableMentorList\u003e jsonMentorList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableMentorList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonMentorList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cMentorList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonMentorList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList pList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(pList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveMentorList(MentorList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(pList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMentorList(pList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access ParticipantList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonParticipantListStorage implements ParticipantListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonParticipantListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonParticipantListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readParticipantList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableParticipantList\u003e jsonParticipantList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableParticipantList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonParticipantList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cParticipantList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonParticipantList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveParticipantList(ParticipantList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(pList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableParticipantList(pList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableIssueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable IssueList that is serializable to JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"issuelist\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableIssueList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Issue list contains duplicate issue(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedIssue\u003e issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableIssueList} with the given issues."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableIssueList(@JsonProperty(\"issues\") List\u003cJsonAdaptedIssue\u003e issues) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issues.addAll(issues);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code IssueList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIssueList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableIssueList(IssueList source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        issues.addAll(source.list().stream().map(JsonAdaptedIssue::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code IssueList} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public IssueList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedIssue jsonAdaptedIssue : issues) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Issue issue \u003d jsonAdaptedIssue.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (issueList.hasIssue(issue)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            issueList.addIssue(issue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return issueList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable MentorList that is serializable to JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"mentorlist\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableMentorList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Mentor list contains duplicate mentor(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedMentor\u003e mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableMentorList} with the given mentors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(@JsonProperty(\"mentors\") List\u003cJsonAdaptedMentor\u003e mentors) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentors.addAll(mentors);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code MentorList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMentorList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(MentorList source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentors.addAll(source.list().stream().map(JsonAdaptedMentor::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MentorList} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedMentor jsonAdaptedMentor : mentors) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor mentor \u003d jsonAdaptedMentor.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (mentorList.hasMentor(mentor)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            mentorList.addMentor(mentor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable ParticipantList that is serializable to JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"participantlist\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableParticipantList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Participant list contains duplicate participant(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipantList} with the given persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(@JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e persons) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code ParticipantList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipantList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(ParticipantList source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        persons.addAll(source.list().stream().map(JsonAdaptedParticipant::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ParticipantList} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant jsonAdaptedParticipant : participants) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant participant \u003d jsonAdaptedParticipant.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (participantList.hasParticipant(participant)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            participantList.addParticipant(participant);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable TeamList that is serializable to JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"teamlist\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableTeamList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Team list contains duplicate team(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableTeamList} with the given teams."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(@JsonProperty(\"teams\") List\u003cJsonAdaptedTeam\u003e teams) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teams.addAll(teams);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code TeamList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTeamList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(TeamList source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teams.addAll(source.list().stream().map(JsonAdaptedTeam::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TeamList} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedTeam jsonAdaptedTeam : teams) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team team \u003d jsonAdaptedTeam.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            if (teamList.hasTeam(team)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            teamList.addTeam(team);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access TeamList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonTeamListStorage implements TeamListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTeamListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonTeamListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readTeamList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableTeamList\u003e jsonTeamList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableTeamList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonTeamList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cTeamList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonTeamList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveTeamList(TeamList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(tList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTeamList(tList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EntityList.MentorList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface MentorListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns MentorList data as a {@link MentorList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getMentorListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link MentorList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mentorList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveMentorList(MentorList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EntityList.TeamList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface ParticipantListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns ParticipantList data as a {@link ParticipantList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getParticipantListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link ParticipantList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param participantList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveParticipantList(ParticipantList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Represents a storage for {@link seedu.address.model.EntityList.TeamList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface TeamListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns TeamList data as a {@link TeamList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getTeamListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link TeamList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param teamList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveTeamList(TeamList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/exceptions/LoadException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error in loading from JSON file or Storage file into AddressBook when the app is reopened."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class LoadException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public LoadException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 14
    }
  }
]
